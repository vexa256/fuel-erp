import { _ as ne, r as p, c as oe, o as le, d as i, e, g as b, f, h as y, i as G, t as r, w as P, j as q, F as O, k as J, v as I, S as x, p as d } from "./index-Fk_fMhvq.js"; import { C as z, r as re } from "./chart-DUfl3Dpl.js"; const ie = { class: "d-flex flex-column gap-5" }, de = { class: "card card-flush border-0 bg-light-primary" }, ce = { class: "card-header pt-8 pb-3" }, ue = { class: "d-flex align-items-center justify-content-between w-100" }, pe = { class: "row g-5" }, ve = { class: "col-6 col-lg-3" }, me = { class: "card card-flush bg-light-success h-100" }, fe = { class: "card-body p-5 text-center" }, ye = { class: "fs-2x fw-bold text-success" }, he = { class: "col-6 col-lg-3" }, ge = { class: "card card-flush bg-light-primary h-100" }, be = { class: "card-body p-5 text-center" }, Pe = { class: "fs-2x fw-bold text-primary" }, ke = { class: "col-6 col-lg-3" }, xe = { class: "card card-flush bg-light-warning h-100" }, we = { class: "card-body p-5 text-center" }, Se = { class: "fs-2x fw-bold text-warning" }, _e = { class: "col-6 col-lg-3" }, De = { class: "card card-flush bg-light-info h-100" }, Ce = { class: "card-body p-5 text-center" }, Re = { class: "fs-2x fw-bold text-info" }, Ie = { class: "card card-flush" }, Me = { class: "card-body" }, Ne = { class: "row g-5" }, Be = { class: "col-12 col-lg-8" }, Ae = { class: "d-flex flex-column h-300px" }, Te = { class: "col-12 col-lg-4" }, $e = { class: "d-flex flex-column gap-5" }, Ue = { class: "d-flex align-items-center justify-content-between" }, Ee = { class: "badge badge-light-primary fs-6" }, Fe = { class: "d-flex align-items-center justify-content-between" }, je = { class: "badge badge-light-success fs-6" }, Ve = { class: "d-flex align-items-center justify-content-between" }, Ge = { class: "badge badge-light-warning fs-6" }, qe = { class: "d-flex align-items-center justify-content-between" }, Oe = { class: "badge badge-light-info fs-6" }, Je = { key: 0, class: "card card-flush" }, Le = { class: "card-body p-7" }, Xe = { class: "row g-5" }, ze = { class: "col-12 col-lg-6" }, Ze = ["disabled"], Ye = { value: "" }, Qe = ["value"], We = { key: 0, class: "invalid-feedback" }, Ke = { class: "col-12 col-lg-6" }, He = ["disabled"], et = ["value"], tt = { class: "col-12 col-lg-6" }, at = { class: "input-group input-group-lg" }, st = ["disabled"], nt = { key: 0, class: "ki-duotone ki-refresh fs-4" }, ot = { key: 1, class: "spinner-border spinner-border-sm" }, lt = { key: 0, class: "invalid-feedback" }, rt = { class: "col-12 col-lg-6" }, it = { key: 0, class: "invalid-feedback" }, dt = { class: "col-12 col-lg-6" }, ct = { key: 0, class: "invalid-feedback" }, ut = { class: "col-12 col-lg-6" }, pt = { key: 0, class: "invalid-feedback" }, vt = { class: "col-12" }, mt = { key: 0, class: "invalid-feedback" }, ft = { class: "col-12" }, yt = { key: 0, class: "invalid-feedback" }, ht = { class: "col-12" }, gt = { class: "d-flex gap-3" }, bt = ["disabled", "data-kt-indicator"], Pt = { class: "card card-flush" }, kt = { class: "card-header" }, xt = { class: "card-toolbar" }, wt = ["disabled"], St = { key: 0, class: "ki-duotone ki-refresh fs-4" }, _t = { key: 1, class: "spinner-border spinner-border-sm" }, Dt = { class: "card-body p-0" }, Ct = { key: 0, class: "d-flex justify-content-center py-10" }, Rt = { key: 1, class: "text-center py-10" }, It = { key: 2, class: "table-responsive" }, Mt = { class: "table align-middle table-row-dashed gs-5" }, Nt = { class: "fw-semibold text-gray-700" }, Bt = { class: "d-flex align-items-center" }, At = { class: "fw-bold" }, Tt = { class: "badge badge-light-info fs-7" }, $t = { class: "fw-bold text-primary" }, Ut = { class: "text-gray-800" }, Et = { class: "text-gray-600" }, Ft = ["onClick"], D = "https://backend.cloudfuelstationmis.com/api/records/v1", jt = {
  __name: "PaymentManagementHub", setup(Vt) {
    z.register(...re); const k = p(!1), M = p(!1), C = p(!1), N = p(!1), U = p(!1), B = p(!1), v = p([]), R = p([]), E = p([]), A = p(null), h = p({ todayCount: 0, todayAmount: 0, pendingCount: 0, successRate: 95 }), g = p({ bankTransfer: 0, cash: 0, mobileMoney: 0, check: 0 }), F = p(null), s = p({ SupplierID: "", StationID: "", PaymentReference: "", PaymentDate: new Date().toISOString().split("T")[0], PaymentAmount: "", PaymentMethod: "Bank Transfer", BankReference: "", Notes: "", ProcessedBy: "1", Status: "Completed" }), o = p({}), w = localStorage.getItem("jwt") || "eyJ0eXAiOiJKV1QiLCJhbGciOiJFZERTQSJ9.eyJzdWIiOiJkMDc1QVZVSVNCcW9HN3dvZFV0MVZ3PT0iLCJpYXQiOjE3NTA1NDE0NzYsImV4cCI6MTc1MDU0NTA3NiwiZW1haWwiOiJhZG1pbkBsb2NhbGhvc3QiLCJjc3JmX3Rva2VuIjoiU096UjJaS2Z5ZkM1RU80TXFhaEEifQ.0o7bR0Ow7iTss_U_F8YkdclzknFMF2c6osVOExKvI8d-Jmx5dU-P2woXhJAItU29sxIG8i9pxWAgOUutCuT9Bg", Z = oe(() => s.value.SupplierID && s.value.PaymentReference && s.value.PaymentDate && s.value.PaymentAmount && parseFloat(s.value.PaymentAmount) > 0 && s.value.PaymentMethod && s.value.BankReference && s.value.Notes), T = a => parseFloat(a || 0).toLocaleString("en-UG", { minimumFractionDigits: 2 }), L = a => new Date(a).toLocaleDateString("en-UG"), Y = a => { const t = R.value.find(n => n.SupplierID == a); return t ? t.Name : "Unknown" }, j = async () => { var a; B.value = !0; try { const t = Date.now(), n = ((a = A.value) == null ? void 0 : a.id) || "1", u = Math.random().toString(36).substring(2, 12).toUpperCase(), l = performance.now().toString().replace(".", "").substring(0, 8); let c = `SPP-${t}-U${n}-${u}-${l}`, m = !1, S = 0; for (; !m && S < 5;)try { const _ = await fetch(`${D}/SupplierPayments?PaymentReference=${encodeURIComponent(c)}`, { method: "GET", headers: { Authorization: `Bearer ${w}`, "Content-Type": "application/json" } }); if (_.ok) { const $ = await _.json(); m = !$.records || $.records.length === 0 } else m = !0; if (!m) { const $ = Math.random().toString(36).substring(2, 8).toUpperCase(); c = `SPP-${Date.now()}-U${n}-${u}-${l}-${$}`, S++ } } catch (_) { console.warn("Reference uniqueness check failed, proceeding:", _), m = !0 } s.value.PaymentReference = c, x.fire({ title: "Reference Generated!", text: `Unique reference: ${c}`, icon: "success", toast: !0, position: "top-end", timer: 2e3, showConfirmButton: !1 }) } catch (t) { console.error("Error generating reference:", t); const n = `SPP-FALLBACK-${Date.now()}-${Math.random().toString(36).substring(2, 10).toUpperCase()}`; s.value.PaymentReference = n, x.fire({ title: "Fallback Reference", text: "Generated fallback reference", icon: "warning", toast: !0, position: "top-end", timer: 3e3, showConfirmButton: !1 }) } finally { B.value = !1 } }, V = async () => { C.value = !0; try { const a = await fetch(`${D}/SupplierPayments`, { method: "GET", headers: { Authorization: `Bearer ${w}`, "Content-Type": "application/json" } }); if (!a.ok) throw new Error(`Failed to fetch payments: ${a.status}`); const t = await a.json(); v.value = (t.records || []).slice(0, 10), H() } catch (a) { console.error("Error fetching payments:", a), x.fire({ title: "Error!", text: "Failed to load payments data", icon: "error", confirmButtonColor: "#f1416c" }) } finally { C.value = !1 } }, Q = async () => { N.value = !0; try { const a = await fetch(`${D}/Suppliers`, { method: "GET", headers: { Authorization: `Bearer ${w}`, "Content-Type": "application/json" } }); if (!a.ok) throw new Error(`Failed to fetch suppliers: ${a.status}`); const t = await a.json(); R.value = t.records || [] } catch (a) { console.error("Error fetching suppliers:", a) } finally { N.value = !1 } }, W = async () => { U.value = !0; try { const a = await fetch(`${D}/Stations`, { method: "GET", headers: { Authorization: `Bearer ${w}`, "Content-Type": "application/json" } }); if (!a.ok) throw new Error(`Failed to fetch stations: ${a.status}`); const t = await a.json(); E.value = t.records || [] } catch (a) { console.error("Error fetching stations:", a) } finally { U.value = !1 } }, K = async () => { try { const a = await fetch(`${D}/users`, { method: "GET", headers: { Authorization: `Bearer ${w}`, "Content-Type": "application/json" } }); if (a.ok) { const t = await a.json(); t.records && t.records.length > 0 && (A.value = t.records[0], s.value.ProcessedBy = String(A.value.id)) } } catch (a) { console.error("Error fetching current user:", a), s.value.ProcessedBy = "1" } }, H = () => { const a = new Date().toISOString().split("T")[0], t = v.value.filter(l => l.PaymentDate === a); h.value.todayCount = t.length, h.value.todayAmount = t.reduce((l, c) => l + parseFloat(c.PaymentAmount || 0), 0), h.value.pendingCount = v.value.filter(l => l.Status === "Pending").length; const n = v.value.filter(l => l.Status === "Completed").length; h.value.successRate = v.value.length > 0 ? Math.round(n / v.value.length * 100) : 95; const u = v.value.length; u > 0 && (g.value.bankTransfer = Math.round(v.value.filter(l => l.PaymentMethod === "Bank Transfer").length / u * 100), g.value.cash = Math.round(v.value.filter(l => l.PaymentMethod === "Cash").length / u * 100), g.value.mobileMoney = Math.round(v.value.filter(l => l.PaymentMethod === "Mobile Money").length / u * 100), g.value.check = Math.round(v.value.filter(l => l.PaymentMethod === "Check").length / u * 100)) }, ee = () => { if (!F.value) return; const a = F.value.getContext("2d"), t = [], n = []; for (let u = 6; u >= 0; u--) { const l = new Date; l.setDate(l.getDate() - u); const c = l.toISOString().split("T")[0]; t.push(l.toLocaleDateString("en-UG", { weekday: "short" })); const m = v.value.filter(S => S.PaymentDate === c); n.push(m.reduce((S, _) => S + parseFloat(_.PaymentAmount || 0), 0)) } new z(a, { type: "line", data: { labels: t, datasets: [{ label: "Payment Amount (UGX)", data: n, borderColor: "#009ef7", backgroundColor: "rgba(0, 158, 247, 0.1)", tension: .4, fill: !0 }] }, options: { responsive: !0, maintainAspectRatio: !1, plugins: { legend: { position: "top" } }, scales: { y: { beginAtZero: !0 } } } }) }, te = () => { if (o.value = {}, s.value.SupplierID ? isNaN(parseInt(s.value.SupplierID)) && (o.value.SupplierID = "Invalid supplier selection") : o.value.SupplierID = "Supplier is required", s.value.PaymentReference ? s.value.PaymentReference.length < 5 ? o.value.PaymentReference = "Payment reference must be at least 5 characters" : s.value.PaymentReference.length > 255 && (o.value.PaymentReference = "Payment reference too long (max 255 characters)") : o.value.PaymentReference = "Payment reference is required", s.value.PaymentDate ? /^\d{4}-\d{2}-\d{2}$/.test(s.value.PaymentDate) || (o.value.PaymentDate = "Invalid date format (YYYY-MM-DD required)") : o.value.PaymentDate = "Payment date is required", !s.value.PaymentAmount) o.value.PaymentAmount = "Payment amount is required"; else { const t = parseFloat(s.value.PaymentAmount); isNaN(t) || t <= 0 ? o.value.PaymentAmount = "Payment amount must be greater than 0" : t > 99999999999e-2 && (o.value.PaymentAmount = "Payment amount too large") } const a = ["Bank Transfer", "Check", "Cash", "Mobile Money"]; return s.value.PaymentMethod ? a.includes(s.value.PaymentMethod) || (o.value.PaymentMethod = "Invalid payment method") : o.value.PaymentMethod = "Payment method is required", !s.value.BankReference || s.value.BankReference.trim().length === 0 ? o.value.BankReference = "Bank reference is required for audit purposes" : s.value.BankReference.length > 255 && (o.value.BankReference = "Bank reference too long (max 255 characters)"), !s.value.Notes || s.value.Notes.trim().length === 0 ? o.value.Notes = "Payment notes are required for documentation" : s.value.Notes.trim().length < 10 ? o.value.Notes = "Notes must be at least 10 characters for proper documentation" : s.value.Notes.length > 1e3 && (o.value.Notes = "Notes too long (max 1000 characters)"), Object.keys(o.value).length === 0 }, ae = async () => {
      if (!te()) { x.fire({ title: "Validation Error!", text: "Please fix the form errors before submitting", icon: "error", confirmButtonColor: "#f1416c" }); return } M.value = !0; try {
        const a = { SupplierID: parseInt(s.value.SupplierID), StationID: s.value.StationID ? parseInt(s.value.StationID) : null, PaymentReference: s.value.PaymentReference.trim(), PaymentDate: s.value.PaymentDate, PaymentAmount: s.value.PaymentAmount.toString(), PaymentMethod: s.value.PaymentMethod, BankReference: s.value.BankReference.trim(), Notes: s.value.Notes.trim(), ProcessedBy: parseInt(s.value.ProcessedBy), Status: s.value.Status }; console.log("Creating payment with data:", a); const t = R.value.find(l => l.SupplierID == a.SupplierID); if (!t) throw new Error("Selected supplier does not exist"); if (a.StationID && !E.value.find(c => c.StationID == a.StationID)) throw new Error("Selected station does not exist"); const n = await fetch(`${D}/SupplierPayments`, { method: "POST", headers: { Authorization: `Bearer ${w}`, "Content-Type": "application/json" }, body: JSON.stringify(a) }); if (!n.ok) { let l = `Payment creation failed: ${n.status}`; try { const c = await n.text(); console.error("Server error response:", c); const m = JSON.parse(c); l = m.message || m.error || l, c.includes("UNIQUE constraint failed") ? l = "Payment reference already exists. Please generate a new reference." : c.includes("FOREIGN KEY constraint failed") && (l = "Invalid supplier or station selected. Please refresh and try again.") } catch (c) { console.error("Could not parse error response:", c) } throw new Error(l) } const u = await n.json(); console.log("Payment created successfully:", u), x.fire({
          title: "Payment Created!", html: `
        <div class="text-start">
          <p><strong>Reference:</strong> ${a.PaymentReference}</p>
          <p><strong>Amount:</strong> UGX ${T(a.PaymentAmount)}</p>
          <p><strong>Supplier:</strong> ${t.Name}</p>
          <p><strong>Method:</strong> ${a.PaymentMethod}</p>
        </div>
      `, icon: "success", confirmButtonColor: "#50cd89"
        }), X(), k.value = !1, await Promise.all([V(), j()])
      } catch (a) { console.error("Error creating payment:", a), x.fire({ title: "Creation Failed!", text: a.message || "Could not create payment. Please try again.", icon: "error", confirmButtonColor: "#f1416c" }) } finally { M.value = !1 }
    }, X = () => { var a; s.value = { SupplierID: "", StationID: "", PaymentReference: "", PaymentDate: new Date().toISOString().split("T")[0], PaymentAmount: "", PaymentMethod: "Bank Transfer", BankReference: "", Notes: "", ProcessedBy: ((a = A.value) == null ? void 0 : a.id) || "1", Status: "Completed" }, o.value = {} }, se = a => {
      const t = R.value.find(n => n.SupplierID == a.SupplierID); x.fire({
        title: "Payment Details", html: `
      <div class="text-start">
        <p><strong>Supplier:</strong> ${(t == null ? void 0 : t.Name) || "Unknown"}</p>
        <p><strong>Reference:</strong> ${a.PaymentReference}</p>
        <p><strong>Amount:</strong> UGX ${T(a.PaymentAmount)}</p>
        <p><strong>Method:</strong> ${a.PaymentMethod}</p>
        <p><strong>Date:</strong> ${L(a.PaymentDate)}</p>
        <p><strong>Bank Reference:</strong> ${a.BankReference || "N/A"}</p>
        <p><strong>Status:</strong> ${a.Status}</p>
        <p><strong>Notes:</strong> ${a.Notes || "No notes"}</p>
      </div>
    `, width: "500px", confirmButtonText: "Close"
      })
    }; return le(async () => { await Promise.all([Q(), W(), K(), V()]), await j(), setTimeout(() => { ee() }, 500) }), (a, t) => (d(), i("div", ie, [e("div", de, [e("div", ce, [e("div", ue, [t[10] || (t[10] = f('<div class="d-flex align-items-center gap-3" data-v-3a535930><div class="symbol symbol-50px bg-white" data-v-3a535930><i class="ki-duotone ki-dollar fs-2x text-primary" data-v-3a535930><span class="path1" data-v-3a535930></span><span class="path2" data-v-3a535930></span><span class="path3" data-v-3a535930></span></i></div><div data-v-3a535930><h1 class="fw-bold text-gray-900 mb-1" data-v-3a535930>Supplier Payments</h1><span class="text-gray-600 fs-6" data-v-3a535930>Manage and track all supplier payment transactions</span></div></div>', 1)), e("button", { onClick: t[0] || (t[0] = n => k.value = !k.value), class: y(["btn btn-lg", k.value ? "btn-light-danger" : "btn-light-success"]) }, [e("i", { class: y(["ki-duotone fs-2", k.value ? "ki-cross" : "ki-plus"]) }, t[9] || (t[9] = [e("span", { class: "path1" }, null, -1), e("span", { class: "path2" }, null, -1)]), 2), G(" " + r(k.value ? "Cancel" : "New Payment"), 1)], 2)])])]), e("div", pe, [e("div", ve, [e("div", me, [e("div", fe, [t[11] || (t[11] = f('<div class="symbol symbol-40px mx-auto mb-3" data-v-3a535930><i class="ki-duotone ki-calendar-tick fs-1 text-success" data-v-3a535930><span class="path1" data-v-3a535930></span><span class="path2" data-v-3a535930></span></i></div><div class="fs-6 fw-semibold text-gray-600 mb-1" data-v-3a535930>Today</div>', 2)), e("div", ye, r(h.value.todayCount), 1), t[12] || (t[12] = e("div", { class: "fs-7 text-gray-500" }, "Payments", -1))])])]), e("div", he, [e("div", ge, [e("div", be, [t[13] || (t[13] = f('<div class="symbol symbol-40px mx-auto mb-3" data-v-3a535930><i class="ki-duotone ki-wallet fs-1 text-primary" data-v-3a535930><span class="path1" data-v-3a535930></span><span class="path2" data-v-3a535930></span></i></div><div class="fs-6 fw-semibold text-gray-600 mb-1" data-v-3a535930>Total</div>', 2)), e("div", Pe, r(T(h.value.todayAmount)), 1), t[14] || (t[14] = e("div", { class: "fs-7 text-gray-500" }, "UGX", -1))])])]), e("div", ke, [e("div", xe, [e("div", we, [t[15] || (t[15] = f('<div class="symbol symbol-40px mx-auto mb-3" data-v-3a535930><i class="ki-duotone ki-time fs-1 text-warning" data-v-3a535930><span class="path1" data-v-3a535930></span><span class="path2" data-v-3a535930></span></i></div><div class="fs-6 fw-semibold text-gray-600 mb-1" data-v-3a535930>Pending</div>', 2)), e("div", Se, r(h.value.pendingCount), 1), t[16] || (t[16] = e("div", { class: "fs-7 text-gray-500" }, "Payments", -1))])])]), e("div", _e, [e("div", De, [e("div", Ce, [t[17] || (t[17] = f('<div class="symbol symbol-40px mx-auto mb-3" data-v-3a535930><i class="ki-duotone ki-chart-line fs-1 text-info" data-v-3a535930><span class="path1" data-v-3a535930></span><span class="path2" data-v-3a535930></span><span class="path3" data-v-3a535930></span></i></div><div class="fs-6 fw-semibold text-gray-600 mb-1" data-v-3a535930>Success</div>', 2)), e("div", Re, r(h.value.successRate) + "%", 1), t[18] || (t[18] = e("div", { class: "fs-7 text-gray-500" }, "Rate", -1))])])])]), e("div", Ie, [t[23] || (t[23] = f('<div class="card-header" data-v-3a535930><h3 class="card-title fw-bold text-gray-900" data-v-3a535930><i class="ki-duotone ki-chart-line fs-2 text-primary me-2" data-v-3a535930><span class="path1" data-v-3a535930></span><span class="path2" data-v-3a535930></span><span class="path3" data-v-3a535930></span></i> Payment Trends (Last 7 Days) </h3></div>', 1)), e("div", Me, [e("div", Ne, [e("div", Be, [e("div", Ae, [e("canvas", { ref_key: "paymentsChart", ref: F, style: { height: "250px" } }, null, 512)])]), e("div", Te, [e("div", $e, [e("div", Ue, [t[19] || (t[19] = e("span", { class: "fw-bold text-gray-700" }, "Bank Transfer", -1)), e("span", Ee, r(g.value.bankTransfer) + "%", 1)]), e("div", Fe, [t[20] || (t[20] = e("span", { class: "fw-bold text-gray-700" }, "Cash", -1)), e("span", je, r(g.value.cash) + "%", 1)]), e("div", Ve, [t[21] || (t[21] = e("span", { class: "fw-bold text-gray-700" }, "Mobile Money", -1)), e("span", Ge, r(g.value.mobileMoney) + "%", 1)]), e("div", qe, [t[22] || (t[22] = e("span", { class: "fw-bold text-gray-700" }, "Check", -1)), e("span", Oe, r(g.value.check) + "%", 1)])])])])])]), k.value ? (d(), i("div", Je, [t[37] || (t[37] = f('<div class="card-header" data-v-3a535930><h3 class="card-title fw-bold text-gray-900" data-v-3a535930><i class="ki-duotone ki-plus fs-2 text-success me-2" data-v-3a535930><span class="path1" data-v-3a535930></span><span class="path2" data-v-3a535930></span></i> Create New Payment </h3></div>', 1)), e("div", Le, [e("div", Xe, [e("div", ze, [t[24] || (t[24] = e("label", { class: "required form-label fw-bold text-gray-800 fs-5" }, "Supplier", -1)), P(e("select", { "onUpdate:modelValue": t[1] || (t[1] = n => s.value.SupplierID = n), class: y(["form-select form-select-lg", { "is-invalid": o.value.SupplierID }]), disabled: N.value }, [e("option", Ye, r(N.value ? "Loading..." : "Choose supplier..."), 1), (d(!0), i(O, null, J(R.value, n => (d(), i("option", { key: n.SupplierID, value: n.SupplierID }, r(n.Name), 9, Qe))), 128))], 10, Ze), [[q, s.value.SupplierID]]), o.value.SupplierID ? (d(), i("div", We, r(o.value.SupplierID), 1)) : b("", !0)]), e("div", Ke, [t[26] || (t[26] = e("label", { class: "form-label fw-bold text-gray-800 fs-5" }, "Station", -1)), P(e("select", { "onUpdate:modelValue": t[2] || (t[2] = n => s.value.StationID = n), class: "form-select form-select-lg", disabled: U.value }, [t[25] || (t[25] = e("option", { value: "" }, "General/All Stations", -1)), (d(!0), i(O, null, J(E.value, n => (d(), i("option", { key: n.StationID, value: n.StationID }, r(n.StationName), 9, et))), 128))], 8, He), [[q, s.value.StationID]])]), e("div", tt, [t[28] || (t[28] = e("label", { class: "required form-label fw-bold text-gray-800 fs-5" }, "Payment Reference", -1)), e("div", at, [P(e("input", { "onUpdate:modelValue": t[3] || (t[3] = n => s.value.PaymentReference = n), type: "text", class: y(["form-control", { "is-invalid": o.value.PaymentReference }]), placeholder: "Enter payment reference" }, null, 2), [[I, s.value.PaymentReference]]), e("button", { onClick: j, type: "button", class: "btn btn-light-primary", disabled: B.value }, [B.value ? (d(), i("span", ot)) : (d(), i("i", nt, t[27] || (t[27] = [e("span", { class: "path1" }, null, -1), e("span", { class: "path2" }, null, -1)])))], 8, st)]), o.value.PaymentReference ? (d(), i("div", lt, r(o.value.PaymentReference), 1)) : b("", !0)]), e("div", rt, [t[29] || (t[29] = e("label", { class: "required form-label fw-bold text-gray-800 fs-5" }, "Payment Date", -1)), P(e("input", { "onUpdate:modelValue": t[4] || (t[4] = n => s.value.PaymentDate = n), type: "date", class: y(["form-control form-control-lg", { "is-invalid": o.value.PaymentDate }]) }, null, 2), [[I, s.value.PaymentDate]]), o.value.PaymentDate ? (d(), i("div", it, r(o.value.PaymentDate), 1)) : b("", !0)]), e("div", dt, [t[30] || (t[30] = e("label", { class: "required form-label fw-bold text-gray-800 fs-5" }, "Payment Amount (UGX)", -1)), P(e("input", { "onUpdate:modelValue": t[5] || (t[5] = n => s.value.PaymentAmount = n), type: "number", step: "0.01", min: "0", class: y(["form-control form-control-lg", { "is-invalid": o.value.PaymentAmount }]), placeholder: "0.00" }, null, 2), [[I, s.value.PaymentAmount]]), o.value.PaymentAmount ? (d(), i("div", ct, r(o.value.PaymentAmount), 1)) : b("", !0)]), e("div", ut, [t[32] || (t[32] = e("label", { class: "required form-label fw-bold text-gray-800 fs-5" }, "Payment Method", -1)), P(e("select", { "onUpdate:modelValue": t[6] || (t[6] = n => s.value.PaymentMethod = n), class: y(["form-select form-select-lg", { "is-invalid": o.value.PaymentMethod }]) }, t[31] || (t[31] = [e("option", { value: "Bank Transfer" }, "Bank Transfer", -1), e("option", { value: "Check" }, "Check", -1), e("option", { value: "Cash" }, "Cash", -1), e("option", { value: "Mobile Money" }, "Mobile Money", -1)]), 2), [[q, s.value.PaymentMethod]]), o.value.PaymentMethod ? (d(), i("div", pt, r(o.value.PaymentMethod), 1)) : b("", !0)]), e("div", vt, [t[33] || (t[33] = e("label", { class: "required form-label fw-bold text-gray-800 fs-5" }, "Bank Reference / Transaction ID", -1)), P(e("input", { "onUpdate:modelValue": t[7] || (t[7] = n => s.value.BankReference = n), type: "text", class: y(["form-control form-control-lg", { "is-invalid": o.value.BankReference }]), placeholder: "Enter bank reference or transaction ID" }, null, 2), [[I, s.value.BankReference]]), o.value.BankReference ? (d(), i("div", mt, r(o.value.BankReference), 1)) : b("", !0)]), e("div", ft, [t[34] || (t[34] = e("label", { class: "required form-label fw-bold text-gray-800 fs-5" }, "Payment Notes", -1)), P(e("textarea", { "onUpdate:modelValue": t[8] || (t[8] = n => s.value.Notes = n), class: y(["form-control form-control-lg", { "is-invalid": o.value.Notes }]), rows: "4", placeholder: "Enter payment details, invoice numbers, or additional information..." }, null, 2), [[I, s.value.Notes]]), o.value.Notes ? (d(), i("div", yt, r(o.value.Notes), 1)) : b("", !0)]), e("div", ht, [e("div", gt, [e("button", { onClick: ae, class: "btn btn-lg btn-success flex-grow-1", disabled: M.value || !Z.value, "data-kt-indicator": M.value ? "on" : "off" }, t[35] || (t[35] = [f('<span class="indicator-label" data-v-3a535930><i class="ki-duotone ki-check fs-2" data-v-3a535930><span class="path1" data-v-3a535930></span><span class="path2" data-v-3a535930></span></i> Create Payment </span><span class="indicator-progress" data-v-3a535930> Processing... <span class="spinner-border spinner-border-sm ms-2" data-v-3a535930></span></span>', 2)]), 8, bt), e("button", { onClick: X, type: "button", class: "btn btn-lg btn-light-secondary" }, t[36] || (t[36] = [f('<i class="ki-duotone ki-trash fs-2" data-v-3a535930><span class="path1" data-v-3a535930></span><span class="path2" data-v-3a535930></span><span class="path3" data-v-3a535930></span><span class="path4" data-v-3a535930></span><span class="path5" data-v-3a535930></span></i> Reset ', 2)]))])])])])])) : b("", !0), e("div", Pt, [e("div", kt, [t[40] || (t[40] = e("h3", { class: "card-title fw-bold text-gray-900" }, [e("i", { class: "ki-duotone ki-calendar fs-2 text-info me-2" }, [e("span", { class: "path1" }), e("span", { class: "path2" })]), G(" Recent Payments ")], -1)), e("div", xt, [e("button", { onClick: V, class: "btn btn-sm btn-light-primary", disabled: C.value }, [C.value ? (d(), i("span", _t)) : (d(), i("i", St, t[38] || (t[38] = [e("span", { class: "path1" }, null, -1), e("span", { class: "path2" }, null, -1)]))), t[39] || (t[39] = G(" Refresh "))], 8, wt)])]), e("div", Dt, [C.value ? (d(), i("div", Ct, t[41] || (t[41] = [e("div", { class: "spinner-border text-primary" }, null, -1)]))) : v.value.length === 0 ? (d(), i("div", Rt, t[42] || (t[42] = [e("i", { class: "ki-duotone ki-file-deleted fs-3x text-gray-400 mb-3" }, [e("span", { class: "path1" }), e("span", { class: "path2" })], -1), e("p", { class: "text-gray-500 fs-5" }, "No payments found", -1)]))) : (d(), i("div", It, [e("table", Mt, [t[45] || (t[45] = e("thead", null, [e("tr", { class: "text-start text-gray-600 fw-bold fs-7 text-uppercase" }, [e("th", null, "Supplier"), e("th", null, "Reference"), e("th", null, "Amount"), e("th", null, "Method"), e("th", null, "Date"), e("th", null, "Status"), e("th", null, "Actions")])], -1)), e("tbody", Nt, [(d(!0), i(O, null, J(v.value, n => (d(), i("tr", { key: n.PaymentID }, [e("td", null, [e("div", Bt, [t[43] || (t[43] = f('<div class="symbol symbol-30px me-3" data-v-3a535930><div class="symbol-label bg-light-primary" data-v-3a535930><i class="ki-duotone ki-supplier fs-3 text-primary" data-v-3a535930><span class="path1" data-v-3a535930></span><span class="path2" data-v-3a535930></span></i></div></div>', 1)), e("span", At, r(Y(n.SupplierID)), 1)])]), e("td", null, [e("span", Tt, r(n.PaymentReference), 1)]), e("td", null, [e("span", $t, "UGX " + r(T(n.PaymentAmount)), 1)]), e("td", null, [e("span", Ut, r(n.PaymentMethod), 1)]), e("td", null, [e("span", Et, r(L(n.PaymentDate)), 1)]), e("td", null, [e("span", { class: y(["badge fs-7", { "badge-light-success": n.Status === "Completed", "badge-light-warning": n.Status === "Pending", "badge-light-danger": n.Status === "Failed", "badge-light-secondary": n.Status === "Cancelled" }]) }, r(n.Status), 3)]), e("td", null, [e("button", { onClick: u => se(n), class: "btn btn-sm btn-light-primary" }, t[44] || (t[44] = [e("i", { class: "ki-duotone ki-eye fs-5" }, [e("span", { class: "path1" }), e("span", { class: "path2" }), e("span", { class: "path3" })], -1)]), 8, Ft)])]))), 128))])])]))])])]))
  }
}, Ot = ne(jt, [["__scopeId", "data-v-3a535930"]]); export { Ot as default };
