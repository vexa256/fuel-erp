import { _ as te, r as B, c as et, a as W, o as ee, n as At, S, b as se, d, e as t, f as U, g as y, h as x, i as $, t as l, w as D, v as P, j as ot, F as Et, k as It, l as J, m as Ot, p as u } from "./index-Fk_fMhvq.js"; const ae = { class: "d-flex flex-column gap-5 h-100" }, oe = { class: "card card-flush shadow-sm" }, ne = { class: "card-header pt-7 pb-4" }, re = { class: "card-toolbar" }, ie = { class: "d-flex align-items-center gap-3" }, le = { key: 1, class: "badge badge-light-info fs-7 fw-bold px-3 py-2" }, ce = { key: 2, class: "badge badge-light-warning fs-7 fw-bold px-3 py-2" }, de = { key: 3, class: "badge badge-light-danger fs-7 fw-bold px-3 py-2" }, ue = { class: "badge badge-light-success fs-7 fw-bold px-3 py-2" }, fe = ["disabled"], pe = { class: "card card-flush shadow-sm flex-grow-1" }, ve = { class: "card-body p-0" }, he = { class: "stepper stepper-pills stepper-column d-flex flex-column flex-xl-row flex-row-fluid gap-10", id: "kt_create_account_stepper" }, me = { class: "card d-flex justify-content-center justify-content-xl-start flex-row-auto w-100 w-xl-300px w-xxl-400px border-0" }, be = { class: "card-body px-6 px-lg-10 px-xxl-15 py-20" }, ge = { class: "stepper-nav" }, ye = { class: "card d-flex flex-row-fluid flex-center" }, we = { class: "card-body py-20 w-100 mw-xl-700px px-9" }, xe = { key: 0, class: "current" }, Ce = { class: "w-100" }, Se = { key: 0, class: "d-flex flex-column align-items-center py-10" }, _e = { class: "text-center" }, ke = { class: "text-gray-700 mb-2" }, De = { class: "text-muted fs-7" }, Ae = { key: 1, class: "row g-6" }, Ee = { class: "col-12" }, Ie = { class: "card card-flush border border-primary h-xl-100" }, Oe = { class: "card-header bg-light-primary" }, Te = { class: "card-title d-flex align-items-center" }, Re = { class: "text-primary mb-1" }, $e = { class: "text-muted fs-7 fw-semibold" }, Ne = { key: 0, class: "badge badge-success ms-2" }, Be = { key: 1, class: "badge badge-info ms-2" }, Ue = { key: 2, class: "badge badge-warning ms-2" }, Fe = { class: "card-body" }, Ve = { class: "row g-4" }, Pe = { class: "col-md-3" }, He = { class: "fs-6 fw-bold text-gray-800" }, Le = { class: "col-md-3" }, Me = { class: "fs-6 fw-bold text-gray-800" }, Ge = { class: "col-md-3" }, ze = { class: "fs-6 fw-bold text-success" }, qe = { class: "col-md-3" }, je = { class: "fs-6 fw-bold text-info" }, Xe = { class: "mt-6 p-4 bg-light-info rounded" }, Ye = { class: "d-flex align-items-center" }, Ke = { class: "text-muted fs-7 mb-0" }, We = { class: "mt-6 p-4 bg-light-success rounded" }, Je = { class: "d-flex align-items-center" }, Qe = { class: "text-muted fs-7 mb-0" }, Ze = { key: 0, class: "badge badge-primary ms-2" }, ts = { key: 0, class: "mt-6 p-4 bg-light-warning rounded border border-warning" }, es = { class: "col-12" }, ss = { class: "card card-flush border border-gray-300" }, as = { class: "card-body" }, os = { key: 2, class: "col-12" }, ns = { class: "text-center py-10" }, rs = { class: "text-muted fs-6" }, is = { key: 1, class: "current" }, ls = { class: "w-100" }, cs = { class: "card bg-light-primary border border-primary mb-8" }, ds = { class: "card-body" }, us = { class: "card-title text-primary" }, fs = { class: "row g-4" }, ps = { class: "col-md-3" }, vs = { class: "fs-6 fw-bold text-gray-800" }, hs = { class: "col-md-3" }, ms = { class: "fs-6 fw-bold text-gray-800" }, bs = { class: "col-md-3" }, gs = { class: "fs-6 fw-bold text-success" }, ys = { class: "col-md-3" }, ws = { class: "fs-6 fw-bold text-info" }, xs = { class: "card card-flush" }, Cs = { class: "card-body" }, Ss = { class: "row g-6" }, _s = { class: "col-md-6" }, ks = ["disabled"], Ds = { key: 0, class: "invalid-feedback" }, As = { key: 1, class: "form-text text-warning" }, Es = { class: "col-md-6" }, Is = ["disabled"], Os = { class: "mt-8 p-6 bg-light-info rounded border border-info" }, Ts = { class: "row g-4" }, Rs = { class: "col-md-3" }, $s = { class: "fs-5 fw-bold text-gray-800" }, Ns = { class: "col-md-3" }, Bs = { class: "fs-5 fw-bold text-primary" }, Us = { class: "col-md-3" }, Fs = { class: "fs-5 fw-bold text-warning" }, Vs = { class: "col-md-3" }, Ps = { key: 0, class: "fs-6" }, Hs = { class: "d-flex align-items-center" }, Ls = { class: "mb-1" }, Ms = { class: "text-muted fs-7 mb-0" }, Gs = { class: "mt-8" }, zs = { class: "card card-flush border border-gray-300" }, qs = { class: "card-body" }, js = { key: 2, class: "current" }, Xs = { class: "w-100" }, Ys = { class: "card-body" }, Ks = { class: "d-flex align-items-center" }, Ws = { class: "flex-grow-1" }, Js = { class: "mb-1" }, Qs = { class: "text-muted fs-6 mb-0" }, Zs = { class: "card card-flush" }, ta = { class: "card-body" }, ea = { class: "row g-6" }, sa = { class: "col-md-6" }, aa = ["disabled"], oa = { key: 0, class: "invalid-feedback" }, na = { class: "col-md-6" }, ra = ["disabled"], ia = { key: 0, class: "invalid-feedback" }, la = { class: "row g-6 mt-6" }, ca = { class: "col-12" }, da = ["disabled"], ua = { key: 0, class: "invalid-feedback" }, fa = { class: "row g-6 mt-6" }, pa = { class: "col-md-6" }, va = { class: "d-flex flex-wrap gap-2" }, ha = ["value", "disabled"], ma = { class: "form-check-label fs-7" }, ba = { class: "col-md-6" }, ga = { class: "d-flex flex-wrap gap-2" }, ya = ["value", "disabled"], wa = { class: "form-check-label fs-7" }, xa = { key: 3, class: "current" }, Ca = { class: "w-100" }, Sa = { class: "card card-flush" }, _a = { class: "card-body" }, ka = { class: "row g-6" }, Da = { class: "col-12" }, Aa = ["disabled"], Ea = { key: 0, class: "invalid-feedback" }, Ia = { class: "row g-6 mt-6" }, Oa = { class: "col-md-6" }, Ta = ["disabled"], Ra = { class: "col-md-6" }, $a = ["disabled"], Na = { class: "row g-6 mt-6" }, Ba = { class: "col-12" }, Ua = ["disabled"], Fa = { key: 0, class: "invalid-feedback" }, Va = { key: 0, class: "mt-8 p-6 bg-light-warning rounded border border-warning" }, Pa = { class: "row g-4" }, Ha = { class: "col-md-6" }, La = { class: "col-md-6" }, Ma = { key: 4, class: "current" }, Ga = { class: "w-100" }, za = { class: "card card-flush mb-8" }, qa = { class: "card-body" }, ja = { class: "row g-6" }, Xa = { class: "col-md-4" }, Ya = { class: "card bg-light-info border border-info" }, Ka = { class: "card-body text-center" }, Wa = { class: "fs-4 fw-bold text-gray-800 mb-0" }, Ja = { class: "col-md-4" }, Qa = { class: "card bg-light-warning border border-warning" }, Za = { class: "card-body text-center" }, to = { class: "fs-6 fw-bold text-gray-800 mb-0" }, eo = { class: "col-md-4" }, so = { class: "card bg-light-success border border-success" }, ao = { class: "card-body text-center" }, oo = { class: "fs-6 fw-bold text-gray-800 mb-0" }, no = { key: 0, class: "card card-flush" }, ro = { class: "card-body" }, io = { class: "row g-6" }, lo = { class: "col-12" }, co = { class: "form-check form-check-custom form-check-success" }, uo = { class: "col-12 mt-4" }, fo = { class: "form-check form-check-custom form-check-success" }, po = { class: "col-12 mt-4" }, vo = { class: "form-check form-check-custom form-check-success" }, ho = { class: "row g-6 mt-8" }, mo = { class: "col-12" }, bo = { key: 1, class: "card card-flush bg-light-warning" }, go = { class: "d-flex flex-stack pt-10" }, yo = { class: "me-2" }, wo = ["disabled"], xo = ["disabled"], Co = ["disabled"], So = "https://backend.cloudfuelstationmis.com/api/records/v1", _o = {
  __name: "CashDrawerAndVariance", setup(ko) {
    const Tt = () => { var s; try { const e = localStorage.getItem("kigrama_user_data"), a = e ? JSON.parse(e) : null; return (s = a == null ? void 0 : a.user) != null && s.id ? a : (console.error("❌ Invalid auth data structure detected - missing user"), null) } catch (e) { return console.error("❌ Error parsing auth data:", e), null } }, Rt = () => { const s = localStorage.getItem("kigrama_auth_token"); return s || console.error("❌ No authentication token found"), s || "" }, nt = B(Tt()), _ = et(() => { var s; return (s = nt.value) == null ? void 0 : s.user }), N = B(!1), p = B(1), Q = B({ online: !0 }), H = B(!1), q = B(!1), j = B(""), V = B(""), v = B(null), n = B(null), k = W({ actualCash: "", cashPayouts: "0" }), w = W({ category: "", severity: "", explanation: "", factors: [], solutions: [] }), h = W({ action: "", adjustmentAmount: "", referenceNumber: "", notes: "", supervisorPassword: "", authorizedBy: "" }), A = W({ confirmAccuracy: !1, confirmResolution: !1, confirmHandover: !1, finalComments: "" }), m = W({ actualCash: "", category: "", severity: "", explanation: "", action: "", resolutionNotes: "" }), $t = ["Busy shift period", "New attendant", "System glitch", "Customer disputes", "Change shortage", "Training issues"], Nt = ["Additional training", "System upgrade", "Process review", "Supervision increase", "Equipment check", "Policy clarification"], C = et(() => { var s; try { const e = parseFloat(((s = n.value) == null ? void 0 : s.ExpectedCash) || "0"), a = parseFloat(k.actualCash || "0"), o = parseFloat(k.cashPayouts || "0"); if (isNaN(e) || isNaN(a) || isNaN(o)) return console.warn("⚠️ Invalid numbers in variance calculation"), 0; const r = a + o - e; return isNaN(r) ? 0 : r } catch (e) { return console.error("❌ Error calculating variance:", e), 0 } }), rt = et(() => { var s; try { if ((s = n.value) != null && s.readOnly && p.value > 1) return !1; switch (p.value) { case 1: return !!(n.value && H.value); case 2: return !!(k.actualCash && k.actualCash !== "" && n.value); case 3: return !!(w.category && w.severity && w.explanation && n.value); case 4: return !!(h.action && h.notes && n.value); case 5: return !!n.value; default: return !1 } } catch (e) { return console.error("❌ Error in canProceed computed:", e), !1 } }), it = et(() => { var s; try { return (s = n.value) != null && s.readOnly ? !1 : !!(A.confirmAccuracy && A.confirmResolution && A.confirmHandover && n.value) } catch (e) { return console.error("❌ Error in canComplete computed:", e), !1 } }), E = async (s, e, a = null) => { var o; try { const r = Rt(); if (!r) throw new Error("SECURITY_ERROR: No authentication token available"); if (!((o = _.value) != null && o.id)) throw new Error("SECURITY_ERROR: No authenticated user context"); const i = { method: s, headers: { "Content-Type": "application/json", Authorization: `Bearer ${r}` } }; a && (s === "POST" || s === "PATCH") && (i.body = JSON.stringify(a)); const f = new AbortController, b = setTimeout(() => f.abort(), 3e4), O = await fetch(`${So}${e}`, { ...i, signal: f.signal }); if (clearTimeout(b), !O.ok) { let I = `HTTP ${O.status}: ${O.statusText}`; try { const T = await O.json(); I = T.message || T.error || I } catch (T) { console.warn("⚠️ Could not parse error response:", T) } throw new Error(I) } return await O.json() } catch (r) { throw r.name === "AbortError" ? new Error("REQUEST_TIMEOUT: Please check your connection") : r.name === "TypeError" && r.message.includes("fetch") ? new Error("NETWORK_ERROR: Please check your connection") : r } }, F = async (s, e, a = null) => { var o, r, i; try { if (!((o = v.value) != null && o.StationID) || !((r = _.value) != null && r.id)) return console.warn("⚠️ Cannot log security event: missing station or user info"), !1; const f = { StationID: v.value.StationID, UserID: _.value.id, Action: `SECURITY_EVENT: ${s}`, TableName: "CashDrawers", RecordID: ((i = n.value) == null ? void 0 : i.DrawerID) || null, Changes: JSON.stringify({ level: s, details: e, data: a, timestamp: new Date().toISOString(), userAgent: navigator.userAgent, sessionId: `${_.value.id}-${Date.now()}` }), IPAddress: "CLIENT_IP" }; return await E("POST", "/AuditLogs", f), console.log(`🔐 Security event logged: ${s}`), !0 } catch (f) { return console.error("❌ Failed to log security event:", f), !1 } }, Z = async (s, e, a, o) => { var r, i; try { if (!((r = v.value) != null && r.StationID) || !((i = _.value) != null && i.id)) return console.warn("⚠️ Cannot log fraud detection: missing station or user info"), !1; const f = { TransactionID: null, StationID: v.value.StationID, UserID: _.value.id, RiskScore: s.toString(), Severity: e, FraudType: a, Description: o, Status: "Flagged", DetectedAt: new Date().toISOString() }; return await E("POST", "/FraudDetectionLogs", f), console.log(`🚨 Fraud detection logged: ${a} (Risk: ${s})`), !0 } catch (f) { return console.error("❌ Failed to log fraud detection:", f), !1 } }, lt = async () => {
      var s; try {
        if (q.value = !0, !((s = _.value) != null && s.id)) throw new Error("AUTHENTICATION_ERROR: No user ID available"); const e = _.value.id; console.log(`🔍 Loading FIRST station assignment for User ID: ${e}`); const o = (await E("GET", `/UserStations?UserID=${e}&Status=Active`)).records || []; if (console.log("📋 User Station Assignments:", o), o.length === 0) throw new Error(`ACCESS_DENIED: User ${e} has no active station assignments. Contact administrator to assign stations.`); const r = o[0]; console.log("🎯 Using FIRST station assignment:", r); try { const i = await E("GET", `/Stations/${r.StationID}`); let f = i; i.records && i.records.length > 0 && (f = i.records[0]), v.value = { ...f, ...r, StationID: r.StationID, UserAssignment: r } } catch (i) { console.error(`❌ Error loading station ${r.StationID}:`, i), v.value = { StationID: r.StationID, Name: `Station ${r.StationID}`, Status: "Error Loading", UserAssignment: r, LoadError: i.message } } return console.log("🏢 Assigned Station:", v.value), await F("SINGLE_STATION_ASSIGNED", "User assigned to single station (first from UserStations)", { userId: e, stationId: v.value.StationID, stationName: v.value.Name, isPrimary: r.IsPrimary, totalAssignments: o.length, assignmentDetails: r }), o.length > 1 && await S.fire({
          title: "Single Station Mode", html: `
          <div class="text-start">
            <p class="mb-3"><strong>You have ${o.length} station assignments.</strong></p>
            <p>Using: <strong>${v.value.Name || `Station ${v.value.StationID}`}</strong></p>
            <p class="text-muted mt-3">This system operates in single-station mode. Contact administrator if you need to work at a different station.</p>
          </div>
        `, icon: "info", confirmButtonText: "Continue", confirmButtonColor: "#3699ff"
        }), v.value
      } catch (e) {
        throw console.error("❌ Error loading single user station:", e), await S.fire({
          title: "Station Assignment Error", html: `
        <div class="text-start">
          <p class="mb-3"><strong>Unable to load your station assignment:</strong></p>
          <p class="text-danger">${e.message}</p>
          <p class="mt-3"><strong>Required Actions:</strong></p>
          <ul class="text-muted">
            <li>Contact your administrator to assign you to a station</li>
            <li>Verify your user permissions in the system</li>
            <li>Check that you have active station assignments</li>
          </ul>
        </div>
      `, icon: "error", confirmButtonText: "Contact Administrator", confirmButtonColor: "#f1416c", allowOutsideClick: !1, allowEscapeKey: !1
        }), e
      } finally { q.value = !1 }
    }, tt = async () => {
      var s, e; try { if (N.value = !0, j.value = "", !((s = _.value) != null && s.id)) throw new Error("SECURITY_ERROR: No authenticated user found"); if (!((e = v.value) != null && e.StationID)) throw new Error("SECURITY_ERROR: No station assigned. Please contact administrator."); const a = new Date().toISOString().split("T")[0], o = ct(), r = parseInt(_.value.id), i = parseInt(v.value.StationID); console.log(`🔍 CONSTRAINT-SAFE shift detection for User ${r} at Station ${i}`), console.log(`📅 Date: ${a}, Shift: ${o}`), await F("SHIFT_ACCESS_ATTEMPT", "User attempting to access shift management", { userId: r, stationId: i, stationName: v.value.Name, shiftType: o, date: a }); const O = ((await E("GET", `/CashDrawers?StationID=${i}&ShiftDate=${a}&ShiftType=${o}`)).records || []).filter(g => parseInt(g.StationID) === i && g.ShiftDate === a && g.ShiftType === o); if (console.log(`🔍 Found ${O.length} existing shifts for constraint (${i}, ${a}, ${o})`), O.length > 0) { const g = O[0]; if (console.log("📋 Processing existing shift:", g), g.Status === "Open") parseInt(g.AttendantID) === r ? (n.value = g, H.value = !0, V.value = "Resumed", await F("SHIFT_RESUMED", "User resuming their own active shift", { drawerId: g.DrawerID, openedAt: g.OpenedAt, stationName: v.value.Name }), await S.fire({ title: "Active Shift Resumed", text: `Resuming your ${o} shift (Drawer #${g.DrawerID}) at ${v.value.Name}`, icon: "info", toast: !0, position: "top-end", timer: 4e3, showConfirmButton: !1 })) : await Ut(g, r); else throw g.Status === "Closed" ? new Error(`DATABASE_CONSTRAINT_VIOLATION: A ${o} shift already exists for station ${i} on ${a} (Status: ${g.Status}, DrawerID: ${g.DrawerID}). The database unique constraint prevents creating another shift for this combination.`) : new Error(`DATABASE_CONSTRAINT_VIOLATION: A ${o} shift with status '${g.Status}' already exists for station ${i} on ${a} (DrawerID: ${g.DrawerID}). The database unique constraint prevents creating another shift.`) } else console.log(`✅ No constraint violations found, creating new ${o} shift`), await Bt(r, i, a, o) } catch (a) {
        console.error("❌ Error in constraint-safe shift detection:", a), j.value = a.message, a.message.includes("DATABASE_CONSTRAINT_VIOLATION") || a.message.includes("already exists") || a.message.includes("UNIQUE constraint failed") ? await S.fire({
          title: "Shift Constraint Violation", html: `
          <div class="text-start">
            <p class="mb-3"><strong>Database Constraint Error:</strong></p>
            <p class="text-danger">${a.message}</p>
            <p class="mt-3"><strong>This means:</strong></p>
            <ul class="text-muted">
              <li>Another shift already exists for this station/date/time combination</li>
              <li>The database prevents duplicate shifts for the same constraint</li>
              <li>This is a protective measure to maintain data integrity</li>
            </ul>
            <p class="mt-3"><strong>Options:</strong></p>
            <ul class="text-muted">
              <li>Wait for the existing shift to be closed</li>
              <li>Contact the current shift owner for handover</li>
              <li>Contact your supervisor or administrator</li>
            </ul>
          </div>
        `, icon: "error", confirmButtonText: "OK", confirmButtonColor: "#f1416c"
        }) : await S.fire({ title: "Shift Initialization Error", text: a.message || "Failed to initialize shift. Please contact system administrator.", icon: "error", confirmButtonColor: "#f1416c" })
      } finally { N.value = !1 }
    }, Bt = async (s, e, a, o) => {
      var r; try {
        console.log(`🔧 Creating constraint-safe shift: User ${s}, Station ${e}, ${a}, ${o}`); const i = await E("GET", `/CashDrawers?StationID=${e}&ShiftDate=${a}&ShiftType=${o}`); if (i.records && i.records.length > 0) throw new Error(`DATABASE_CONSTRAINT_VIOLATION: A ${o} shift was just created for station ${e} on ${a} by another process (race condition detected)`); const f = await Vt(e, a, o), b = { StationID: e, ShiftDate: a, ShiftType: o, AttendantID: s, OpeningBalance: f.toFixed(2), ClosingBalance: "0.00", ExpectedCash: f.toFixed(2), ActualCash: "0.00", Variance: "0.00", CashSales: "0.00", CashPayouts: "0.00", Status: "Open", OpenedBy: s, OpenedAt: new Date().toISOString(), Notes: `Automatically created ${o} shift for ${((r = _.value) == null ? void 0 : r.name) || "User"} at ${L(new Date().toISOString())}` }, g = ["StationID", "ShiftDate", "ShiftType", "AttendantID", "OpeningBalance", "ClosingBalance", "ExpectedCash", "ActualCash", "Variance", "CashSales", "CashPayouts", "OpenedBy", "OpenedAt"].filter(Y => b[Y] === null || b[Y] === void 0 || b[Y] === ""); if (g.length > 0) throw new Error(`DATABASE_VALIDATION_ERROR: Missing required fields: ${g.join(", ")}`); if (!Number.isInteger(e) || e <= 0) throw new Error(`FK_CONSTRAINT_ERROR: Invalid StationID ${e}`); if (!Number.isInteger(s) || s <= 0) throw new Error(`FK_CONSTRAINT_ERROR: Invalid AttendantID/OpenedBy ${s}`); await Pt(s, e, a, o), console.log("📝 Creating shift with data:", b); const I = await E("POST", "/CashDrawers", b); if (!I) throw new Error("DATABASE_ERROR: Failed to create shift - no response from server"); let T = null; if (I.DrawerID ? T = I.DrawerID : I.records && I.records.length > 0 ? T = I.records[0].DrawerID : I.id && (T = I.id), !T) throw console.error("❌ Unexpected response format:", I), new Error("DATABASE_ERROR: Failed to create shift - invalid response format"); n.value = { ...b, DrawerID: T }, H.value = !0, V.value = "Created", await F("CONSTRAINT_SAFE_SHIFT_CREATED", "Shift created with constraint safety checks", { drawerId: T, openingBalance: f, shiftType: o, userId: s, stationId: e, constraintKey: `${e}-${a}-${o}` }), await S.fire({
          title: "Shift Successfully Created!", html: `
        <div class="text-start">
          <p class="mb-2"><strong>New Shift Details:</strong></p>
          <ul class="list-unstyled">
            <li>• Drawer ID: #${T}</li>
            <li>• Shift Type: ${o}</li>
            <li>• Station: ${v.value.Name}</li>
            <li>• Opening Balance: UGX ${R(f)}</li>
            <li>• Opened: ${L(new Date().toISOString())}</li>
          </ul>
        </div>
      `, icon: "success", confirmButtonText: "Continue", confirmButtonColor: "#1BC5BD"
        })
      } catch (i) { throw console.error("❌ Error creating constraint-safe shift:", i), await F("SHIFT_CREATION_FAILED", "Failed to create constraint-safe shift", { error: i.message, userId: s, stationId: e, shiftType: o, date: a, constraintKey: `${e}-${a}-${o}` }), i }
    }, Ut = async (s, e) => {
      try {
        const a = await Ht(s.AttendantID), o = await S.fire({
          title: "Shift Handover Required", html: `
        <div class="text-start">
          <p class="mb-3"><strong>An active ${s.ShiftType} shift already exists:</strong></p>
          <ul class="list-unstyled">
            <li>• Drawer: #${s.DrawerID}</li>
            <li>• Current Attendant: ${a}</li>
            <li>• Opened: ${L(s.OpenedAt)}</li>
            <li>• Opening Balance: UGX ${R(s.OpeningBalance)}</li>
          </ul>
          <p class="text-warning mt-3"><strong>Options:</strong></p>
          <p class="text-muted fs-7">You can take over this shift or view it in read-only mode.</p>
        </div>
      `, icon: "question", showCancelButton: !0, showDenyButton: !0, confirmButtonText: "Take Over Shift", denyButtonText: "View Only (Read-Only)", cancelButtonText: "Cancel", confirmButtonColor: "#1BC5BD", denyButtonColor: "#3699ff", cancelButtonColor: "#f1416c"
        }); if (o.isConfirmed) await Ft(s, e); else if (o.isDenied) n.value = { ...s, readOnly: !0 }, H.value = !0, V.value = "Viewing (Read-Only)", await S.fire({ title: "Read-Only Access", text: "You have read-only access to this shift. Some functions are limited.", icon: "info", toast: !0, position: "top-end", timer: 3e3, showConfirmButton: !1 }); else throw new Error("Shift access cancelled by user. Cannot proceed without active shift.")
      } catch (a) { throw console.error("❌ Error handling shift handover:", a), a }
    }, Ft = async (s, e) => {
      try {
        await F("SHIFT_HANDOVER_INITIATED", "User attempting to take over existing shift", { drawerId: s.DrawerID, previousAttendant: s.AttendantID, newAttendant: e }); try { await E("GET", `/users/${e}`) } catch { throw new Error(`FK_CONSTRAINT_ERROR: User ID ${e} does not exist in users table`) } const a = {
          AttendantID: e, Notes: `${s.Notes || ""}

Shift handed over to User #${e} at ${L(new Date().toISOString())}`
        }, o = await E("PATCH", `/CashDrawers/${s.DrawerID}`, a); let r = o; o.records && o.records.length > 0 && (r = o.records[0]), n.value = { ...s, ...a, ...r }, H.value = !0, V.value = "Taken Over", await F("SHIFT_HANDOVER_COMPLETED", "Shift successfully handed over", { drawerId: s.DrawerID, previousAttendant: s.AttendantID, newAttendant: e }), await S.fire({ title: "Shift Handover Complete!", text: `You have successfully taken over ${s.ShiftType} shift (Drawer #${s.DrawerID})`, icon: "success", confirmButtonColor: "#1BC5BD" })
      } catch (a) { throw console.error("❌ Error performing shift handover:", a), await F("SHIFT_HANDOVER_FAILED", "Shift handover failed", { error: a.message, drawerId: s.DrawerID }), a }
    }, ct = () => { const s = new Date().getHours(); return s >= 6 && s < 14 ? "Morning" : s >= 14 && s < 22 ? "Afternoon" : "Night" }, Vt = async (s, e, a) => { try { let o = 1e5; const i = (await E("GET", `/CashDrawers?StationID=${s}&Status=Closed&limit=1&sort=-ClosedAt`)).records || []; if (i.length > 0) { const f = parseFloat(i[0].ClosingBalance || "0"); f > 0 && (o = f) } return o > 1e6 && (await Z(75, "high", "Suspicious Opening Balance", `Unusually high opening balance: UGX ${R(o)}`), o = 5e5), o } catch (o) { return console.error("❌ Error calculating opening balance:", o), 1e5 } }, Pt = async (s, e, a, o) => { try { const f = ((await E("GET", `/CashDrawers?AttendantID=${s}&limit=10&sort=-OpenedAt`)).records || []).filter(O => O.ShiftDate === a); f.length >= 2 && await Z(80, "high", "Excessive Shift Creation", `User attempting to create ${f.length + 1} shifts in one day`); const b = new Date().getHours(); (o === "Morning" && (b < 5 || b > 15) || o === "Afternoon" && (b < 13 || b > 23) || o === "Night" && b < 21 && b > 7) && await Z(60, "medium", "Off-Hours Shift Creation", `${o} shift created at unusual time: ${b}:00`) } catch (r) { console.error("❌ Error in fraud checks:", r) } }, Ht = async s => { try { const e = await E("GET", `/users/${s}`); let a = e; return e.records && e.records.length > 0 && (a = e.records[0]), (a == null ? void 0 : a.name) || (a == null ? void 0 : a.email) || `User #${s}` } catch (e) { return console.error("❌ Error getting user name:", e), `User #${s}` } }, Lt = async () => {
      if (!n.value) { await S.fire({ title: "No Active Shift", text: "There is no active shift to close", icon: "warning", confirmButtonColor: "#3699ff" }); return } if (n.value.readOnly) { await S.fire({ title: "Access Denied", text: "You cannot close a shift in read-only mode", icon: "error", confirmButtonColor: "#f1416c" }); return } if ((await S.fire({
        title: "Close Current Shift?", html: `
      <div class="text-start">
        <p><strong>Shift Details:</strong></p>
        <ul class="list-unstyled">
          <li>• Drawer: #${n.value.DrawerID}</li>
          <li>• Type: ${n.value.ShiftType}</li>
          <li>• Opened: ${L(n.value.OpenedAt)}</li>
          <li>• Duration: ${dt(n.value.OpenedAt)}</li>
        </ul>
        <p class="text-warning mt-3"><strong>Warning:</strong> This action cannot be undone.</p>
      </div>
    `, icon: "question", showCancelButton: !0, confirmButtonText: "Yes, Close Shift", cancelButtonText: "Cancel", confirmButtonColor: "#f1416c", cancelButtonColor: "#3699ff"
      })).isConfirmed) try {
        N.value = !0; const e = _.value.id; try { await E("GET", `/users/${e}`) } catch { throw new Error(`FK_CONSTRAINT_ERROR: ClosedBy User ID ${e} does not exist`) } const a = {
          Status: "Closed", ClosedBy: e, ClosedAt: new Date().toISOString(), ClosingBalance: n.value.ActualCash || n.value.ExpectedCash || n.value.OpeningBalance, Notes: `${n.value.Notes || ""}

Shift closed manually by ${_.value.name} at ${L(new Date().toISOString())}`
        }; await E("PATCH", `/CashDrawers/${n.value.DrawerID}`, a), await F("MANUAL_SHIFT_CLOSURE", "Shift manually closed by user", { drawerId: n.value.DrawerID, shiftType: n.value.ShiftType, closingBalance: a.ClosingBalance }), await S.fire({ title: "Shift Closed Successfully!", text: `Drawer #${n.value.DrawerID} has been closed`, icon: "success", toast: !0, position: "top-end", timer: 3e3, showConfirmButton: !1 }), st(), p.value = 1, await tt()
      } catch (e) { console.error("❌ Error closing shift:", e), await S.fire({ title: "Error Closing Shift!", text: e.message || "Failed to close shift", icon: "error", confirmButtonColor: "#f1416c" }) } finally { N.value = !1 }
    }, R = s => { const e = parseFloat(s || 0); return new Intl.NumberFormat("en-UG").format(e) }, L = s => new Date(s).toLocaleString("en-UG", { year: "numeric", month: "short", day: "numeric", hour: "2-digit", minute: "2-digit" }), dt = s => { const e = new Date, a = new Date(s), o = e - a, r = Math.floor(o / (1e3 * 60 * 60)), i = Math.floor(o % (1e3 * 60 * 60) / (1e3 * 60)); return `${r}h ${i}m` }, Mt = s => s === 0 ? "text-success" : s > 0 ? "text-warning" : "text-danger", Gt = s => s === 0 ? "bg-light-success border border-success" : s > 0 ? "bg-light-warning border border-warning" : "bg-light-danger border border-danger", zt = s => s === 0 ? "ki-check-circle text-success" : s > 0 ? "ki-arrow-up text-warning" : "ki-arrow-down text-danger", qt = s => s < 5e4 ? "Low" : s < 2e5 ? "Medium" : "High", jt = s => s < 5e4 ? "bg-light-info border border-info" : s < 2e5 ? "bg-light-warning border border-warning" : "bg-light-danger border border-danger", Xt = s => s < 5e4 ? "text-info" : s < 2e5 ? "text-warning" : "text-danger", Yt = s => s < 5e4 ? "Minor variance detected. Standard documentation required." : s < 2e5 ? "Moderate variance detected. Supervisor review recommended." : "Significant variance detected. Management escalation required.", M = B(null), X = B(null); let G = null, z = null; const Kt = async () => {
      if (!(!M.value || !n.value)) try {
        G && (G.destroy(), G = null); let s; try { s = (await Ot(() => import("https://cdnjs.cloudflare.com/ajax/libs/chart.js/3.9.1/chart.min.js"), [])).default } catch (b) {
          console.warn("⚠️ Could not load Chart.js from CDN:", b), M.value.innerHTML = `
        <div class="d-flex flex-column align-items-center justify-content-center h-200px">
          <i class="ki-duotone ki-chart-simple text-muted fs-3x mb-3">
            <span class="path1"></span>
            <span class="path2"></span>
            <span class="path3"></span>
          </i>
          <p class="text-muted text-center">Chart visualization unavailable</p>
        </div>
      `; return
        } const e = M.value.getContext("2d"), a = parseFloat(n.value.OpeningBalance || "0"), o = parseFloat(n.value.ExpectedCash || "0"), r = parseFloat(n.value.CashSales || "0"), i = parseFloat(n.value.CashPayouts || "0"), f = [a, r, i, o]; if (f.every(b => b === 0)) {
          M.value.innerHTML = `
        <div class="d-flex flex-column align-items-center justify-content-center h-200px">
          <i class="ki-duotone ki-information text-info fs-3x mb-3">
            <span class="path1"></span>
            <span class="path2"></span>
            <span class="path3"></span>
          </i>
          <p class="text-muted text-center">No financial data available yet</p>
        </div>
      `; return
        } G = new s(e, { type: "doughnut", data: { labels: ["Opening Balance", "Cash Sales", "Cash Payouts", "Expected Final"], datasets: [{ data: f, backgroundColor: ["#3699FF", "#1BC5BD", "#FFA800", "#8950FC"], borderWidth: 2, borderColor: "#ffffff" }] }, options: { responsive: !0, maintainAspectRatio: !1, plugins: { legend: { position: "bottom" }, title: { display: !0, text: `Shift #${n.value.DrawerID} Financial Overview` } } } })
      } catch (s) {
        console.error("❌ Error creating shift stats chart:", s), M.value && (M.value.innerHTML = `
        <div class="d-flex flex-column align-items-center justify-content-center h-200px">
          <i class="ki-duotone ki-cross-circle text-danger fs-3x mb-3">
            <span class="path1"></span>
            <span class="path2"></span>
          </i>
          <p class="text-danger text-center">Chart creation failed</p>
        </div>
      `)
      }
    }, Wt = async () => {
      var s; if (!(!X.value || !n.value)) try {
        z && (z.destroy(), z = null); let e; try { e = (await Ot(() => import("https://cdnjs.cloudflare.com/ajax/libs/chart.js/3.9.1/chart.min.js"), [])).default } catch (f) {
          console.warn("⚠️ Could not load Chart.js for variance chart:", f), X.value.innerHTML = `
        <div class="d-flex flex-column align-items-center justify-content-center h-200px">
          <i class="ki-duotone ki-chart-simple text-muted fs-3x mb-3">
            <span class="path1"></span>
            <span class="path2"></span>
            <span class="path3"></span>
          </i>
          <p class="text-muted text-center">Variance chart unavailable</p>
        </div>
      `; return
        } const a = X.value.getContext("2d"), o = parseFloat(((s = n.value) == null ? void 0 : s.ExpectedCash) || "0"), r = parseFloat(k.actualCash || "0"), i = C.value; z = new e(a, { type: "bar", data: { labels: ["Expected", "Actual", "Variance"], datasets: [{ label: "Amount (UGX)", data: [o, r, Math.abs(i)], backgroundColor: ["#3699FF", i >= 0 ? "#1BC5BD" : "#F64E60", i >= 0 ? "#FFA800" : "#F64E60"], borderWidth: 1 }] }, options: { responsive: !0, maintainAspectRatio: !1, scales: { y: { beginAtZero: !0, ticks: { callback: function (f) { return "UGX " + f.toLocaleString() } } } }, plugins: { title: { display: !0, text: "Cash Analysis Breakdown" } } } })
      } catch (e) {
        console.error("❌ Error creating variance chart:", e), X.value && (X.value.innerHTML = `
        <div class="d-flex flex-column align-items-center justify-content-center h-200px">
          <i class="ki-duotone ki-cross-circle text-danger fs-3x mb-3">
            <span class="path1"></span>
            <span class="path2"></span>
          </i>
          <p class="text-danger text-center">Variance chart failed</p>
        </div>
      `)
      }
    }, Jt = async () => { if (rt.value) { if (ut(), p.value === 2) { if (!k.actualCash) { m.actualCash = "Actual cash amount is required"; return } const s = Math.abs(C.value); if (s > 5e4) { const e = s > 2e5 ? 85 : 65, a = s > 2e5 ? "high" : "medium"; await Z(e, a, "Cash Variance", `Significant cash variance detected: UGX ${R(s)}`) } await At(), Wt() } if (p.value === 3) { if (!w.category) { m.category = "Variance category is required"; return } if (!w.severity) { m.severity = "Severity level is required"; return } if (!w.explanation) { m.explanation = "Detailed explanation is required"; return } } if (p.value === 4) { if (!h.action) { m.action = "Resolution action is required"; return } if (!h.notes) { m.resolutionNotes = "Resolution notes are required"; return } } p.value++ } }, Qt = () => { p.value > 1 && p.value-- }, ut = () => { Object.keys(m).forEach(s => { m[s] = "" }) }, Zt = async () => {
      var e; if (!it.value) { await S.fire({ title: "Incomplete Form", text: "Please complete all required confirmations before proceeding", icon: "warning", confirmButtonColor: "#3699ff" }); return } if ((await S.fire({ title: "Complete Handover?", text: "This action will close the cash drawer and cannot be undone. Are you sure?", icon: "question", showCancelButton: !0, confirmButtonText: "Yes, Complete Handover", cancelButtonText: "Cancel", confirmButtonColor: "#1BC5BD", cancelButtonColor: "#f1416c" })).isConfirmed) try {
        N.value = !0; const a = document.querySelector("[data-kt-indicator]"); a && a.setAttribute("data-kt-indicator", "on"); const o = _.value.id; try { await E("GET", `/users/${o}`) } catch { throw new Error(`FK_CONSTRAINT_ERROR: ClosedBy User ID ${o} does not exist`) } const r = {
          ClosingBalance: parseFloat(k.actualCash || 0).toFixed(2), ActualCash: parseFloat(k.actualCash || 0).toFixed(2), Variance: C.value.toFixed(2), CashPayouts: parseFloat(k.cashPayouts || 0).toFixed(2), Status: "Closed", ClosedBy: o, ClosedAt: new Date().toISOString(), Notes: `${((e = n.value) == null ? void 0 : e.Notes) || ""}

Variance Resolution:
Category: ${w.category}
Action: ${h.action}
Resolution: ${h.notes}
Final Comments: ${A.finalComments}`
        }; if (!r.ClosedBy) throw new Error("VALIDATION_ERROR: ClosedBy user ID is required"); await E("PATCH", `/CashDrawers/${n.value.DrawerID}`, r), await F("HANDOVER_COMPLETION", "Cash drawer variance resolution completed", { drawerId: n.value.DrawerID, variance: C.value, resolution: h.action, finalBalance: r.ClosingBalance }), await S.fire({ title: "Handover Complete!", text: `Cash drawer #${n.value.DrawerID} has been successfully closed with variance resolution.`, icon: "success", toast: !0, position: "top-end", timer: 3e3, showConfirmButton: !1 }), st(), p.value = 1, await tt()
      } catch (a) { console.error("❌ Error completing handover:", a), await S.fire({ title: "Error!", text: a.message || "Failed to complete handover", icon: "error", confirmButtonColor: "#f1416c" }) } finally { N.value = !1; const a = document.querySelector("[data-kt-indicator]"); a && a.setAttribute("data-kt-indicator", "off") }
    }, st = () => { n.value = null, H.value = !1, V.value = "", j.value = "", k.actualCash = "", k.cashPayouts = "0", w.category = "", w.severity = "", w.explanation = "", w.factors = [], w.solutions = [], h.action = "", h.adjustmentAmount = "", h.referenceNumber = "", h.notes = "", h.supervisorPassword = "", h.authorizedBy = "", A.confirmAccuracy = !1, A.confirmResolution = !1, A.confirmHandover = !1, A.finalComments = "", ut() }, ft = async () => { try { st(), p.value = 1, await lt(), await tt() } catch (s) { console.error("❌ Error in retry initialization:", s), j.value = s.message } }; return ee(async () => {
      console.log("🎯 Cash Drawer Variance Resolution component mounted - DATABASE COMPLIANT MODE"); try { if (!nt.value) throw new Error("SECURITY_ERROR: No authentication data found"); if (!_.value) throw new Error("SECURITY_ERROR: User information not available"); if (console.log("👤 Current User:", _.value), console.log("🏢 Loading single user station assignment..."), console.log(`📍 Current time: ${new Date().toLocaleString()}`), console.log(`🕐 Shift type: ${ct()}`), await lt(), !v.value) throw new Error("SECURITY_ERROR: No station assigned. Contact administrator to assign you to a station."); if (console.log("🏢 Assigned Station:", v.value), Q.value.online = navigator.onLine !== !1, console.log("🔍 Detecting user shift with constraint safety..."), await tt(), H.value && n.value) { await At(); try { await Kt() } catch (s) { console.warn("⚠️ Could not create shift stats chart:", s) } } console.log("✅ Component initialization completed successfully") } catch (s) {
        console.error("❌ Component initialization error:", s), j.value = s.message; let e = "Initialization Error", a = ["Refresh the page", "Check your login status", "Contact system administrator"]; s.message.includes("No authentication") ? (e = "Authentication Error", a = ["Please log in again", "Clear browser cache and cookies", "Contact IT support if problem persists"]) : s.message.includes("station") ? (e = "Station Assignment Error", a = ["Contact your manager to assign you to a station", "Verify your user permissions", "Check that you have active station assignments in the system"]) : s.message.includes("DATABASE_CONSTRAINT_VIOLATION") && (e = "Database Constraint Error", a = ["Wait for existing shifts to close", "Contact current shift attendant for handover", "Contact supervisor or administrator", "Try again in a few minutes"]), await S.fire({
          title: e, html: `
        <div class="text-start">
          <p class="mb-3"><strong>Component failed to initialize:</strong></p>
          <p class="text-danger">${s.message}</p>
          <p class="mt-3"><strong>Possible solutions:</strong></p>
          <ul class="text-muted">
            ${a.map(o => `<li>${o}</li>`).join("")}
          </ul>
        </div>
      `, icon: "error", confirmButtonText: "Retry", confirmButtonColor: "#3699ff", showCancelButton: !0, cancelButtonText: "Reload Page", cancelButtonColor: "#f1416c"
        }).then(o => { o.isConfirmed ? ft() : o.isDismissed && window.location.reload() }).catch(o => {
          console.error("❌ Error showing initialization error dialog:", o), confirm(`Initialization failed: ${s.message}

Click OK to reload the page.`) && window.location.reload()
        })
      }
    }), se(() => { console.log("🧹 Cleaning up Cash Drawer Variance Resolution component"); try { G && (G.destroy(), G = null), z && (z.destroy(), z = null) } catch (s) { console.warn("⚠️ Error during cleanup:", s) } }), (s, e) => { var a, o, r, i, f, b, O, g, I, T, Y, pt, vt, ht, mt, bt, gt, yt, wt, xt, Ct, St, _t, kt, Dt; return u(), d("div", ae, [t("div", oe, [t("div", ne, [e[24] || (e[24] = U('<div class="card-title" data-v-fd1b0cb5><h1 class="fw-bold text-gray-900 fs-2x" data-v-fd1b0cb5><i class="ki-duotone ki-wallet text-primary fs-1 me-3" data-v-fd1b0cb5><span class="path1" data-v-fd1b0cb5></span><span class="path2" data-v-fd1b0cb5></span><span class="path3" data-v-fd1b0cb5></span></i> Cash Drawer Variance Resolution </h1></div>', 1)), t("div", re, [t("div", ie, [n.value ? (u(), d("div", { key: 0, class: x(["badge fs-7 fw-bold px-3 py-2", n.value.readOnly ? "badge-light-warning" : "badge-light-primary"]) }, [t("i", { class: x(["ki-duotone fs-6 me-1", n.value.readOnly ? "ki-eye text-warning" : "ki-calendar text-primary"]) }, e[17] || (e[17] = [t("span", { class: "path1" }, null, -1), t("span", { class: "path2" }, null, -1)]), 2), $(" " + l(n.value.readOnly ? "View Only" : "Shift") + ": " + l(n.value.ShiftType) + " #" + l(n.value.DrawerID), 1)], 2)) : y("", !0), v.value ? (u(), d("div", le, [e[18] || (e[18] = t("i", { class: "ki-duotone ki-home text-info fs-6 me-1" }, [t("span", { class: "path1" }), t("span", { class: "path2" })], -1)), $(" Station: " + l(v.value.Name || `Station ${v.value.StationID}`), 1)])) : q.value ? (u(), d("div", ce, e[19] || (e[19] = [t("div", { class: "spinner-border spinner-border-sm me-2", role: "status" }, null, -1), $(" Loading Station... ")]))) : v.value ? y("", !0) : (u(), d("div", de, e[20] || (e[20] = [t("i", { class: "ki-duotone ki-cross-circle text-danger fs-6 me-1" }, [t("span", { class: "path1" }), t("span", { class: "path2" })], -1), $(" No Station Assigned ")]))), t("div", ue, [e[21] || (e[21] = t("i", { class: "ki-duotone ki-user text-success fs-6 me-1" }, [t("span", { class: "path1" }), t("span", { class: "path2" })], -1)), $(" " + l(((a = _.value) == null ? void 0 : a.name) || "User"), 1)]), t("div", { class: x(["badge fs-7 fw-bold px-3 py-2", Q.value.online ? "badge-light-success" : "badge-light-danger"]) }, [t("i", { class: x(["ki-duotone fs-6 me-1", Q.value.online ? "ki-check-circle text-success" : "ki-cross-circle text-danger"]) }, e[22] || (e[22] = [t("span", { class: "path1" }, null, -1), t("span", { class: "path2" }, null, -1)]), 2), $(" " + l(Q.value.online ? "Online" : "Offline"), 1)], 2), n.value && !n.value.readOnly ? (u(), d("button", { key: 4, onClick: Lt, class: "btn btn-sm btn-light-danger", disabled: N.value }, e[23] || (e[23] = [t("i", { class: "ki-duotone ki-cross-circle text-danger fs-6 me-1" }, [t("span", { class: "path1" }), t("span", { class: "path2" })], -1), $(" Close Shift ")]), 8, fe)) : y("", !0)])])])]), t("div", pe, [t("div", ve, [t("div", he, [t("div", me, [t("div", be, [t("div", ge, [t("div", { class: x(["stepper-item", { current: p.value === 1, completed: p.value > 1 }]) }, e[25] || (e[25] = [U('<div class="stepper-wrapper" data-v-fd1b0cb5><div class="stepper-icon" data-v-fd1b0cb5><i class="ki-duotone ki-check stepper-check fs-1" data-v-fd1b0cb5></i><span class="stepper-number" data-v-fd1b0cb5>1</span></div><div class="stepper-label" data-v-fd1b0cb5><h3 class="stepper-title" data-v-fd1b0cb5>Shift Detection</h3><div class="stepper-desc fw-semibold" data-v-fd1b0cb5>Initialize cash drawer</div></div></div><div class="stepper-line h-40px" data-v-fd1b0cb5></div>', 2)]), 2), t("div", { class: x(["stepper-item", { current: p.value === 2, completed: p.value > 2 }]) }, e[26] || (e[26] = [U('<div class="stepper-wrapper" data-v-fd1b0cb5><div class="stepper-icon" data-v-fd1b0cb5><i class="ki-duotone ki-check stepper-check fs-1" data-v-fd1b0cb5></i><span class="stepper-number" data-v-fd1b0cb5>2</span></div><div class="stepper-label" data-v-fd1b0cb5><h3 class="stepper-title" data-v-fd1b0cb5>Variance Detection</h3><div class="stepper-desc fw-semibold" data-v-fd1b0cb5>Calculate discrepancies</div></div></div><div class="stepper-line h-40px" data-v-fd1b0cb5></div>', 2)]), 2), t("div", { class: x(["stepper-item", { current: p.value === 3, completed: p.value > 3 }]) }, e[27] || (e[27] = [U('<div class="stepper-wrapper" data-v-fd1b0cb5><div class="stepper-icon" data-v-fd1b0cb5><i class="ki-duotone ki-check stepper-check fs-1" data-v-fd1b0cb5></i><span class="stepper-number" data-v-fd1b0cb5>3</span></div><div class="stepper-label" data-v-fd1b0cb5><h3 class="stepper-title" data-v-fd1b0cb5>Discrepancy Analysis</h3><div class="stepper-desc fw-semibold" data-v-fd1b0cb5>Document variances</div></div></div><div class="stepper-line h-40px" data-v-fd1b0cb5></div>', 2)]), 2), t("div", { class: x(["stepper-item", { current: p.value === 4, completed: p.value > 4 }]) }, e[28] || (e[28] = [U('<div class="stepper-wrapper" data-v-fd1b0cb5><div class="stepper-icon" data-v-fd1b0cb5><i class="ki-duotone ki-check stepper-check fs-1" data-v-fd1b0cb5></i><span class="stepper-number" data-v-fd1b0cb5>4</span></div><div class="stepper-label" data-v-fd1b0cb5><h3 class="stepper-title" data-v-fd1b0cb5>Resolution Actions</h3><div class="stepper-desc fw-semibold" data-v-fd1b0cb5>Apply corrections</div></div></div><div class="stepper-line h-40px" data-v-fd1b0cb5></div>', 2)]), 2), t("div", { class: x(["stepper-item", { current: p.value === 5, completed: p.value > 5 }]) }, e[29] || (e[29] = [U('<div class="stepper-wrapper" data-v-fd1b0cb5><div class="stepper-icon" data-v-fd1b0cb5><i class="ki-duotone ki-check stepper-check fs-1" data-v-fd1b0cb5></i><span class="stepper-number" data-v-fd1b0cb5>5</span></div><div class="stepper-label" data-v-fd1b0cb5><h3 class="stepper-title" data-v-fd1b0cb5>Handover Completion</h3><div class="stepper-desc fw-semibold" data-v-fd1b0cb5>Finalize shift transfer</div></div></div>', 1)]), 2)])])]), t("div", ye, [t("div", we, [p.value === 1 ? (u(), d("div", xe, [t("div", Ce, [e[45] || (e[45] = t("div", { class: "pb-10 pb-lg-12" }, [t("h2", { class: "fw-bold text-gray-900 fs-2x mb-4" }, "Current Shift Status"), t("p", { class: "text-muted fs-6 fw-semibold" }, " Review your active cash drawer and shift information. ")], -1)), N.value && (!H.value || q.value) ? (u(), d("div", Se, [e[30] || (e[30] = t("div", { class: "spinner-border text-primary mb-3", role: "status" }, [t("span", { class: "visually-hidden" }, "Loading...")], -1)), t("div", _e, [t("h5", ke, l(q.value ? "Loading Your Assigned Station" : "Detecting Your Current Shift"), 1), t("span", De, l(q.value ? "Retrieving station assignment from database..." : "Checking for existing shift or creating new one..."), 1)])])) : n.value ? (u(), d("div", Ae, [t("div", Ee, [t("div", Ie, [t("div", Oe, [t("div", Te, [e[31] || (e[31] = t("i", { class: "ki-duotone ki-wallet text-primary fs-2x me-3" }, [t("span", { class: "path1" }), t("span", { class: "path2" }), t("span", { class: "path3" })], -1)), t("div", null, [t("h3", Re, l(V.value) + " Cash Drawer #" + l(n.value.DrawerID), 1), t("span", $e, l(n.value.ShiftType) + " Shift", 1), V.value === "Created" ? (u(), d("span", Ne, "Auto-Created")) : V.value === "Resumed" ? (u(), d("span", Be, "Resumed")) : V.value === "Taken Over" ? (u(), d("span", Ue, "Taken Over")) : y("", !0)])])]), t("div", Fe, [t("div", Ve, [t("div", Pe, [e[32] || (e[32] = t("span", { class: "text-muted fs-7 fw-semibold d-block" }, "Shift Date", -1)), t("span", He, l(n.value.ShiftDate), 1)]), t("div", Le, [e[33] || (e[33] = t("span", { class: "text-muted fs-7 fw-semibold d-block" }, "Opened At", -1)), t("span", Me, l(L(n.value.OpenedAt)), 1)]), t("div", Ge, [e[34] || (e[34] = t("span", { class: "text-muted fs-7 fw-semibold d-block" }, "Opening Balance", -1)), t("span", ze, "UGX " + l(R(n.value.OpeningBalance)), 1)]), t("div", qe, [e[35] || (e[35] = t("span", { class: "text-muted fs-7 fw-semibold d-block" }, "Expected Cash", -1)), t("span", je, "UGX " + l(R(n.value.ExpectedCash)), 1)])]), t("div", Xe, [t("div", Ye, [e[37] || (e[37] = t("i", { class: "ki-duotone ki-time text-info fs-2x me-3" }, [t("span", { class: "path1" }), t("span", { class: "path2" })], -1)), t("div", null, [e[36] || (e[36] = t("h5", { class: "text-info mb-1" }, "Shift Duration", -1)), t("p", Ke, l(dt(n.value.OpenedAt)), 1)])])]), t("div", We, [t("div", Je, [e[39] || (e[39] = t("i", { class: "ki-duotone ki-home text-success fs-2x me-3" }, [t("span", { class: "path1" }), t("span", { class: "path2" })], -1)), t("div", null, [e[38] || (e[38] = t("h5", { class: "text-success mb-1" }, "Assigned Station", -1)), t("p", Qe, [$(l(((o = v.value) == null ? void 0 : o.Name) || `Station ${(r = v.value) == null ? void 0 : r.StationID}`) + " ", 1), ((i = v.value) == null ? void 0 : i.IsPrimary) === "1" ? (u(), d("span", Ze, "Primary")) : y("", !0)])])])]), (f = n.value) != null && f.readOnly ? (u(), d("div", ts, e[40] || (e[40] = [U('<div class="d-flex align-items-center" data-v-fd1b0cb5><i class="ki-duotone ki-eye text-warning fs-2x me-3" data-v-fd1b0cb5><span class="path1" data-v-fd1b0cb5></span><span class="path2" data-v-fd1b0cb5></span></i><div data-v-fd1b0cb5><h5 class="text-warning mb-1" data-v-fd1b0cb5>Read-Only Access</h5><p class="text-muted fs-7 mb-0" data-v-fd1b0cb5> You have view-only access to this shift. Contact the shift owner to take over. </p></div></div>', 1)]))) : y("", !0)])])]), t("div", es, [t("div", ss, [e[41] || (e[41] = t("div", { class: "card-header" }, [t("h3", { class: "card-title" }, "Shift Performance Dashboard")], -1)), t("div", as, [t("canvas", { ref_key: "shiftStatsChart", ref: M, width: "400", height: "200" }, null, 512)])])])])) : !N.value && !n.value ? (u(), d("div", os, [t("div", ns, [e[43] || (e[43] = t("i", { class: "ki-duotone ki-cross-circle fs-3x text-danger mb-4" }, [t("span", { class: "path1" }), t("span", { class: "path2" })], -1)), e[44] || (e[44] = t("h3", { class: "text-danger" }, "Shift Initialization Failed", -1)), t("p", rs, l(j.value || "Unable to initialize shift. Please contact system administrator."), 1), t("button", { onClick: ft, class: "btn btn-primary" }, e[42] || (e[42] = [t("i", { class: "ki-duotone ki-arrows-circle fs-6 me-2" }, [t("span", { class: "path1" }), t("span", { class: "path2" })], -1), $(" Retry Initialization ")]))])])) : y("", !0)])])) : y("", !0), p.value === 2 ? (u(), d("div", is, [t("div", ls, [e[61] || (e[61] = t("div", { class: "pb-10 pb-lg-12" }, [t("h2", { class: "fw-bold text-gray-900 fs-2x mb-4" }, "Variance Detection"), t("p", { class: "text-muted fs-6 fw-semibold" }, " Calculate and analyze cash discrepancies for the selected drawer. ")], -1)), t("div", cs, [t("div", ds, [t("h4", us, " Current Cash Drawer #" + l((b = n.value) == null ? void 0 : b.DrawerID), 1), t("div", fs, [t("div", ps, [e[46] || (e[46] = t("span", { class: "text-muted fs-7 fw-semibold d-block" }, "Shift Type", -1)), t("span", vs, l((O = n.value) == null ? void 0 : O.ShiftType), 1)]), t("div", hs, [e[47] || (e[47] = t("span", { class: "text-muted fs-7 fw-semibold d-block" }, "Attendant", -1)), t("span", ms, l((g = _.value) == null ? void 0 : g.name), 1)]), t("div", bs, [e[48] || (e[48] = t("span", { class: "text-muted fs-7 fw-semibold d-block" }, "Opening Balance", -1)), t("span", gs, "UGX " + l(R((I = n.value) == null ? void 0 : I.OpeningBalance)), 1)]), t("div", ys, [e[49] || (e[49] = t("span", { class: "text-muted fs-7 fw-semibold d-block" }, "Expected Cash", -1)), t("span", ws, "UGX " + l(R((T = n.value) == null ? void 0 : T.ExpectedCash)), 1)])])])]), t("div", xs, [e[60] || (e[60] = t("div", { class: "card-header" }, [t("h3", { class: "card-title" }, "Physical Cash Count")], -1)), t("div", Cs, [t("div", Ss, [t("div", _s, [e[51] || (e[51] = t("label", { class: "required form-label" }, "Actual Cash Amount (UGX)", -1)), D(t("input", { "onUpdate:modelValue": e[0] || (e[0] = c => k.actualCash = c), type: "number", step: "0.01", min: "0", class: x(["form-control form-control-lg", { "is-invalid": m.actualCash }]), disabled: (Y = n.value) == null ? void 0 : Y.readOnly, placeholder: "Enter physical cash count" }, null, 10, ks), [[P, k.actualCash]]), m.actualCash ? (u(), d("div", Ds, l(m.actualCash), 1)) : y("", !0), (pt = n.value) != null && pt.readOnly ? (u(), d("div", As, e[50] || (e[50] = [t("i", { class: "ki-duotone ki-information-5 fs-6 me-1" }, [t("span", { class: "path1" }), t("span", { class: "path2" }), t("span", { class: "path3" })], -1), $(" Read-only mode - input disabled ")]))) : y("", !0)]), t("div", Es, [e[52] || (e[52] = t("label", { class: "form-label" }, "Additional Cash Payouts", -1)), D(t("input", { "onUpdate:modelValue": e[1] || (e[1] = c => k.cashPayouts = c), type: "number", step: "0.01", min: "0", class: "form-control form-control-lg", disabled: (vt = n.value) == null ? void 0 : vt.readOnly, placeholder: "Enter any cash payouts" }, null, 8, Is), [[P, k.cashPayouts]])])]), t("div", Os, [e[58] || (e[58] = t("h4", { class: "text-info mb-4" }, "Variance Calculation", -1)), t("div", Ts, [t("div", Rs, [e[53] || (e[53] = t("span", { class: "text-muted fs-7 fw-semibold d-block" }, "Expected Cash", -1)), t("span", $s, "UGX " + l(R(((ht = n.value) == null ? void 0 : ht.ExpectedCash) || 0)), 1)]), t("div", Ns, [e[54] || (e[54] = t("span", { class: "text-muted fs-7 fw-semibold d-block" }, "Actual Cash", -1)), t("span", Bs, "UGX " + l(R(k.actualCash || 0)), 1)]), t("div", Us, [e[55] || (e[55] = t("span", { class: "text-muted fs-7 fw-semibold d-block" }, "Cash Payouts", -1)), t("span", Fs, "UGX " + l(R(k.cashPayouts || 0)), 1)]), t("div", Vs, [e[56] || (e[56] = t("span", { class: "text-muted fs-7 fw-semibold d-block" }, "Net Variance", -1)), t("span", { class: x(["fs-4 fw-bold", Mt(C.value)]) }, [$(" UGX " + l(R(Math.abs(C.value))) + " ", 1), C.value !== 0 ? (u(), d("span", Ps, " (" + l(C.value > 0 ? "Over" : "Short") + ") ", 1)) : y("", !0)], 2)])]), Math.abs(C.value) > 0 ? (u(), d("div", { key: 0, class: x(["mt-6 p-4 rounded", jt(Math.abs(C.value))]) }, [t("div", Hs, [t("i", { class: x(["ki-duotone ki-security-user fs-2x me-3", Xt(Math.abs(C.value))]) }, e[57] || (e[57] = [t("span", { class: "path1" }, null, -1), t("span", { class: "path2" }, null, -1)]), 2), t("div", null, [t("h5", Ls, l(qt(Math.abs(C.value))) + " Risk Detection ", 1), t("p", Ms, l(Yt(Math.abs(C.value))), 1)])])], 2)) : y("", !0)]), t("div", Gs, [t("div", zs, [e[59] || (e[59] = t("div", { class: "card-header" }, [t("h3", { class: "card-title" }, "Variance Analysis Chart")], -1)), t("div", qs, [t("canvas", { ref_key: "varianceChart", ref: X, width: "400", height: "200" }, null, 512)])])])])])])])) : y("", !0), p.value === 3 ? (u(), d("div", js, [t("div", Xs, [e[71] || (e[71] = t("div", { class: "pb-10 pb-lg-12" }, [t("h2", { class: "fw-bold text-gray-900 fs-2x mb-4" }, "Discrepancy Analysis"), t("p", { class: "text-muted fs-6 fw-semibold" }, " Document and categorize the identified variance. ")], -1)), t("div", { class: x(["card mb-8", Gt(C.value)]) }, [t("div", Ys, [t("div", Ks, [t("i", { class: x(["ki-duotone fs-3x me-4", zt(C.value)]) }, e[62] || (e[62] = [t("span", { class: "path1" }, null, -1), t("span", { class: "path2" }, null, -1), t("span", { class: "path3" }, null, -1)]), 2), t("div", Ws, [t("h3", Js, " Variance Detected: UGX " + l(R(Math.abs(C.value))), 1), t("p", Qs, l(C.value > 0 ? "Cash overage detected" : C.value < 0 ? "Cash shortage detected" : "No variance detected"), 1)])])])], 2), t("div", Zs, [e[70] || (e[70] = t("div", { class: "card-header" }, [t("h3", { class: "card-title" }, "Variance Documentation")], -1)), t("div", ta, [t("div", ea, [t("div", sa, [e[64] || (e[64] = t("label", { class: "required form-label" }, "Variance Category", -1)), D(t("select", { "onUpdate:modelValue": e[2] || (e[2] = c => w.category = c), class: x(["form-select form-select-lg", { "is-invalid": m.category }]), disabled: (mt = n.value) == null ? void 0 : mt.readOnly }, e[63] || (e[63] = [U('<option value="" data-v-fd1b0cb5>Select category...</option><option value="counting_error" data-v-fd1b0cb5>Counting Error</option><option value="transaction_error" data-v-fd1b0cb5>Transaction Error</option><option value="change_mistake" data-v-fd1b0cb5>Change Mistake</option><option value="fraudulent_activity" data-v-fd1b0cb5>Fraudulent Activity</option><option value="system_error" data-v-fd1b0cb5>System Error</option><option value="unaccounted_sale" data-v-fd1b0cb5>Unaccounted Sale</option><option value="other" data-v-fd1b0cb5>Other</option>', 8)]), 10, aa), [[ot, w.category]]), m.category ? (u(), d("div", oa, l(m.category), 1)) : y("", !0)]), t("div", na, [e[66] || (e[66] = t("label", { class: "required form-label" }, "Severity Level", -1)), D(t("select", { "onUpdate:modelValue": e[3] || (e[3] = c => w.severity = c), class: x(["form-select form-select-lg", { "is-invalid": m.severity }]), disabled: (bt = n.value) == null ? void 0 : bt.readOnly }, e[65] || (e[65] = [t("option", { value: "" }, "Select severity...", -1), t("option", { value: "low" }, "Low (Under UGX 50,000)", -1), t("option", { value: "medium" }, "Medium (UGX 50,000 - 200,000)", -1), t("option", { value: "high" }, "High (Over UGX 200,000)", -1)]), 10, ra), [[ot, w.severity]]), m.severity ? (u(), d("div", ia, l(m.severity), 1)) : y("", !0)])]), t("div", la, [t("div", ca, [e[67] || (e[67] = t("label", { class: "required form-label" }, "Detailed Explanation", -1)), D(t("textarea", { "onUpdate:modelValue": e[4] || (e[4] = c => w.explanation = c), class: x(["form-control form-control-lg", { "is-invalid": m.explanation }]), disabled: (gt = n.value) == null ? void 0 : gt.readOnly, rows: "4", placeholder: "Provide a detailed explanation of the variance..." }, null, 10, da), [[P, w.explanation]]), m.explanation ? (u(), d("div", ua, l(m.explanation), 1)) : y("", !0)])]), t("div", fa, [t("div", pa, [e[68] || (e[68] = t("label", { class: "form-label" }, "Contributing Factors", -1)), t("div", va, [(u(), d(Et, null, It($t, c => { var K; return t("label", { key: c, class: "form-check form-check-custom form-check-success" }, [D(t("input", { "onUpdate:modelValue": e[5] || (e[5] = at => w.factors = at), value: c, type: "checkbox", class: "form-check-input", disabled: (K = n.value) == null ? void 0 : K.readOnly }, null, 8, ha), [[J, w.factors]]), t("span", ma, l(c), 1)]) }), 64))])]), t("div", ba, [e[69] || (e[69] = t("label", { class: "form-label" }, "Potential Solutions", -1)), t("div", ga, [(u(), d(Et, null, It(Nt, c => { var K; return t("label", { key: c, class: "form-check form-check-custom form-check-primary" }, [D(t("input", { "onUpdate:modelValue": e[6] || (e[6] = at => w.solutions = at), value: c, type: "checkbox", class: "form-check-input", disabled: (K = n.value) == null ? void 0 : K.readOnly }, null, 8, ya), [[J, w.solutions]]), t("span", wa, l(c), 1)]) }), 64))])])])])])])])) : y("", !0), p.value === 4 ? (u(), d("div", xa, [t("div", Ca, [e[81] || (e[81] = t("div", { class: "pb-10 pb-lg-12" }, [t("h2", { class: "fw-bold text-gray-900 fs-2x mb-4" }, "Resolution Actions"), t("p", { class: "text-muted fs-6 fw-semibold" }, " Apply corrections and document resolution actions. ")], -1)), t("div", Sa, [e[80] || (e[80] = t("div", { class: "card-header" }, [t("h3", { class: "card-title" }, "Resolution Method")], -1)), t("div", _a, [t("div", ka, [t("div", Da, [e[73] || (e[73] = t("label", { class: "required form-label" }, "Primary Action", -1)), D(t("select", { "onUpdate:modelValue": e[7] || (e[7] = c => h.action = c), class: x(["form-select form-select-lg", { "is-invalid": m.action }]), disabled: (yt = n.value) == null ? void 0 : yt.readOnly }, e[72] || (e[72] = [U('<option value="" data-v-fd1b0cb5>Select resolution action...</option><option value="adjust_drawer" data-v-fd1b0cb5>Adjust Drawer Balance</option><option value="create_variance_entry" data-v-fd1b0cb5>Create Variance Entry</option><option value="investigate_further" data-v-fd1b0cb5>Mark for Investigation</option><option value="transfer_shortage" data-v-fd1b0cb5>Transfer Shortage to Loss</option><option value="recount_cash" data-v-fd1b0cb5>Initiate Recount</option>', 6)]), 10, Aa), [[ot, h.action]]), m.action ? (u(), d("div", Ea, l(m.action), 1)) : y("", !0)])]), t("div", Ia, [t("div", Oa, [e[74] || (e[74] = t("label", { class: "form-label" }, "Adjustment Amount (UGX)", -1)), D(t("input", { "onUpdate:modelValue": e[8] || (e[8] = c => h.adjustmentAmount = c), type: "number", step: "0.01", class: "form-control form-control-lg", disabled: (wt = n.value) == null ? void 0 : wt.readOnly, placeholder: "Enter adjustment amount" }, null, 8, Ta), [[P, h.adjustmentAmount]])]), t("div", Ra, [e[75] || (e[75] = t("label", { class: "form-label" }, "Reference Number", -1)), D(t("input", { "onUpdate:modelValue": e[9] || (e[9] = c => h.referenceNumber = c), type: "text", class: "form-control form-control-lg", disabled: (xt = n.value) == null ? void 0 : xt.readOnly, placeholder: "Enter reference number" }, null, 8, $a), [[P, h.referenceNumber]])])]), t("div", Na, [t("div", Ba, [e[76] || (e[76] = t("label", { class: "required form-label" }, "Resolution Notes", -1)), D(t("textarea", { "onUpdate:modelValue": e[10] || (e[10] = c => h.notes = c), class: x(["form-control form-control-lg", { "is-invalid": m.resolutionNotes }]), disabled: (Ct = n.value) == null ? void 0 : Ct.readOnly, rows: "4", placeholder: "Document the resolution actions taken..." }, null, 10, Ua), [[P, h.notes]]), m.resolutionNotes ? (u(), d("div", Fa, l(m.resolutionNotes), 1)) : y("", !0)])]), (St = n.value) != null && St.readOnly ? y("", !0) : (u(), d("div", Va, [e[79] || (e[79] = t("h4", { class: "text-warning mb-4" }, "Authorization Required", -1)), t("div", Pa, [t("div", Ha, [e[77] || (e[77] = t("label", { class: "form-label" }, "Supervisor Password", -1)), D(t("input", { "onUpdate:modelValue": e[11] || (e[11] = c => h.supervisorPassword = c), type: "password", class: "form-control form-control-lg", placeholder: "Enter supervisor password" }, null, 512), [[P, h.supervisorPassword]])]), t("div", La, [e[78] || (e[78] = t("label", { class: "form-label" }, "Authorized By", -1)), D(t("input", { "onUpdate:modelValue": e[12] || (e[12] = c => h.authorizedBy = c), type: "text", class: "form-control form-control-lg", placeholder: "Supervisor name" }, null, 512), [[P, h.authorizedBy]])])])]))])])])])) : y("", !0), p.value === 5 ? (u(), d("div", Ma, [t("div", Ga, [e[94] || (e[94] = t("div", { class: "pb-10 pb-lg-12" }, [t("h2", { class: "fw-bold text-gray-900 fs-2x mb-4" }, "Handover Completion"), t("p", { class: "text-muted fs-6 fw-semibold" }, " Finalize the shift handover and close the cash drawer. ")], -1)), t("div", za, [e[87] || (e[87] = t("div", { class: "card-header" }, [t("h3", { class: "card-title" }, "Resolution Summary")], -1)), t("div", qa, [t("div", ja, [t("div", Xa, [t("div", Ya, [t("div", Ka, [e[82] || (e[82] = U('<i class="ki-duotone ki-wallet text-info fs-3x mb-3" data-v-fd1b0cb5><span class="path1" data-v-fd1b0cb5></span><span class="path2" data-v-fd1b0cb5></span><span class="path3" data-v-fd1b0cb5></span></i><h4 class="text-info" data-v-fd1b0cb5>Original Variance</h4>', 2)), t("p", Wa, " UGX " + l(R(Math.abs(C.value))), 1)])])]), t("div", Ja, [t("div", Qa, [t("div", Za, [e[83] || (e[83] = t("i", { class: "ki-duotone ki-abstract-39 text-warning fs-3x mb-3" }, [t("span", { class: "path1" }), t("span", { class: "path2" })], -1)), e[84] || (e[84] = t("h4", { class: "text-warning" }, "Resolution Action", -1)), t("p", to, l(h.action || "Not selected"), 1)])])]), t("div", eo, [t("div", so, [t("div", ao, [e[85] || (e[85] = t("i", { class: "ki-duotone ki-check-circle text-success fs-3x mb-3" }, [t("span", { class: "path1" }), t("span", { class: "path2" })], -1)), e[86] || (e[86] = t("h4", { class: "text-success" }, "Final Status", -1)), t("p", oo, l((_t = n.value) != null && _t.readOnly ? "View Only" : "Ready to Close"), 1)])])])])])]), (kt = n.value) != null && kt.readOnly ? (u(), d("div", bo, e[93] || (e[93] = [U('<div class="card-body text-center" data-v-fd1b0cb5><i class="ki-duotone ki-eye text-warning fs-3x mb-3" data-v-fd1b0cb5><span class="path1" data-v-fd1b0cb5></span><span class="path2" data-v-fd1b0cb5></span></i><h4 class="text-warning" data-v-fd1b0cb5>Read-Only Access</h4><p class="text-muted mb-0" data-v-fd1b0cb5> You are viewing this shift in read-only mode. Contact the shift owner to take over and complete the handover process. </p></div>', 1)]))) : (u(), d("div", no, [e[92] || (e[92] = t("div", { class: "card-header" }, [t("h3", { class: "card-title" }, "Final Confirmation")], -1)), t("div", ro, [t("div", io, [t("div", lo, [t("div", co, [D(t("input", { "onUpdate:modelValue": e[13] || (e[13] = c => A.confirmAccuracy = c), type: "checkbox", class: "form-check-input", id: "confirmAccuracy" }, null, 512), [[J, A.confirmAccuracy]]), e[88] || (e[88] = t("label", { class: "form-check-label fw-semibold", for: "confirmAccuracy" }, " I confirm that all information provided is accurate and complete ", -1))])]), t("div", uo, [t("div", fo, [D(t("input", { "onUpdate:modelValue": e[14] || (e[14] = c => A.confirmResolution = c), type: "checkbox", class: "form-check-input", id: "confirmResolution" }, null, 512), [[J, A.confirmResolution]]), e[89] || (e[89] = t("label", { class: "form-check-label fw-semibold", for: "confirmResolution" }, " I confirm that the variance has been properly resolved according to company policy ", -1))])]), t("div", po, [t("div", vo, [D(t("input", { "onUpdate:modelValue": e[15] || (e[15] = c => A.confirmHandover = c), type: "checkbox", class: "form-check-input", id: "confirmHandover" }, null, 512), [[J, A.confirmHandover]]), e[90] || (e[90] = t("label", { class: "form-check-label fw-semibold", for: "confirmHandover" }, " I authorize the closure of this cash drawer and completion of shift handover ", -1))])])]), t("div", ho, [t("div", mo, [e[91] || (e[91] = t("label", { class: "form-label" }, "Final Comments", -1)), D(t("textarea", { "onUpdate:modelValue": e[16] || (e[16] = c => A.finalComments = c), class: "form-control form-control-lg", rows: "3", placeholder: "Any final comments or observations..." }, null, 512), [[P, A.finalComments]])])])])]))])])) : y("", !0), t("div", go, [t("div", yo, [p.value > 1 ? (u(), d("button", { key: 0, onClick: Qt, type: "button", class: "btn btn-lg btn-light-primary me-3", disabled: N.value }, e[95] || (e[95] = [t("i", { class: "ki-duotone ki-arrow-left fs-4 me-1" }, [t("span", { class: "path1" }), t("span", { class: "path2" })], -1), $(" Previous ")]), 8, wo)) : y("", !0)]), t("div", null, [p.value < 5 ? (u(), d("button", { key: 0, onClick: Jt, type: "button", class: "btn btn-lg btn-primary", disabled: !rt.value || N.value }, e[96] || (e[96] = [$(" Next "), t("i", { class: "ki-duotone ki-arrow-right fs-4 ms-1" }, [t("span", { class: "path1" }), t("span", { class: "path2" })], -1)]), 8, xo)) : (Dt = n.value) != null && Dt.readOnly ? y("", !0) : (u(), d("button", { key: 1, onClick: Zt, type: "button", class: "btn btn-lg btn-success", disabled: !it.value || N.value, "data-kt-indicator": "off" }, e[97] || (e[97] = [U('<span class="indicator-label" data-v-fd1b0cb5><i class="ki-duotone ki-check fs-4 me-1" data-v-fd1b0cb5><span class="path1" data-v-fd1b0cb5></span><span class="path2" data-v-fd1b0cb5></span></i> Complete Handover </span><span class="indicator-progress" data-v-fd1b0cb5> Please wait... <span class="spinner-border spinner-border-sm align-middle ms-2" data-v-fd1b0cb5></span></span>', 2)]), 8, Co))])])])])])])])]) }
  }
}, Ao = te(_o, [["__scopeId", "data-v-fd1b0cb5"]]); export { Ao as default };
