import { _ as Sa, r as l, c as r, q as St, o as wa, z as Ca, d, e as t, g as N, w as C, f as _, t as o, i as A, j as rt, F as z, k as U, h as f, x as X, v as Ta, S as B, n as Ia, p as u } from "./index-Fk_fMhvq.js"; import { i as O, L as wt } from "./index-Bn9PLWWT.js"; const Aa = { key: 0, class: "premium-dashboard" }, La = { class: "premium-header" }, xa = { class: "glass-card" }, Pa = { class: "d-flex align-items-center justify-content-between flex-wrap gap-4" }, $a = { class: "d-flex align-items-center" }, Ea = { class: "header-content" }, Fa = { class: "premium-title" }, Ra = { class: "user-badge" }, Ma = { class: "header-controls" }, Na = { class: "control-group" }, za = ["disabled"], Ua = ["value"], Ba = ["disabled"], Oa = { key: 0 }, Va = { class: "status-indicator" }, ja = { class: "last-update" }, Ha = { class: "premium-nav" }, Ga = { class: "nav-container" }, Qa = ["onClick"], qa = { class: "tab-icon" }, Wa = { key: 0, class: "path3" }, Ka = { key: 1, class: "path4" }, Xa = { class: "tab-content" }, Ja = { class: "tab-title" }, Ya = { class: "tab-subtitle" }, Za = { key: 0, class: "tab-badge" }, ts = { key: 0, class: "critical-alerts" }, as = { class: "alert-container" }, ss = { class: "alert-content" }, es = { class: "alert-title" }, ns = { class: "alert-description" }, os = { class: "tab-content" }, is = { class: "kpi-grid" }, ls = { class: "kpi-card kpi-primary" }, cs = { class: "kpi-content" }, rs = { class: "kpi-value" }, ds = { class: "kpi-change positive" }, us = { class: "kpi-card kpi-success" }, vs = { class: "kpi-content" }, ps = { class: "kpi-value" }, hs = { class: "kpi-change positive" }, ms = { class: "kpi-card kpi-warning" }, fs = { class: "kpi-content" }, gs = { class: "kpi-value" }, ks = { class: "kpi-card kpi-info" }, ys = { class: "kpi-content" }, _s = { class: "kpi-value" }, bs = { class: "kpi-change positive" }, Ds = { class: "charts-row" }, Ss = { class: "chart-card chart-large" }, ws = { class: "chart-header" }, Cs = { class: "chart-controls" }, Ts = { class: "chart-body" }, Is = { class: "chart-card chart-medium" }, As = { class: "chart-body" }, Ls = { class: "insights-grid" }, xs = { class: "insight-card" }, Ps = { class: "insight-body" }, $s = { key: 0, class: "no-insights" }, Es = { key: 1, class: "insights-list" }, Fs = { class: "insight-content" }, Rs = { class: "insight-item-title" }, Ms = { class: "insight-description" }, Ns = { class: "insight-metrics" }, zs = { class: "metric" }, Us = { class: "metric" }, Bs = { class: "insight-card" }, Os = { class: "insight-body" }, Vs = { class: "security-overview" }, js = { class: "security-metric" }, Hs = { class: "security-value" }, Gs = { class: "security-metric" }, Qs = { class: "security-value" }, qs = { class: "security-metric" }, Ws = { class: "security-value" }, Ks = { class: "tab-content" }, Xs = { class: "tank-grid" }, Js = { class: "tank-header" }, Ys = { class: "tank-info" }, Zs = { class: "tank-name" }, te = { class: "tank-product" }, ae = { class: "tank-gauge" }, se = { class: "tank-metrics" }, ee = { class: "tank-metric" }, ne = { class: "metric-value" }, oe = { class: "tank-metric" }, ie = { class: "metric-value" }, le = { class: "tank-metric" }, ce = { class: "metric-value" }, re = { class: "tank-metric" }, de = { class: "metric-value" }, ue = { class: "tank-actions" }, ve = ["onClick"], pe = ["onClick"], he = { class: "operations-chart" }, me = { class: "chart-card chart-full" }, fe = { class: "chart-header" }, ge = { class: "chart-controls" }, ke = { class: "control-group" }, ye = { class: "chart-body" }, _e = { class: "tab-content" }, be = { class: "financial-kpis" }, De = { class: "financial-card" }, Se = { class: "financial-body" }, we = { class: "financial-metric" }, Ce = { class: "metric-value" }, Te = { class: "financial-metric" }, Ie = { class: "metric-value" }, Ae = { class: "financial-metric" }, Le = { class: "metric-value" }, xe = { class: "financial-card" }, Pe = { class: "financial-body" }, $e = { class: "financial-metric" }, Ee = { class: "metric-value" }, Fe = { class: "financial-metric" }, Re = { class: "metric-value" }, Me = { class: "financial-metric" }, Ne = { class: "metric-value" }, ze = { class: "financial-card" }, Ue = { class: "financial-body" }, Be = { class: "financial-metric" }, Oe = { class: "metric-value" }, Ve = { class: "financial-metric" }, je = { class: "metric-value" }, He = { class: "financial-metric" }, Ge = { class: "metric-value" }, Qe = { class: "financial-charts" }, qe = { class: "chart-card chart-large" }, We = { class: "chart-body" }, Ke = { class: "chart-card chart-medium" }, Xe = { class: "chart-body" }, Je = { class: "tab-content" }, Ye = { class: "data-table-card" }, Ze = { class: "table-header" }, tn = { class: "table-controls" }, an = { class: "search-box" }, sn = { class: "table-body" }, en = { class: "premium-table-container" }, nn = { class: "premium-table" }, on = { class: "date-cell" }, ln = { class: "date-primary" }, cn = { class: "date-secondary" }, rn = { class: "product-cell" }, dn = { class: "product-info" }, un = { class: "product-details" }, vn = { class: "product-name" }, pn = { class: "product-id" }, hn = { class: "tank-cell" }, mn = { class: "tank-info" }, fn = { class: "tank-name" }, gn = { class: "tank-id" }, kn = { class: "type-cell" }, yn = { class: "quantity-cell" }, _n = { class: "change-cell" }, bn = { class: "quantity-cell" }, Dn = { class: "price-cell" }, Sn = { class: "value-cell" }, wn = { class: "auth-cell" }, Cn = { class: "auth-info" }, Tn = { class: "auth-name" }, In = { class: "table-pagination" }, An = { class: "pagination-info" }, Ln = { class: "pagination-controls" }, xn = ["disabled"], Pn = { class: "pagination-current" }, $n = ["disabled"], En = { class: "floating-menu d-lg-none" }, Fn = { key: 1, class: "auth-required" }, Rn = "https://backend.cloudfuelstationmis.com/api/records/v1", Mn = {
  __name: "StockLevelMonitor", setup(Nn) {
    const L = l(!1), g = l(null), T = l(null), b = l([]), c = l(null), x = l(null), dt = l(new Date), I = l(0), E = l(!1), V = l(!1), ut = l("today"), j = l("7d"), H = l(""), G = l(""), P = l(1), J = l(20), vt = l([]), h = l([]), pt = l([]), ht = l([]), Ct = l([]), Y = l([]), mt = l([]), p = l([]), Z = l([]), Q = l([]), Tt = l([]), It = l([]), At = l([]), tt = l(null), at = l(null), st = l(null), et = l(null), nt = l(null), ft = l([{ title: "Executive Overview", subtitle: "KPIs & AI Insights", icon: "ki-element-11", badge: null, paths: 4 }, { title: "Tank Operations", subtitle: "Live Monitoring", icon: "ki-oil-barrel", badge: null, paths: 2 }, { title: "Financial Analytics", subtitle: "Revenue & Payments", icon: "ki-chart-line-up", badge: null, paths: 2 }, { title: "Inventory Analytics", subtitle: "Movement Tracking", icon: "ki-delivery-time", badge: null, paths: 2 }]), Lt = () => { const s = localStorage.getItem("kigrama_auth_token"); return s || localStorage.getItem("jwt") || "" }, xt = () => { try { const s = localStorage.getItem("kigrama_user_data"), a = localStorage.getItem("kigrama_auth_token"); if (s && a) { const i = JSON.parse(s); return T.value = i, g.value = i.user, b.value = i.stations || [], E.value = !0, b.value.length > 0 && (c.value = b.value[0].StationID), !0 } const n = localStorage.getItem("user"); if (n) try { return g.value = JSON.parse(n), E.value = !0, !0 } catch (i) { console.error("Error parsing legacy user data:", i) } return !1 } catch (s) { return console.error("Error initializing authentication:", s), !1 } }, y = s => new Intl.NumberFormat("en-UG", { style: "currency", currency: "UGX", minimumFractionDigits: 0 }).format(parseFloat(s || 0)), D = s => new Intl.NumberFormat("en-UG").format(parseFloat(s || 0)), Pt = s => new Date(s).toLocaleDateString("en-UG"), gt = s => new Date(s).toLocaleTimeString("en-UG"), F = s => { const a = pt.value.find(n => n.ProductID === s); return (a == null ? void 0 : a.ProductName) || `Product ${s}` }, $t = s => { if (!s) return "N/A"; const a = h.value.find(n => n.TankID === s); return (a == null ? void 0 : a.TankName) || `Tank ${s}` }, Et = s => s ? `User ${s}` : "System", Ft = s => { const a = S(s); return a <= 10 ? "danger" : a <= 25 ? "warning" : "success" }, kt = s => { const a = S(s); return a <= 10 ? "Critical" : a <= 25 ? "Low Stock" : "Normal" }, S = s => { const a = parseFloat(s.Capacity || 0), n = parseFloat(s.CurrentLevel || 0); return a > 0 ? (n / a * 100).toFixed(1) : 0 }, Rt = s => { const a = parseFloat(s.Capacity || 0), n = parseFloat(s.CurrentLevel || 0); return a - n }, Mt = s => { switch (s) { case "Delivery": return "badge-success"; case "Transfer": return "badge-info"; case "Sale": return "badge-warning"; case "Adjustment": return "badge-light"; default: return "badge-light" } }, Nt = s => parseFloat(s || 0) > 0 ? "text-success fw-bold" : "text-danger fw-bold", zt = s => { const a = parseFloat(s || 0); return `${a > 0 ? "+" : ""}${D(a)}L` }, m = async (s, a = {}) => { try { const n = Lt(), i = await fetch(`${Rn}${s}`, { ...a, headers: { "Content-Type": "application/json", Authorization: `Bearer ${n}`, ...a.headers } }); if (!i.ok) throw new Error(`API Error: ${i.status} ${i.statusText}`); const e = await i.json(); return e.records || e } catch (n) { throw console.error(`API Call failed for ${s}:`, n), n } }, Ut = async () => { try { if (T.value && T.value.stations && T.value.stations.length > 0) { b.value = T.value.stations, T.value.stations.length > 0 && (c.value = T.value.stations[0].StationID); return } if (!g.value || !g.value.id) throw new Error("User not authenticated"); const s = await m(`/UserStations?UserID=${g.value.id}`), a = []; for (const n of s) try { const i = await m(`/Stations/${n.StationID}`); a.push({ ...i, ...n }) } catch (i) { console.error("Station access error:", i) } if (b.value = a, a.length > 0) { const n = a.find(i => i.IsPrimary === "1"); c.value = n ? n.StationID : a[0].StationID } } catch (s) { console.error("Error fetching user stations:", s), w("Failed to load station assignments") } }, Bt = async () => { if (!(!c.value || !g.value)) try { const [s, a, n, i, e, k, $, M, K, ya, _a, ba, Da] = await Promise.all([m(`/StationInventory?StationID=${c.value}`).catch(() => []), m(`/Tanks?StationID=${c.value}`).catch(() => []), m("/Products").catch(() => []), m(`/InventoryHistory?StationID=${c.value}&limit=100`).catch(() => []), m(`/DailyReadings?StationID=${c.value}&limit=50`).catch(() => []), m(`/FraudDetectionLogs?StationID=${c.value}&limit=50`).catch(() => []), m(`/AuditLogs?StationID=${c.value}&limit=50`).catch(() => []), m(`/Transactions?StationID=${c.value}&limit=200`).catch(() => []), m("/TransactionItems?limit=200").catch(() => []), m(`/EventLog?AffectedStationID=${c.value}&limit=100`).catch(() => []), m("/Suppliers").catch(() => []), m("/Customers").catch(() => []), m(`/Pumps?StationID=${c.value}`).catch(() => [])]); vt.value = s.filter(v => v.StationID === c.value), h.value = a.filter(v => v.StationID === c.value), pt.value = n, ht.value = i.filter(v => v.StationID === c.value), Ct.value = e.filter(v => v.StationID === c.value), Y.value = k.filter(v => v.StationID === c.value), mt.value = $.filter(v => v.StationID === c.value), p.value = M.filter(v => v.StationID === c.value), Z.value = K, Q.value = ya.filter(v => v.AffectedStationID === c.value), Tt.value = _a, It.value = ba, At.value = Da.filter(v => v.StationID === c.value), ft.value[1].badge = h.value.length } catch (s) { console.error("Error fetching station data:", s), w(`Failed to load station data: ${s.message}`) } }, Ot = () => { const s = [], a = h.value.filter(e => S(e) < 25); a.length > 0 && s.push({ id: "low_stock_ai", type: "warning", icon: "ki-warning-2", title: "AI Stock Optimization Alert", description: `${a.length} tank(s) below optimal levels. AI recommends immediate restocking to prevent stockouts.`, impact: "High", priority: "Urgent" }); const n = p.value.filter(e => { const k = new Date(e.TransactionDate), $ = new Date; return k.toDateString() === $.toDateString() }); n.length > 50 && s.push({ id: "high_volume_ai", type: "success", icon: "ki-chart-line-up", title: "AI Volume Analysis", description: `High transaction volume detected (${n.length} today). AI suggests increasing staff during peak hours.`, impact: "Medium", priority: "Monitor" }); const i = Y.value.filter(e => e.Status === "Flagged"); return i.length > 0 && s.push({ id: "fraud_ai", type: "danger", icon: "ki-shield-cross", title: "AI Fraud Detection", description: `${i.length} suspicious pattern(s) detected. AI recommends immediate investigation.`, impact: "Critical", priority: "Immediate" }), s }, ot = async () => { if (await Ia(), tt.value) { const s = O(tt.value), a = Vt(), n = { backgroundColor: "transparent", tooltip: { trigger: "axis", backgroundColor: "rgba(0, 0, 0, 0.8)", borderColor: "transparent", textStyle: { color: "#fff" } }, legend: { data: ["Revenue", "Transactions", "Volume"], textStyle: { color: "#5E6278" }, top: 20 }, grid: { left: "3%", right: "4%", bottom: "10%", top: "15%", containLabel: !0 }, xAxis: { type: "category", data: a.dates, axisLine: { lineStyle: { color: "#E1E3EA" } }, axisTick: { show: !1 }, axisLabel: { color: "#A1A5B7" } }, yAxis: [{ type: "value", name: "Revenue (UGX)", position: "left", axisLine: { show: !1 }, axisTick: { show: !1 }, axisLabel: { color: "#A1A5B7" }, splitLine: { lineStyle: { color: "#E1E3EA", type: "dashed" } } }, { type: "value", name: "Count", position: "right", axisLine: { show: !1 }, axisTick: { show: !1 }, axisLabel: { color: "#A1A5B7" }, splitLine: { show: !1 } }], series: [{ name: "Revenue", type: "line", smooth: !0, symbol: "circle", symbolSize: 8, lineStyle: { width: 3, color: "#009ef7" }, areaStyle: { color: new wt(0, 0, 0, 1, [{ offset: 0, color: "rgba(0, 158, 247, 0.3)" }, { offset: 1, color: "rgba(0, 158, 247, 0.05)" }]) }, data: a.revenue }, { name: "Transactions", type: "bar", yAxisIndex: 1, itemStyle: { color: new wt(0, 0, 0, 1, [{ offset: 0, color: "#50cd89" }, { offset: 1, color: "#06d6a0" }]) }, data: a.transactions }] }; s.setOption(n), s.resize() } if (at.value) { const s = O(at.value), a = jt(), n = { backgroundColor: "transparent", tooltip: { trigger: "item", formatter: "{a} <br/>{b}: {c} ({d}%)", backgroundColor: "rgba(0, 0, 0, 0.8)", borderColor: "transparent", textStyle: { color: "#fff" } }, legend: { orient: "vertical", left: "left", textStyle: { color: "#5E6278" } }, series: [{ name: "Tank Status", type: "pie", radius: ["40%", "70%"], center: ["60%", "50%"], avoidLabelOverlap: !1, itemStyle: { borderRadius: 8, borderColor: "#fff", borderWidth: 2 }, label: { show: !1, position: "center" }, emphasis: { label: { show: !0, fontSize: "16", fontWeight: "bold" } }, labelLine: { show: !1 }, data: a, color: ["#50cd89", "#ffc700", "#f1416c"] }] }; s.setOption(n), s.resize() } if (et.value) { const s = O(et.value), a = Ht(), n = { backgroundColor: "transparent", tooltip: { trigger: "item", formatter: "{a} <br/>{b}: {c} ({d}%)", backgroundColor: "rgba(0, 0, 0, 0.8)", borderColor: "transparent", textStyle: { color: "#fff" } }, legend: { orient: "vertical", left: "left", textStyle: { color: "#5E6278" } }, series: [{ name: "Revenue", type: "pie", radius: ["40%", "70%"], center: ["60%", "50%"], avoidLabelOverlap: !1, itemStyle: { borderRadius: 8, borderColor: "#fff", borderWidth: 2 }, label: { show: !1, position: "center" }, emphasis: { label: { show: !0, fontSize: "16", fontWeight: "bold" } }, labelLine: { show: !1 }, data: a, color: ["#009ef7", "#50cd89", "#ffc700", "#f1416c", "#7239ea", "#00a3ff"] }] }; s.setOption(n), s.resize() } if (nt.value) { const s = O(nt.value), a = Gt(), n = { backgroundColor: "transparent", tooltip: { trigger: "item", formatter: "{a} <br/>{b}: {c} ({d}%)", backgroundColor: "rgba(0, 0, 0, 0.8)", borderColor: "transparent", textStyle: { color: "#fff" } }, series: [{ name: "Payment Method", type: "pie", radius: "70%", center: ["50%", "50%"], data: a, emphasis: { itemStyle: { shadowBlur: 10, shadowOffsetX: 0, shadowColor: "rgba(0, 0, 0, 0.5)" } }, color: ["#009ef7", "#50cd89", "#ffc700", "#f1416c"] }] }; s.setOption(n), s.resize() } if (st.value) { const s = O(st.value), a = Qt(), n = { backgroundColor: "transparent", tooltip: { trigger: "axis", backgroundColor: "rgba(0, 0, 0, 0.8)", borderColor: "transparent", textStyle: { color: "#fff" } }, legend: { data: h.value.map(i => i.TankName), textStyle: { color: "#5E6278" }, top: 20 }, grid: { left: "3%", right: "4%", bottom: "10%", top: "15%", containLabel: !0 }, xAxis: { type: "category", data: a.dates, axisLine: { lineStyle: { color: "#E1E3EA" } }, axisTick: { show: !1 }, axisLabel: { color: "#A1A5B7" } }, yAxis: { type: "value", name: "Level (L)", axisLine: { show: !1 }, axisTick: { show: !1 }, axisLabel: { color: "#A1A5B7" }, splitLine: { lineStyle: { color: "#E1E3EA", type: "dashed" } } }, series: h.value.map((i, e) => ({ name: i.TankName, type: "line", smooth: !0, symbol: "circle", symbolSize: 6, lineStyle: { width: 2, color: ["#009ef7", "#50cd89", "#ffc700", "#f1416c", "#7239ea"][e % 5] }, data: a.tankData[i.TankID] || [] })) }; s.setOption(n), s.resize() } }, Vt = () => { const s = [], a = [], n = []; for (let i = 6; i >= 0; i--) { const e = new Date; e.setDate(e.getDate() - i), s.push(e.toLocaleDateString()); const k = p.value.filter(M => new Date(M.TransactionDate).toDateString() === e.toDateString()), $ = k.reduce((M, K) => M + parseFloat(K.TotalAmount || 0), 0); a.push($), n.push(k.length) } return { dates: s, revenue: a, transactions: n } }, jt = () => { const s = { Normal: 0, Low: 0, Critical: 0 }; return h.value.forEach(a => { const n = S(a); n <= 10 ? s.Critical++ : n <= 25 ? s.Low++ : s.Normal++ }), [{ value: s.Normal, name: "Normal" }, { value: s.Low, name: "Low Stock" }, { value: s.Critical, name: "Critical" }] }, Ht = () => { const s = {}; return Z.value.forEach(a => { const n = p.value.find(i => i.TransactionID === a.TransactionID); if (n && n.StationID === c.value) { const i = F(a.ProductID), e = parseFloat(a.TotalPrice || 0); s[i] = (s[i] || 0) + e } }), Object.entries(s).map(([a, n]) => ({ name: a, value: n })) }, Gt = () => { const s = {}; return p.value.forEach(a => { const n = a.PaymentMethod || "Cash", i = parseFloat(a.TotalAmount || 0); s[n] = (s[n] || 0) + i }), Object.entries(s).map(([a, n]) => ({ name: a, value: n })) }, Qt = () => { const s = [], a = {}; for (let n = 13; n >= 0; n--) { const i = new Date; i.setDate(i.getDate() - n), s.push(i.toLocaleDateString()) } return h.value.forEach(n => { a[n.TankID] = s.map(() => { const i = parseFloat(n.CurrentLevel || 0), e = (Math.random() - .5) * 1e3; return Math.max(0, i + e) }) }), { dates: s, tankData: a } }, qt = () => { V.value = !V.value }, w = s => { B.fire({ title: "Error!", text: s, icon: "error", confirmButtonColor: "#f1416c", background: "#fff", customClass: { popup: "swal-premium" } }) }, it = s => { B.fire({ title: "Success!", text: s, icon: "success", toast: !0, position: "top-end", timer: 3e3, showConfirmButton: !1, background: "#fff", customClass: { popup: "swal-premium-toast" } }) }, Wt = () => {
      const s = R.value.map(a => `
      <div class="premium-alert premium-alert-danger mb-3">
        <h6 class="premium-alert-title">${a.Title}</h6>
        <p class="premium-alert-text">${a.Description}</p>
      </div>
    `).join(""); B.fire({ title: "Critical Alerts", html: s, confirmButtonColor: "#f1416c", background: "#fff", customClass: { popup: "swal-premium" } })
    }, Kt = () => {
      B.fire({
        title: "Quick Actions", html: `
      <div class="premium-actions">
        <button class="premium-action-btn premium-action-primary" onclick="Swal.close()">
          <i class="ki-duotone ki-plus me-2"><span class="path1"></span><span class="path2"></span></i>
          Record Tank Reading
        </button>
        <button class="premium-action-btn premium-action-success" onclick="Swal.close()">
          <i class="ki-duotone ki-scanner me-2"><span class="path1"></span><span class="path2"></span></i>
          Add Inventory
        </button>
        <button class="premium-action-btn premium-action-warning" onclick="Swal.close()">
          <i class="ki-duotone ki-document me-2"><span class="path1"></span><span class="path2"></span></i>
          Generate Report
        </button>
      </div>
    `, showConfirmButton: !1, background: "#fff", customClass: { popup: "swal-premium" }
      })
    }, Xt = s => { it(`Add stock functionality for Tank ${s} ready for implementation`) }, Jt = s => {
      const a = h.value.find(n => n.TankID === s); a && B.fire({
        title: `${a.TankName} Details`, html: `
        <div class="tank-details">
          <p><strong>Product:</strong> ${F(a.ProductID)}</p>
          <p><strong>Capacity:</strong> ${D(a.Capacity)}L</p>
          <p><strong>Current Level:</strong> ${D(a.CurrentLevel)}L</p>
          <p><strong>Utilization:</strong> ${S(a)}%</p>
          <p><strong>Status:</strong> ${kt(a)}</p>
        </div>
      `, confirmButtonColor: "#009ef7", background: "#fff"
      })
    }, lt = s => { j.value = s, setTimeout(() => { ot() }, 100) }, Yt = () => { it("Export functionality ready for production deployment") }, q = async () => { if (!E.value || !g.value) { w("Authentication required to load dashboard data"); return } if (!c.value) { w("No station selected. Please select a station."); return } L.value = !0, dt.value = new Date; try { await Bt(), setTimeout(() => { ot() }, 100), it("Dashboard updated successfully") } catch (s) { console.error("Error loading dashboard data:", s), w(`Failed to load dashboard data: ${s.message}`) } finally { L.value = !1 } }, yt = async () => { if (!E.value || !g.value) { w("Please log in to refresh data"); return } await q() }, Zt = () => { x.value && clearInterval(x.value), x.value = setInterval(() => { q() }, 6e4) }, ta = () => { x.value && (clearInterval(x.value), x.value = null) }, aa = r(() => b.value.find(s => s.StationID === c.value)), sa = r(() => vt.value.length), ea = r(() => b.value.filter(s => s.Status === "Active").length), _t = r(() => { const s = new Date().toDateString(); return p.value.filter(a => new Date(a.TransactionDate).toDateString() === s).reduce((a, n) => a + parseFloat(n.TotalAmount || 0), 0) }), bt = r(() => { const s = new Date().toDateString(); return p.value.filter(a => new Date(a.TransactionDate).toDateString() === s).length }), ct = r(() => h.value.filter(s => S(s) < 25).length), na = r(() => h.value.filter(s => s.Status === "Active").length), oa = r(() => { if (h.value.length === 0) return 0; const s = h.value.reduce((a, n) => a + parseFloat(S(n)), 0); return Math.round(s / h.value.length) }), ia = r(() => Y.value.filter(s => s.Status === "Flagged").length), la = r(() => { const s = new Date; return s.setHours(s.getHours() - 24), mt.value.filter(a => new Date(a.CreatedAt) >= s).length }), ca = r(() => { const s = Q.value.length, a = Q.value.filter(n => n.RiskLevel === "CRITICAL").length; return s > 0 ? Math.max(0, 100 - a * 20) : 100 }), ra = r(() => _t.value), da = r(() => { const s = new Date; return s.setDate(s.getDate() - 7), p.value.filter(a => new Date(a.TransactionDate) >= s).reduce((a, n) => a + parseFloat(n.TotalAmount || 0), 0) }), ua = r(() => { const s = new Date; return s.setMonth(s.getMonth() - 1), p.value.filter(a => new Date(a.TransactionDate) >= s).reduce((a, n) => a + parseFloat(n.TotalAmount || 0), 0) }), va = r(() => { const s = p.value.reduce((a, n) => a + parseFloat(n.TotalAmount || 0), 0); return p.value.length > 0 ? s / p.value.length : 0 }), pa = r(() => Z.value.filter(s => { const a = p.value.find(n => n.TransactionID === s.TransactionID); return a && a.StationID === c.value }).length), ha = r(() => p.value.filter(s => s.PaymentMethod === "Cash").reduce((s, a) => s + parseFloat(a.TotalAmount || 0), 0)), ma = r(() => p.value.filter(s => s.PaymentMethod === "Card").reduce((s, a) => s + parseFloat(a.TotalAmount || 0), 0)), fa = r(() => p.value.filter(s => s.PaymentMethod === "Credit").reduce((s, a) => s + parseFloat(a.TotalAmount || 0), 0)), R = r(() => Q.value.filter(s => s.RiskLevel === "CRITICAL" && s.Status === "OPEN").slice(0, 5)), Dt = r(() => Ot()), W = r(() => { let s = ht.value; if (H.value) { const a = H.value.toLowerCase(); s = s.filter(n => F(n.ProductID).toLowerCase().includes(a) || n.ChangeType.toLowerCase().includes(a)) } return G.value && (s = s.filter(a => a.ChangeType === G.value)), s.sort((a, n) => new Date(n.ChangeDate) - new Date(a.ChangeDate)) }), ga = r(() => { const s = (P.value - 1) * J.value, a = s + J.value; return W.value.slice(s, a) }), ka = r(() => Math.ceil(W.value.length / J.value)); return St(c, s => { s && q() }), St(I, () => { setTimeout(() => { ot() }, 100) }), wa(async () => { if (console.log("🚀 Kigrama Stock Intelligence Dashboard Initializing..."), !xt() || !g.value) { console.error("❌ User not authenticated"), setTimeout(() => { typeof window < "u" && window.location && (window.location.href = "/login.html") }, 2e3); return } console.log("✅ Authentication successful"); try { await Ut(), c.value ? (await q(), Zt(), console.log("✅ Kigrama Dashboard loaded successfully")) : w("No stations assigned to your account. Please contact administrator.") } catch (a) { console.error("❌ Dashboard initialization failed:", a), w("Failed to initialize dashboard. Please try refreshing the page.") } }), Ca(() => { ta() }), (s, a) => { var n, i; return E.value && g.value ? (u(), d("div", Aa, [t("div", La, [t("div", xa, [t("div", Pa, [t("div", $a, [a[11] || (a[11] = _('<div class="premium-logo" data-v-2cec7552><div class="logo-glow" data-v-2cec7552><i class="ki-duotone ki-oil-barrel fs-2tx text-white" data-v-2cec7552><span class="path1" data-v-2cec7552></span><span class="path2" data-v-2cec7552></span></i></div></div>', 1)), t("div", Ea, [t("h1", Fa, o(((n = aa.value) == null ? void 0 : n.StationName) || "Kigrama Intelligence"), 1), a[10] || (a[10] = t("p", { class: "premium-subtitle" }, "Real-time Operations & Analytics Dashboard", -1)), t("div", Ra, [a[9] || (a[9] = t("i", { class: "ki-duotone ki-user fs-6 me-1" }, [t("span", { class: "path1" }), t("span", { class: "path2" })], -1)), A(" " + o(g.value.name || g.value.email), 1)])])]), t("div", Ma, [t("div", Na, [C(t("select", { "onUpdate:modelValue": a[0] || (a[0] = e => c.value = e), class: "premium-select", disabled: L.value }, [a[12] || (a[12] = t("option", { value: "" }, "Select Station", -1)), (u(!0), d(z, null, U(b.value, e => (u(), d("option", { key: e.StationID, value: e.StationID }, o(e.StationName), 9, Ua))), 128))], 8, za), [[rt, c.value]]), t("button", { onClick: yt, class: "premium-btn premium-btn-primary", disabled: L.value }, [t("i", { class: f(["ki-duotone ki-arrows-circle", { "spinner-border spinner-border-sm": L.value }]) }, a[13] || (a[13] = [t("span", { class: "path1" }, null, -1), t("span", { class: "path2" }, null, -1)]), 2), L.value ? N("", !0) : (u(), d("span", Oa, "Refresh"))], 8, Ba)]), t("div", Va, [a[14] || (a[14] = t("div", { class: "status-dot status-online" }, null, -1)), a[15] || (a[15] = t("span", { class: "status-text" }, "Live", -1)), t("div", ja, o(gt(dt.value)), 1)])])])])]), t("div", Ha, [t("div", Ga, [(u(!0), d(z, null, U(ft.value, (e, k) => (u(), d("div", { key: k, onClick: $ => I.value = k, class: f(["nav-tab", { "nav-tab-active": I.value === k }]) }, [t("div", qa, [t("i", { class: f(`ki-duotone ${e.icon}`) }, [a[16] || (a[16] = t("span", { class: "path1" }, null, -1)), a[17] || (a[17] = t("span", { class: "path2" }, null, -1)), e.paths > 2 ? (u(), d("span", Wa)) : N("", !0), e.paths > 3 ? (u(), d("span", Ka)) : N("", !0)], 2)]), t("div", Xa, [t("div", Ja, o(e.title), 1), t("div", Ya, o(e.subtitle), 1)]), e.badge !== null ? (u(), d("div", Za, o(e.badge), 1)) : N("", !0)], 10, Qa))), 128))])]), R.value.length > 0 ? (u(), d("div", ts, [t("div", as, [a[19] || (a[19] = _('<div class="alert-icon" data-v-2cec7552><i class="ki-duotone ki-information-5 fs-2x" data-v-2cec7552><span class="path1" data-v-2cec7552></span><span class="path2" data-v-2cec7552></span><span class="path3" data-v-2cec7552></span></i></div>', 1)), t("div", ss, [t("h4", es, o(R.value.length) + " Critical Alert" + o(R.value.length > 1 ? "s" : ""), 1), t("p", ns, o((i = R.value[0]) == null ? void 0 : i.Description), 1)]), t("button", { class: "alert-action", onClick: Wt }, a[18] || (a[18] = [A(" View All Alerts "), t("i", { class: "ki-duotone ki-arrow-right ms-2" }, [t("span", { class: "path1" }), t("span", { class: "path2" })], -1)]))])])) : N("", !0), C(t("div", os, [t("div", is, [t("div", ls, [a[21] || (a[21] = _('<div class="kpi-background" data-v-2cec7552><i class="ki-duotone ki-element-11" data-v-2cec7552><span class="path1" data-v-2cec7552></span><span class="path2" data-v-2cec7552></span><span class="path3" data-v-2cec7552></span><span class="path4" data-v-2cec7552></span></i></div>', 1)), t("div", cs, [t("div", rs, o(sa.value), 1), a[20] || (a[20] = t("div", { class: "kpi-label" }, "Active Inventory Items", -1)), t("div", ds, o(ea.value) + " stations active", 1)])]), t("div", us, [a[23] || (a[23] = t("div", { class: "kpi-background" }, [t("i", { class: "ki-duotone ki-dollar" }, [t("span", { class: "path1" }), t("span", { class: "path2" })])], -1)), t("div", vs, [t("div", ps, o(y(_t.value)), 1), a[22] || (a[22] = t("div", { class: "kpi-label" }, "Today's Revenue", -1)), t("div", hs, o(bt.value) + " transactions", 1)])]), t("div", ms, [a[25] || (a[25] = _('<div class="kpi-background" data-v-2cec7552><i class="ki-duotone ki-warning-2" data-v-2cec7552><span class="path1" data-v-2cec7552></span><span class="path2" data-v-2cec7552></span><span class="path3" data-v-2cec7552></span></i></div>', 1)), t("div", fs, [t("div", gs, o(ct.value), 1), a[24] || (a[24] = t("div", { class: "kpi-label" }, "Low Stock Alerts", -1)), t("div", { class: f(["kpi-change", ct.value > 0 ? "negative" : "neutral"]) }, o(ct.value > 0 ? "Requires attention" : "All optimal"), 3)])]), t("div", ks, [a[27] || (a[27] = t("div", { class: "kpi-background" }, [t("i", { class: "ki-duotone ki-chart-line-up" }, [t("span", { class: "path1" }), t("span", { class: "path2" })])], -1)), t("div", ys, [t("div", _s, o(oa.value) + "%", 1), a[26] || (a[26] = t("div", { class: "kpi-label" }, "Tank Utilization", -1)), t("div", bs, o(na.value) + " tanks monitored", 1)])])]), t("div", Ds, [t("div", Ss, [t("div", ws, [a[29] || (a[29] = t("h3", { class: "chart-title" }, "Station Performance Overview", -1)), t("div", Cs, [C(t("select", { "onUpdate:modelValue": a[1] || (a[1] = e => ut.value = e), class: "chart-select" }, a[28] || (a[28] = [t("option", { value: "today" }, "Today", -1), t("option", { value: "week" }, "This Week", -1), t("option", { value: "month" }, "This Month", -1)]), 512), [[rt, ut.value]])])]), t("div", Ts, [t("div", { ref_key: "performanceChart", ref: tt, class: "premium-chart" }, null, 512)])]), t("div", Is, [a[30] || (a[30] = t("div", { class: "chart-header" }, [t("h3", { class: "chart-title" }, "Tank Status Distribution")], -1)), t("div", As, [t("div", { ref_key: "tankStatusChart", ref: at, class: "premium-chart" }, null, 512)])])]), t("div", Ls, [t("div", xs, [a[33] || (a[33] = _('<div class="insight-header" data-v-2cec7552><h4 class="insight-title" data-v-2cec7552><i class="ki-duotone ki-chart-simple-3 text-success me-2" data-v-2cec7552><span class="path1" data-v-2cec7552></span><span class="path2" data-v-2cec7552></span><span class="path3" data-v-2cec7552></span><span class="path4" data-v-2cec7552></span></i> AI Operational Insights </h4></div>', 1)), t("div", Ps, [Dt.value.length === 0 ? (u(), d("div", $s, a[31] || (a[31] = [t("i", { class: "ki-duotone ki-medal-star fs-3x text-success" }, [t("span", { class: "path1" }), t("span", { class: "path2" }), t("span", { class: "path3" })], -1), t("p", null, "All systems operating optimally!", -1)]))) : (u(), d("div", Es, [(u(!0), d(z, null, U(Dt.value, e => (u(), d("div", { key: e.id, class: "insight-item" }, [t("div", { class: f(["insight-icon", `insight-${e.type}`]) }, [t("i", { class: f(`ki-duotone ${e.icon}`) }, a[32] || (a[32] = [t("span", { class: "path1" }, null, -1), t("span", { class: "path2" }, null, -1)]), 2)], 2), t("div", Fs, [t("h6", Rs, o(e.title), 1), t("p", Ms, o(e.description), 1), t("div", Ns, [t("span", zs, "Impact: " + o(e.impact), 1), t("span", Us, "Priority: " + o(e.priority), 1)])])]))), 128))]))])]), t("div", Bs, [a[37] || (a[37] = _('<div class="insight-header" data-v-2cec7552><h4 class="insight-title" data-v-2cec7552><i class="ki-duotone ki-shield-tick text-info me-2" data-v-2cec7552><span class="path1" data-v-2cec7552></span><span class="path2" data-v-2cec7552></span></i> Security &amp; Compliance Status </h4></div>', 1)), t("div", Os, [t("div", Vs, [t("div", js, [t("div", Hs, o(ia.value), 1), a[34] || (a[34] = t("div", { class: "security-label" }, "Fraud Alerts", -1))]), t("div", Gs, [t("div", Qs, o(la.value), 1), a[35] || (a[35] = t("div", { class: "security-label" }, "Audit Events", -1))]), t("div", qs, [t("div", Ws, o(ca.value) + "%", 1), a[36] || (a[36] = t("div", { class: "security-label" }, "Compliance Score", -1))])])])])])], 512), [[X, I.value === 0]]), C(t("div", Ks, [t("div", Xs, [(u(!0), d(z, null, U(h.value, e => (u(), d("div", { key: e.TankID, class: "tank-card" }, [t("div", Js, [t("div", Ys, [t("h4", Zs, o(e.TankName), 1), t("p", te, o(F(e.ProductID)), 1)]), t("div", { class: f(["tank-status", `status-${Ft(e)}`]) }, o(kt(e)), 3)]), t("div", ae, [t("div", { ref_for: !0, ref: `tankGauge${e.TankID}`, class: "gauge-container" }, null, 512)]), t("div", se, [t("div", ee, [a[38] || (a[38] = t("span", { class: "metric-label" }, "Current Level", -1)), t("span", ne, o(D(e.CurrentLevel)) + "L", 1)]), t("div", oe, [a[39] || (a[39] = t("span", { class: "metric-label" }, "Capacity", -1)), t("span", ie, o(D(e.Capacity)) + "L", 1)]), t("div", le, [a[40] || (a[40] = t("span", { class: "metric-label" }, "Utilization", -1)), t("span", ce, o(S(e)) + "%", 1)]), t("div", re, [a[41] || (a[41] = t("span", { class: "metric-label" }, "Available Space", -1)), t("span", de, o(D(Rt(e))) + "L", 1)])]), t("div", ue, [t("button", { class: "tank-btn tank-btn-primary", onClick: k => Xt(e.TankID) }, a[42] || (a[42] = [t("i", { class: "ki-duotone ki-plus" }, [t("span", { class: "path1" }), t("span", { class: "path2" })], -1), A(" Add Stock ")]), 8, ve), t("button", { class: "tank-btn tank-btn-secondary", onClick: k => Jt(e.TankID) }, a[43] || (a[43] = [t("i", { class: "ki-duotone ki-eye" }, [t("span", { class: "path1" }), t("span", { class: "path2" }), t("span", { class: "path3" })], -1), A(" Details ")]), 8, pe)])]))), 128))]), t("div", he, [t("div", me, [t("div", fe, [a[44] || (a[44] = t("h3", { class: "chart-title" }, "Tank Level Trends & AI Predictions", -1)), t("div", ge, [t("div", ke, [t("button", { class: f(["chart-btn", { active: j.value === "24h" }]), onClick: a[2] || (a[2] = e => lt("24h")) }, " 24H ", 2), t("button", { class: f(["chart-btn", { active: j.value === "7d" }]), onClick: a[3] || (a[3] = e => lt("7d")) }, " 7D ", 2), t("button", { class: f(["chart-btn", { active: j.value === "30d" }]), onClick: a[4] || (a[4] = e => lt("30d")) }, " 30D ", 2)])])]), t("div", ye, [t("div", { ref_key: "tankTrendsChart", ref: st, class: "premium-chart-large" }, null, 512)])])])], 512), [[X, I.value === 1]]), C(t("div", _e, [t("div", be, [t("div", De, [a[48] || (a[48] = t("div", { class: "financial-header" }, [t("h4", null, "Revenue Analytics"), t("i", { class: "ki-duotone ki-chart-line-up text-success" }, [t("span", { class: "path1" }), t("span", { class: "path2" })])], -1)), t("div", Se, [t("div", we, [t("span", Ce, o(y(ra.value)), 1), a[45] || (a[45] = t("span", { class: "metric-label" }, "Today's Revenue", -1))]), t("div", Te, [t("span", Ie, o(y(da.value)), 1), a[46] || (a[46] = t("span", { class: "metric-label" }, "This Week", -1))]), t("div", Ae, [t("span", Le, o(y(ua.value)), 1), a[47] || (a[47] = t("span", { class: "metric-label" }, "This Month", -1))])])]), t("div", xe, [a[52] || (a[52] = t("div", { class: "financial-header" }, [t("h4", null, "Transaction Metrics"), t("i", { class: "ki-duotone ki-credit-cart text-primary" }, [t("span", { class: "path1" }), t("span", { class: "path2" })])], -1)), t("div", Pe, [t("div", $e, [t("span", Ee, o(bt.value), 1), a[49] || (a[49] = t("span", { class: "metric-label" }, "Today's Transactions", -1))]), t("div", Fe, [t("span", Re, o(y(va.value)), 1), a[50] || (a[50] = t("span", { class: "metric-label" }, "Average Value", -1))]), t("div", Me, [t("span", Ne, o(pa.value), 1), a[51] || (a[51] = t("span", { class: "metric-label" }, "Items Sold", -1))])])]), t("div", ze, [a[56] || (a[56] = _('<div class="financial-header" data-v-2cec7552><h4 data-v-2cec7552>Payment Analysis</h4><i class="ki-duotone ki-wallet text-warning" data-v-2cec7552><span class="path1" data-v-2cec7552></span><span class="path2" data-v-2cec7552></span><span class="path3" data-v-2cec7552></span><span class="path4" data-v-2cec7552></span></i></div>', 1)), t("div", Ue, [t("div", Be, [t("span", Oe, o(y(ha.value)), 1), a[53] || (a[53] = t("span", { class: "metric-label" }, "Cash Payments", -1))]), t("div", Ve, [t("span", je, o(y(ma.value)), 1), a[54] || (a[54] = t("span", { class: "metric-label" }, "Card Payments", -1))]), t("div", He, [t("span", Ge, o(y(fa.value)), 1), a[55] || (a[55] = t("span", { class: "metric-label" }, "Credit Sales", -1))])])])]), t("div", Qe, [t("div", qe, [a[57] || (a[57] = t("div", { class: "chart-header" }, [t("h3", { class: "chart-title" }, "Revenue by Product Category")], -1)), t("div", We, [t("div", { ref_key: "revenueBreakdownChart", ref: et, class: "premium-chart" }, null, 512)])]), t("div", Ke, [a[58] || (a[58] = t("div", { class: "chart-header" }, [t("h3", { class: "chart-title" }, "Payment Method Distribution")], -1)), t("div", Xe, [t("div", { ref_key: "paymentMethodChart", ref: nt, class: "premium-chart" }, null, 512)])])])], 512), [[X, I.value === 2]]), C(t("div", Je, [t("div", Ye, [t("div", Ze, [a[62] || (a[62] = t("h3", { class: "table-title" }, [t("i", { class: "ki-duotone ki-delivery-time text-primary me-2" }, [t("span", { class: "path1" }), t("span", { class: "path2" })]), A(" Real-time Inventory Movement Analysis ")], -1)), t("div", tn, [t("div", an, [a[59] || (a[59] = t("i", { class: "ki-duotone ki-magnifier" }, [t("span", { class: "path1" }), t("span", { class: "path2" })], -1)), C(t("input", { type: "text", "onUpdate:modelValue": a[5] || (a[5] = e => H.value = e), placeholder: "Search movements..." }, null, 512), [[Ta, H.value]])]), C(t("select", { "onUpdate:modelValue": a[6] || (a[6] = e => G.value = e), class: "filter-select" }, a[60] || (a[60] = [_('<option value="" data-v-2cec7552>All Types</option><option value="Delivery" data-v-2cec7552>Deliveries</option><option value="Sale" data-v-2cec7552>Sales</option><option value="Transfer" data-v-2cec7552>Transfers</option><option value="Adjustment" data-v-2cec7552>Adjustments</option>', 5)]), 512), [[rt, G.value]]), t("button", { class: "export-btn", onClick: Yt }, a[61] || (a[61] = [t("i", { class: "ki-duotone ki-file-down" }, [t("span", { class: "path1" }), t("span", { class: "path2" })], -1), A(" Export ")]))])]), t("div", sn, [t("div", en, [t("table", nn, [a[64] || (a[64] = t("thead", null, [t("tr", null, [t("th", null, "Date & Time"), t("th", null, "Product"), t("th", null, "Tank"), t("th", null, "Change Type"), t("th", null, "Previous Level"), t("th", null, "Quantity Change"), t("th", null, "New Level"), t("th", null, "Unit Price"), t("th", null, "Total Value"), t("th", null, "Authorized By")])], -1)), t("tbody", null, [(u(!0), d(z, null, U(W.value, e => (u(), d("tr", { key: e.HistoryID, class: "table-row" }, [t("td", on, [t("div", ln, o(Pt(e.ChangeDate)), 1), t("div", cn, o(gt(e.ChangeDate)), 1)]), t("td", rn, [t("div", dn, [a[63] || (a[63] = _('<div class="product-icon" data-v-2cec7552><i class="ki-duotone ki-element-11 text-primary" data-v-2cec7552><span class="path1" data-v-2cec7552></span><span class="path2" data-v-2cec7552></span><span class="path3" data-v-2cec7552></span><span class="path4" data-v-2cec7552></span></i></div>', 1)), t("div", un, [t("div", vn, o(F(e.ProductID)), 1), t("div", pn, "ID: " + o(e.ProductID), 1)])])]), t("td", hn, [t("div", mn, [t("div", fn, o($t(e.TankID)), 1), t("div", gn, "Tank " + o(e.TankID), 1)])]), t("td", kn, [t("span", { class: f(["change-badge", Mt(e.ChangeType)]) }, o(e.ChangeType), 3)]), t("td", yn, o(D(e.PreviousQuantity)) + "L", 1), t("td", _n, [t("span", { class: f(Nt(e.QuantityChange)) }, o(zt(e.QuantityChange)), 3)]), t("td", bn, o(D(e.NewQuantity)) + "L", 1), t("td", Dn, o(y(e.UnitPrice || 0)), 1), t("td", Sn, o(y(e.TotalValue || 0)), 1), t("td", wn, [t("div", Cn, [t("div", Tn, o(Et(e.AuthorizedBy)), 1)])])]))), 128))])])]), t("div", In, [t("div", An, " Showing " + o(ga.value.length) + " of " + o(W.value.length) + " records ", 1), t("div", Ln, [t("button", { class: "pagination-btn", disabled: P.value === 1, onClick: a[7] || (a[7] = e => P.value--) }, a[65] || (a[65] = [t("i", { class: "ki-duotone ki-left" }, [t("span", { class: "path1" }), t("span", { class: "path2" })], -1)]), 8, xn), t("span", Pn, o(P.value), 1), t("button", { class: "pagination-btn", disabled: P.value >= ka.value, onClick: a[8] || (a[8] = e => P.value++) }, a[66] || (a[66] = [t("i", { class: "ki-duotone ki-right" }, [t("span", { class: "path1" }), t("span", { class: "path2" })], -1)]), 8, $n)])])])])], 512), [[X, I.value === 3]]), t("div", En, [t("div", { class: "floating-btn floating-btn-main", onClick: qt }, [t("i", { class: f(["ki-duotone ki-plus", { "rotate-45": V.value }]) }, a[67] || (a[67] = [t("span", { class: "path1" }, null, -1), t("span", { class: "path2" }, null, -1)]), 2)]), t("div", { class: f(["floating-actions", { "floating-actions-open": V.value }]) }, [t("button", { class: "floating-btn floating-btn-action", onClick: yt }, a[68] || (a[68] = [t("i", { class: "ki-duotone ki-arrows-circle" }, [t("span", { class: "path1" }), t("span", { class: "path2" })], -1)])), t("button", { class: "floating-btn floating-btn-action", onClick: Kt }, a[69] || (a[69] = [t("i", { class: "ki-duotone ki-setting-3" }, [t("span", { class: "path1" }), t("span", { class: "path2" })], -1)]))], 2)])])) : (u(), d("div", Fn, a[70] || (a[70] = [t("div", { class: "auth-container" }, [t("div", { class: "auth-icon" }, [t("i", { class: "ki-duotone ki-security-user" }, [t("span", { class: "path1" }), t("span", { class: "path2" })])]), t("h3", { class: "auth-title" }, "Authentication Required"), t("p", { class: "auth-description" }, "Please log in to access the Stock Intelligence Dashboard"), t("div", { class: "auth-loading" }, [t("div", { class: "loading-spinner" }), t("span", null, "Checking authentication...")]), t("button", { class: "auth-btn", onclick: "window.location.href='/login.html'" }, [t("i", { class: "ki-duotone ki-entrance-left me-2" }, [t("span", { class: "path1" }), t("span", { class: "path2" })]), A(" Go to Login ")])], -1)]))) }
  }
}, Bn = Sa(Mn, [["__scopeId", "data-v-2cec7552"]]); export { Bn as default };
