import { _ as jt, r as L, a as N, c as _t, o as qt, n as ft, q as Pt, d as u, e as s, f as O, C as zt, t as d, i as x, h as _, w as y, j as ot, F as W, k as Y, v as K, u as It, g as D, l as X, s as E, B as gt, T as Wt, S as J, p as r, y as Yt } from "./index-Fk_fMhvq.js"; import { a as Gt } from "./index-Dq7h7Pqt.js"; const Ht = { class: "d-flex flex-column gap-7" }, Kt = { class: "card bg-body-secondary" }, Xt = { class: "card-body p-6" }, Jt = { class: "row align-items-center" }, Qt = { class: "col-12 col-lg-6" }, Zt = { class: "row g-3" }, ts = { class: "col-6 col-md-3" }, ss = { class: "text-center" }, es = { class: "fs-2hx fw-bold text-success", id: "activePumpsCount" }, as = { class: "col-6 col-md-3" }, os = { class: "text-center" }, ns = { class: "fs-2hx fw-bold text-primary", id: "totalPumpsCount" }, is = { class: "col-6 col-md-3" }, ls = { class: "text-center" }, ds = { class: "fs-2hx fw-bold text-warning", id: "maintenanceCount" }, rs = { class: "col-6 col-md-3" }, cs = { class: "text-center" }, us = { class: "fs-2hx fw-bold text-info", id: "utilizationRate" }, ms = { class: "card card-flush" }, ps = { class: "card-header pt-6" }, vs = { class: "card-toolbar flex-row-reverse" }, fs = { class: "d-flex align-items-center gap-3" }, gs = ["disabled"], hs = ["disabled"], bs = { class: "ms-3" }, ks = ["disabled"], xs = { class: "card-body" }, ys = { class: "d-flex flex-stack flex-wrap gap-4 mb-8" }, ws = { class: "d-flex align-items-center flex-wrap gap-3" }, _s = { class: "w-250px" }, Ps = ["value"], Is = { class: "w-200px" }, Ds = ["disabled"], Ms = ["value"], Ss = { class: "w-150px" }, Cs = { class: "position-relative w-250px" }, Ts = { key: 0, class: "text-center py-20" }, Rs = { key: 1, class: "text-center py-20" }, As = { class: "text-gray-600 fw-semibold fs-6 mb-8" }, Fs = { key: 2, class: "text-center py-20" }, $s = { key: 3 }, Ns = { class: "d-block d-lg-none" }, Es = { class: "d-flex justify-content-between align-items-center mb-5" }, Us = { class: "form-check form-check-custom form-check-solid" }, Vs = { class: "text-muted fs-7" }, Bs = { class: "row g-4" }, Ls = { class: "card-body p-5" }, Os = { class: "d-flex align-items-start" }, js = { class: "form-check form-check-custom form-check-solid me-4" }, qs = ["value", "id"], zs = { class: "flex-grow-1" }, Ws = { class: "d-flex justify-content-between align-items-start mb-3" }, Ys = { class: "text-gray-800 fw-bold mb-1" }, Gs = { class: "text-muted fs-7" }, Hs = ["onClick"], Ks = { class: "row g-3" }, Xs = { class: "col-6" }, Js = { class: "d-flex align-items-center" }, Qs = { class: "text-gray-800 fw-bold" }, Zs = { class: "col-6" }, te = { class: "d-flex align-items-center" }, se = { class: "text-gray-800 fw-bold" }, ee = { class: "d-flex justify-content-end gap-2 mt-4" }, ae = ["onClick"], oe = ["onClick"], ne = { class: "table-responsive d-none d-lg-block" }, ie = { class: "table align-middle table-row-dashed fs-6 gy-5", id: "pumpsTable" }, le = { class: "text-start text-muted fw-bold fs-7 text-uppercase gs-0" }, de = { class: "w-10px pe-2" }, re = { class: "form-check form-check-sm form-check-custom form-check-solid me-3" }, ce = { class: "d-flex align-items-center" }, ue = { class: "d-flex align-items-center" }, me = { class: "d-flex align-items-center" }, pe = { class: "fw-semibold text-gray-600" }, ve = { class: "form-check form-check-sm form-check-custom form-check-solid" }, fe = ["value"], ge = { class: "d-flex align-items-center" }, he = ["onClick"], be = { class: "text-muted fs-7" }, ke = { class: "d-flex flex-column" }, xe = { class: "text-gray-800 fw-bold" }, ye = { class: "badge badge-light-primary fs-8 mt-1" }, we = { class: "d-flex align-items-center" }, _e = { class: "text-gray-800 fw-bold fs-6" }, Pe = ["onClick"], Ie = { class: "d-flex flex-column" }, De = { class: "text-gray-800 fw-bold" }, Me = { class: "progress h-5px mt-1" }, Se = ["onClick"], Ce = { class: "text-end" }, Te = { class: "dropdown" }, Re = { class: "dropdown-menu dropdown-menu-end" }, Ae = ["onClick"], Fe = ["onClick"], $e = ["onClick"], Ne = { key: 0, class: "d-flex flex-stack flex-wrap pt-8" }, Ee = { class: "fs-6 fw-semibold text-gray-700" }, Ue = { class: "pagination" }, Ve = ["onClick"], Be = { key: 0, class: "modal fade show d-block", tabindex: "-1", role: "dialog", "aria-modal": "true" }, Le = { class: "modal-dialog modal-dialog-centered modal-lg" }, Oe = { class: "modal-content" }, je = { class: "modal-header" }, qe = { class: "modal-title fw-bold" }, ze = { class: "modal-body scroll-y mx-5 mx-xl-15 my-7" }, We = { class: "row g-9" }, Ye = { class: "col-12" }, Ge = { class: "fv-row mb-7" }, He = { key: 0, class: "invalid-feedback" }, Ke = { class: "col-12" }, Xe = { class: "fv-row mb-7" }, Je = ["value"], Qe = { key: 0, class: "invalid-feedback" }, Ze = { class: "col-12" }, ta = { class: "fv-row mb-7" }, sa = { class: "required fs-6 fw-semibold mb-2" }, ea = { class: "input-group input-group-solid" }, aa = ["disabled"], oa = { key: 0, class: "invalid-feedback" }, na = { key: 1, class: "form-text text-muted" }, ia = { class: "col-12" }, la = { class: "fv-row mb-7" }, da = { class: "row g-3" }, ra = { class: "col-4" }, ca = { class: "form-check form-check-custom form-check-solid" }, ua = { class: "col-4" }, ma = { class: "form-check form-check-custom form-check-solid" }, pa = { class: "col-4" }, va = { class: "form-check form-check-custom form-check-solid" }, fa = { class: "modal-footer" }, ga = ["disabled"], ha = { key: 0, class: "spinner-border spinner-border-sm me-2" }, ba = { key: 1, class: "modal fade show d-block", tabindex: "-1", role: "dialog", "aria-modal": "true" }, ka = { class: "modal-dialog modal-dialog-centered" }, xa = { class: "modal-content" }, ya = { class: "modal-body scroll-y mx-5 mx-xl-15 my-7" }, wa = { class: "notice bg-light-info rounded border-info border border-dashed p-6 mb-8" }, _a = { class: "d-flex align-items-center" }, Pa = { class: "text-gray-800 fw-bold mb-1" }, Ia = { class: "text-muted fs-7" }, Da = { class: "fv-row mb-7" }, Ma = { class: "input-group input-group-solid" }, Sa = ["value"], Ca = { class: "fv-row mb-7" }, Ta = { class: "input-group input-group-solid" }, Ra = ["min"], Aa = { key: 0, class: "invalid-feedback" }, Fa = { key: 1, class: "form-text text-success" }, $a = { class: "fv-row mb-7" }, Na = { class: "form-check form-switch form-check-custom form-check-solid" }, Ea = { key: 0, class: "fv-row mb-7" }, Ua = { key: 0, class: "invalid-feedback" }, Va = { class: "modal-footer" }, Ba = ["disabled"], La = { key: 0, class: "spinner-border spinner-border-sm me-2" }, Oa = { key: 2, class: "modal-backdrop fade show" }, ja = {
  __name: "MgtPumps", setup(qa) {
    const C = Gt.create({ baseURL: "https://backend.cloudfuelstationmis.com/api/records/v1", headers: { "Content-Type": "application/json" }, timeout: 15e3 }); C.interceptors.response.use(e => e, e => { var t; return ((t = e.response) == null ? void 0 : t.status) === 400 && console.error("Bad request:", e.response.data), Promise.reject(e) }); const nt = L([]), T = L([]), g = L([]), Q = L([]), G = L(!1), Z = L(!1), tt = L(!1), h = L([]), n = N({ stationId: localStorage.getItem("lastStation") || "", tankId: "", status: "", search: "", sort: "PumpName", dir: "asc", page: 1, limit: 15 }), v = N({ total: 0, pages: 1, page: 1 }), U = N({ total: 0, active: 0, maintenance: 0, utilization: 0 }), k = N({ type: null, data: null }), m = N({ PumpID: null, PumpName: "", TankID: "", MeterReading: 0, Status: "Active" }), it = N({}), P = N({}), f = N({ newReading: 0, reset: !1, reason: "" }), I = N({}), j = e => (parseFloat(e) || 0).toLocaleString(void 0, { minimumFractionDigits: 2, maximumFractionDigits: 2 }), ht = e => ({ Active: "badge badge-light-success cursor-pointer", Inactive: "badge badge-light-secondary cursor-pointer", Maintenance: "badge badge-light-warning cursor-pointer" })[e] || "badge badge-light cursor-pointer", lt = e => n.sort !== e ? "ki-duotone ki-arrow-up-down fs-5" : n.dir === "asc" ? "ki-duotone ki-arrow-up fs-5 text-primary" : "ki-duotone ki-arrow-down fs-5 text-primary", bt = ((e, t = 300) => { let o; return (...l) => { clearTimeout(o), o = setTimeout(() => e(...l), t) } })(() => { n.page = 1, S() }, 400), V = (e, t = "success", o = 3e3) => J.fire({ toast: !0, position: "top-end", icon: t, title: e, timer: o, showConfirmButton: !1, timerProgressBar: !0 }), F = (e, t = "Error") => J.fire({ icon: "error", title: t, text: e, confirmButtonColor: "#f1416c" }), H = e => { if (!e) return "N/A"; if (!Q.value.length) return "Loading..."; const t = Q.value.find(o => o.ProductID === e); return (t == null ? void 0 : t.Name) || `Product ${e}` }, dt = e => { if (!e) return "N/A"; const t = T.value.find(o => o.TankID === e); return (t == null ? void 0 : t.TankName) || "Unknown Tank" }, rt = e => { if (!e) return null; const t = T.value.find(o => o.TankID === e); return (t == null ? void 0 : t.ProductID) || null }, ct = e => { const t = Math.random() * 2e3 + 500; return Math.round(t) }, Dt = _t(() => { const e = [], o = Math.floor(3.5); let l = Math.max(1, v.page - o), i = Math.min(v.pages, l + 7 - 1); i - l + 1 < 7 && (l = Math.max(1, i - 7 + 1)); for (let c = l; c <= i; c++)e.push(c); return e }), ut = e => { e >= 1 && e <= v.pages && e !== n.page && (n.page = e, S()) }, st = _t({ get: () => g.value.length > 0 && h.value.length === g.value.length, set: e => { h.value = e ? g.value.map(t => t.PumpID) : [] } }), A = (e, t, o, l = {}) => { console.log(`[AUDIT] ${e} on ${t}`, { recordId: o, changes: l, timestamp: new Date().toISOString() }) }, Mt = e => { const t = []; let o = 0; return g.value.some(i => i.PumpName.toLowerCase().trim() === e.PumpName.toLowerCase().trim() && i.PumpID !== e.PumpID) && (t.push("Duplicate pump name detected"), o += 40), !e.PumpID && e.MeterReading > 5e5 && (t.push("Unusually high initial meter reading"), o += 30), e.MeterReading < 0 && (t.push("Negative meter reading not allowed"), o += 50), { flagged: o >= 40, riskScore: Math.min(o, 100), reasons: t } }, St = async e => {
      const t = await J.fire({
        title: "Potential Risk Detected", html: `
      <div class="text-start">
        <p class="mb-3">Our system has detected potential irregularities:</p>
        <ul class="list-unstyled mb-4">
          ${e.reasons.map(o => `<li class="d-flex align-items-center mb-2">
            <i class="ki-duotone ki-warning fs-5 text-warning me-2">
              <span class="path1"></span><span class="path2"></span>
            </i>
            ${o}
          </li>`).join("")}
        </ul>
        <div class="alert alert-warning">
          <strong>Risk Score: ${e.riskScore}%</strong>
        </div>
        <p>Do you want to proceed anyway?</p>
      </div>
    `, icon: "warning", showCancelButton: !0, confirmButtonText: "Proceed Anyway", cancelButtonText: "Review & Fix", confirmButtonColor: "#f1416c"
      }); return t.isConfirmed && A("FRAUD_OVERRIDE", "Pumps", "OVERRIDE", { fraud_details: e }), t.isConfirmed
    }, kt = async () => { var e; try { console.log("Fetching stations..."); const { data: t } = await C.get("/Stations", { params: { limit: 256, order: "StationName" } }); console.log("Stations response:", t), nt.value = (t.records || []).filter(o => o.Status === "Active"), console.log("Filtered active stations:", nt.value.length) } catch (t) { console.error("Failed to fetch stations:", ((e = t.response) == null ? void 0 : e.data) || t.message), F("Failed to load stations. Please check your connection.") } }, xt = async () => { var e; try { console.log("Fetching products..."); const { data: t } = await C.get("/Products", { params: { limit: 256, order: "Name" } }); console.log("Products response:", t), Q.value = (t.records || []).filter(o => !o.Status || o.Status === "Active"), console.log("Filtered active products:", Q.value.length) } catch (t) { console.error("Failed to fetch products:", ((e = t.response) == null ? void 0 : e.data) || t.message) } }, mt = async () => { var e; if (!n.stationId) { T.value = []; return } try { console.log("Fetching tanks for station:", n.stationId); const { data: t } = await C.get("/Tanks", { params: { "filter[StationID]": n.stationId, limit: 256, order: "TankName" } }); console.log("Tanks response:", t), T.value = (t.records || []).filter(o => !o.Status || o.Status === "Active"), console.log("Filtered active tanks:", T.value.length) } catch (t) { console.error("Failed to fetch tanks:", ((e = t.response) == null ? void 0 : e.data) || t.message), F("Failed to load tanks for the selected station.") } }, S = async () => { var e; if (!n.stationId) { g.value = [], et(); return } G.value = !0; try { const t = { "filter[StationID]": n.stationId, limit: n.limit, offset: (n.page - 1) * n.limit, order: `${n.dir === "desc" ? "-" : ""}${n.sort}`, count: !0 }; n.tankId && (t["filter[TankID]"] = n.tankId), n.status && (t["filter[Status]"] = n.status), n.search && (t["filter[PumpName][$like]"] = `%${n.search}%`), console.log("Loading pumps with params:", t); const { data: o } = await C.get("/Pumps", { params: t }); if (console.log("Pumps response:", o), g.value = o.records || [], v.total = o.total_count || g.value.length, v.pages = Math.max(1, Math.ceil(v.total / n.limit)), v.page = n.page, n.page > v.pages && v.pages > 0) { n.page = v.pages, await S(); return } h.value = [], et() } catch (t) { console.error("Failed to load pumps:", ((e = t.response) == null ? void 0 : e.data) || t.message), F("Failed to load pump data. Please try again.") } finally { G.value = !1 } }, et = () => { const e = g.value.length, t = g.value.filter(l => l.Status === "Active").length, o = g.value.filter(l => l.Status === "Maintenance").length; U.total = e, U.active = t, U.maintenance = o, U.utilization = e > 0 ? Math.round(t / e * 100) : 0 }, Ct = async () => { await Promise.all([kt(), xt(), mt(), S()]), V("Data refreshed successfully") }, pt = e => { n.sort === e ? n.dir = n.dir === "asc" ? "desc" : "asc" : (n.sort = e, n.dir = "asc"), n.page = 1, S() }, Tt = async () => { localStorage.setItem("lastStation", n.stationId), n.tankId = "", n.page = 1, h.value = [], await mt(), await S(), at() }, yt = () => { n.page = 1, h.value = [], S() }, B = (e, t = null) => { vt(), k.type = e, k.data = t ? { ...t } : null, e === "pumpForm" ? t ? (Object.assign(m, t), Object.assign(it, t)) : (Object.assign(m, { PumpID: null, PumpName: "", TankID: "", MeterReading: 0, Status: "Active" }), Object.assign(it, {})) : e === "meterForm" && (Object.assign(f, { newReading: (t == null ? void 0 : t.MeterReading) || 0, reset: !1, reason: "" }), Object.assign(I, {})) }, q = () => { k.type = null, k.data = null, vt() }, vt = () => { Object.keys(P).forEach(e => delete P[e]), Object.keys(I).forEach(e => delete I[e]) }, Rt = () => { var t; vt(); let e = !0; return (t = m.PumpName) != null && t.trim() ? m.PumpName.trim().length > 50 && (P.PumpName = "Pump name cannot exceed 50 characters", e = !1) : (P.PumpName = "Pump name is required", e = !1), m.TankID || (P.TankID = "Tank selection is required", e = !1), !m.PumpID && (m.MeterReading === null || m.MeterReading < 0) && (P.MeterReading = "Initial meter reading must be a non-negative number", e = !1), e }, At = () => { var t, o; Object.keys(I).forEach(l => delete I[l]); let e = !0; return f.newReading === null || f.newReading === "" ? (I.newReading = "New reading is required", e = !1) : f.newReading < 0 ? (I.newReading = "Reading cannot be negative", e = !1) : !f.reset && f.newReading < (((t = k.data) == null ? void 0 : t.MeterReading) || 0) && (I.newReading = "New reading must be greater than current reading (or enable reset option)", e = !1), f.reset && !((o = f.reason) != null && o.trim()) && (I.reason = "Reason is required for calibration/reset", e = !1), e }, Ft = async () => { var o, l; if (!Rt()) return; const e = { ...m, StationID: n.stationId, MeterReading: parseFloat(m.MeterReading) || 0 }, t = Mt(e); if (!(t.flagged && !await St(t))) { Z.value = !0; try { let i; if (e.PumpID) i = await C.put(`/Pumps/${e.PumpID}`, e), A("UPDATE", "Pumps", e.PumpID, { before: it, after: e }), V("Pump updated successfully"); else { const { PumpID: c, ...b } = e; i = await C.post("/Pumps", b); const M = i.data.record || { PumpID: i.data.PumpID, ...b }; A("CREATE", "Pumps", M.PumpID, { after: M }), V("Pump created successfully") } q(), S() } catch (i) { const c = ((l = (o = i.response) == null ? void 0 : o.data) == null ? void 0 : l.message) || i.message || "Operation failed"; A("FAILED_SAVE", "Pumps", e.PumpID || "NEW", { error: c, payload: e }), F(`Save failed: ${c}`) } finally { Z.value = !1 } } }, $t = async () => { var t, o; if (!At()) return; const e = { PumpID: k.data.PumpID, MeterReading: parseFloat(f.newReading), Reset: f.reset, Reason: f.reset ? f.reason.trim() : null }; tt.value = !0; try { await C.put(`/Pumps/${e.PumpID}`, { MeterReading: e.MeterReading }), A("METER_UPDATE", "Pumps", e.PumpID, { from: k.data.MeterReading, to: e.MeterReading, reset: e.Reset, reason: e.Reason }), V("Meter reading updated successfully"), q(), S() } catch (l) { const i = ((o = (t = l.response) == null ? void 0 : t.data) == null ? void 0 : o.message) || l.message || "Meter update failed"; A("FAILED_METER_UPDATE", "Pumps", e.PumpID, { error: i, payload: e }), F(`Update failed: ${i}`) } finally { tt.value = !1 } }, wt = async e => { var l, i; const t = e.Status === "Active" ? "Inactive" : "Active", o = e.Status; e.Status = t; try { await C.put(`/Pumps/${e.PumpID}`, { Status: t }), A("STATUS_TOGGLE", "Pumps", e.PumpID, { from: o, to: t }), V(`Pump status changed to ${t}`), et() } catch (c) { e.Status = o, F(`Status change failed: ${((i = (l = c.response) == null ? void 0 : l.data) == null ? void 0 : i.message) || "Unknown error"}`) } }, Nt = async e => {
      var o, l; if ((await J.fire({
        title: "Delete Pump", html: `
      <div class="text-start">
        <p>Are you sure you want to delete <strong>${e.PumpName}</strong>?</p>
        <div class="alert alert-warning">
          <i class="ki-duotone ki-warning fs-2 text-warning me-2">
            <span class="path1"></span><span class="path2"></span>
          </i>
          This action cannot be undone and will remove all associated data.
        </div>
      </div>
    `, icon: "warning", showCancelButton: !0, confirmButtonText: "Yes, Delete", cancelButtonText: "Cancel", confirmButtonColor: "#f1416c"
      })).isConfirmed) try { await C.delete(`/Pumps/${e.PumpID}`), A("DELETE", "Pumps", e.PumpID, { deleted_pump: e }), V("Pump deleted successfully"), S() } catch (i) { const c = ((l = (o = i.response) == null ? void 0 : o.data) == null ? void 0 : l.message) || "Delete operation failed"; A("FAILED_DELETE", "Pumps", e.PumpID, { error: c, pump: e }), F(`Delete failed: ${c}`) }
    }, Et = async e => { var l, i; if (!h.value.length) { V("No pumps selected", "info"); return } const t = "deactivate"; if ((await J.fire({ title: `Bulk ${t}`, text: `${t} ${h.value.length} selected pump(s)?`, icon: "warning", showCancelButton: !0, confirmButtonText: `Yes, ${t}`, cancelButtonText: "Cancel", confirmButtonColor: "#f1416c" })).isConfirmed) try { if (e === "deactivate") { const c = h.value.map(b => C.put(`/Pumps/${b}`, { Status: "Inactive" })); await Promise.all(c) } A(`BULK_${e.toUpperCase()}`, "Pumps", null, { pump_ids: h.value, action: e }), V(`${h.value.length} pump(s) ${t}d successfully`), h.value = [], S() } catch (c) { F(`Bulk ${e} failed: ${((i = (l = c.response) == null ? void 0 : l.data) == null ? void 0 : i.message) || "Unknown error"}`) } }, at = () => { ft(() => { Ut(), Vt(), Bt() }) }, Ut = () => { const e = document.getElementById("statusChart"); if (!e || !g.value.length) return; const t = e.getContext("2d"); t.clearRect(0, 0, e.width, e.height); const o = { Active: g.value.filter(a => a.Status === "Active").length, Inactive: g.value.filter(a => a.Status === "Inactive").length, Maintenance: g.value.filter(a => a.Status === "Maintenance").length }, l = ["#50cd89", "#a1a5b7", "#ffc700"], i = Object.values(o), c = e.width / 2, b = e.height / 2, M = Math.min(c, b) - 20; let w = -Math.PI / 2; const R = i.reduce((a, p) => a + p, 0); R !== 0 && i.forEach((a, p) => { const $ = a / R * 2 * Math.PI; t.beginPath(), t.moveTo(c, b), t.arc(c, b, M, w, w + $), t.closePath(), t.fillStyle = l[p], t.fill(); const z = w + $ / 2, Lt = c + Math.cos(z) * (M / 1.5), Ot = b + Math.sin(z) * (M / 1.5); t.fillStyle = "#ffffff", t.font = "bold 12px Arial", t.textAlign = "center", t.fillText(a.toString(), Lt, Ot), w += $ }) }, Vt = () => { const e = document.getElementById("meterChart"); if (!e || !g.value.length) return; const t = e.getContext("2d"); t.clearRect(0, 0, e.width, e.height); const o = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"], l = o.map(() => Math.random() * 1e4 + 5e3), i = 40, c = e.width - i * 2, b = e.height - i * 2, M = Math.max(...l), w = Math.min(...l), R = M - w || 1; t.strokeStyle = "#e4e6ef", t.lineWidth = 1, t.beginPath(), t.moveTo(i, i), t.lineTo(i, i + b), t.lineTo(i + c, i + b), t.stroke(), t.strokeStyle = "#50cd89", t.lineWidth = 3, t.beginPath(), l.forEach((a, p) => { const $ = i + p / (l.length - 1) * c, z = i + b - (a - w) / R * b; p === 0 ? t.moveTo($, z) : t.lineTo($, z), t.fillStyle = "#50cd89", t.beginPath(), t.arc($, z, 4, 0, 2 * Math.PI), t.fill() }), t.stroke(), t.fillStyle = "#a1a5b7", t.font = "11px Arial", t.textAlign = "center", o.forEach((a, p) => { const $ = i + p / (o.length - 1) * c; t.fillText(a, $, e.height - 10) }) }, Bt = () => { const e = document.getElementById("tankChart"); if (!e || !T.value.length) return; const t = e.getContext("2d"); t.clearRect(0, 0, e.width, e.height); const o = 30, l = (e.width - o * 2) / T.value.length - 10, i = e.height - o * 2; T.value.forEach((c, b) => { const M = (c.CurrentLevel || 0) / (c.Capacity || 1), w = M * i, R = o + b * (l + 10), a = e.height - o - w, p = t.createLinearGradient(0, a, 0, a + w); p.addColorStop(0, "#009ef7"), p.addColorStop(1, "#50cd89"), t.fillStyle = p, t.fillRect(R, a, l, w), t.fillStyle = "#a1a5b7", t.font = "10px Arial", t.textAlign = "center", t.save(), t.translate(R + l / 2, e.height - 5), t.rotate(-Math.PI / 4), t.fillText(c.TankName, 0, 0), t.restore(), t.fillStyle = "#ffffff", t.font = "bold 10px Arial", t.textAlign = "center", w > 20 && t.fillText(`${Math.round(M * 100)}%`, R + l / 2, a + w / 2) }) }; return qt(async () => { try { console.log("Initializing pump management..."), await kt(), xt().catch(e => console.warn("Products loading failed:", e)), n.stationId && (await mt(), await S(), ft(() => at())), console.log("Initialization complete") } catch (e) { console.error("Critical initialization failed:", e), F("Failed to initialize pump management. Please refresh the page.") } }), Pt(() => g.value.length, () => { et(), at() }), Pt(() => n.stationId, () => { n.stationId && ft(() => at()) }), (e, t) => { var o, l, i, c, b, M, w, R; return r(), u("div", Ht, [s("div", Kt, [s("div", Xt, [s("div", Jt, [t[30] || (t[30] = O('<div class="col-12 col-lg-6" data-v-11451121><div class="d-flex align-items-center mb-3" data-v-11451121><div class="symbol symbol-50px me-4" data-v-11451121><div class="symbol-label bg-light-primary" data-v-11451121><i class="ki-duotone ki-gas-station fs-2x text-primary" data-v-11451121><span class="path1" data-v-11451121></span><span class="path2" data-v-11451121></span></i></div></div><div data-v-11451121><h1 class="text-gray-900 fw-bold fs-2x mb-0" data-v-11451121>Pump Management</h1><p class="text-muted fs-6 mb-0" data-v-11451121>Monitor and control fuel dispensing systems</p></div></div></div>', 1)), s("div", Qt, [s("div", Zt, [s("div", ts, [s("div", ss, [s("div", es, d(U.active), 1), t[26] || (t[26] = s("div", { class: "fs-7 text-muted" }, "Active Pumps", -1))])]), s("div", as, [s("div", os, [s("div", ns, d(U.total), 1), t[27] || (t[27] = s("div", { class: "fs-7 text-muted" }, "Total Pumps", -1))])]), s("div", is, [s("div", ls, [s("div", ds, d(U.maintenance), 1), t[28] || (t[28] = s("div", { class: "fs-7 text-muted" }, "Maintenance", -1))])]), s("div", rs, [s("div", cs, [s("div", us, d(U.utilization) + "% ", 1), t[29] || (t[29] = s("div", { class: "fs-7 text-muted" }, "Utilization", -1))])])])])])])]), t[87] || (t[87] = O('<div class="row g-5 g-xl-8" data-v-11451121><div class="col-xl-4" data-v-11451121><div class="card card-xl-stretch mb-xl-8" data-v-11451121><div class="card-header border-0" data-v-11451121><h3 class="card-title fw-bold text-gray-900" data-v-11451121>Status Distribution</h3><div class="card-toolbar" data-v-11451121><i class="ki-duotone ki-chart-pie-simple fs-2 text-primary" data-v-11451121><span class="path1" data-v-11451121></span><span class="path2" data-v-11451121></span></i></div></div><div class="card-body" data-v-11451121><canvas id="statusChart" width="300" height="300" data-v-11451121></canvas></div></div></div><div class="col-xl-4" data-v-11451121><div class="card card-xl-stretch mb-xl-8" data-v-11451121><div class="card-header border-0" data-v-11451121><h3 class="card-title fw-bold text-gray-900" data-v-11451121>Daily Meter Progress</h3><div class="card-toolbar" data-v-11451121><i class="ki-duotone ki-chart-line fs-2 text-success" data-v-11451121><span class="path1" data-v-11451121></span><span class="path2" data-v-11451121></span></i></div></div><div class="card-body" data-v-11451121><canvas id="meterChart" width="300" height="300" data-v-11451121></canvas></div></div></div><div class="col-xl-4" data-v-11451121><div class="card card-xl-stretch mb-xl-8" data-v-11451121><div class="card-header border-0" data-v-11451121><h3 class="card-title fw-bold text-gray-900" data-v-11451121>Tank Utilization</h3><div class="card-toolbar" data-v-11451121><i class="ki-duotone ki-chart-simple fs-2 text-info" data-v-11451121><span class="path1" data-v-11451121></span><span class="path2" data-v-11451121></span><span class="path3" data-v-11451121></span><span class="path4" data-v-11451121></span></i></div></div><div class="card-body" data-v-11451121><canvas id="tankChart" width="300" height="200" data-v-11451121></canvas></div></div></div></div>', 1)), s("div", ms, [s("div", ps, [t[34] || (t[34] = s("div", { class: "card-title flex-column" }, [s("h2", { class: "mb-1" }, "Station Operations"), s("div", { class: "text-muted fs-6" }, "Manage pumps and dispensing equipment")], -1)), s("div", vs, [s("div", fs, [s("button", { class: "btn btn-sm btn-flex btn-primary", disabled: !n.stationId, onClick: t[0] || (t[0] = a => B("pumpForm", null)) }, t[31] || (t[31] = [s("i", { class: "ki-duotone ki-plus fs-3" }, [s("span", { class: "path1" }), s("span", { class: "path2" })], -1), x(" Add Pump ")]), 8, gs), s("button", { class: "btn btn-sm btn-flex btn-light-danger", disabled: !h.value.length, onClick: t[1] || (t[1] = a => Et("deactivate")) }, t[32] || (t[32] = [s("i", { class: "ki-duotone ki-setting-4 fs-3" }, [s("span", { class: "path1" }), s("span", { class: "path2" }), s("span", { class: "path3" })], -1), x(" Bulk Actions ")]), 8, hs), s("div", bs, [s("button", { class: "btn btn-sm btn-icon btn-light", onClick: Ct, disabled: G.value, "data-bs-toggle": "tooltip", title: "Refresh Data" }, [s("i", { class: _(["ki-duotone ki-arrows-circle fs-3", { rotate: G.value }]) }, t[33] || (t[33] = [s("span", { class: "path1" }, null, -1), s("span", { class: "path2" }, null, -1)]), 2)], 8, ks)])])])]), s("div", xs, [s("div", ys, [s("div", ws, [s("div", _s, [y(s("select", { "onUpdate:modelValue": t[2] || (t[2] = a => n.stationId = a), onChange: Tt, class: "form-select form-select-solid form-select-sm", "data-placeholder": "Select Station", "data-allow-clear": "false" }, [t[35] || (t[35] = s("option", { disabled: "", value: "" }, "Select Station...", -1)), (r(!0), u(W, null, Y(nt.value, a => (r(), u("option", { key: a.StationID, value: a.StationID }, d(a.StationName), 9, Ps))), 128))], 544), [[ot, n.stationId]])]), s("div", Is, [y(s("select", { "onUpdate:modelValue": t[3] || (t[3] = a => n.tankId = a), onChange: yt, class: "form-select form-select-solid form-select-sm", disabled: !T.value.length, "data-placeholder": "All Tanks" }, [t[36] || (t[36] = s("option", { value: "" }, "All Tanks", -1)), (r(!0), u(W, null, Y(T.value, a => (r(), u("option", { key: a.TankID, value: a.TankID }, d(a.TankName) + " - " + d(H(a.ProductID)), 9, Ms))), 128))], 40, Ds), [[ot, n.tankId]])]), s("div", Ss, [y(s("select", { "onUpdate:modelValue": t[4] || (t[4] = a => n.status = a), onChange: yt, class: "form-select form-select-solid form-select-sm" }, t[37] || (t[37] = [s("option", { value: "" }, "All Status", -1), s("option", { value: "Active" }, "Active", -1), s("option", { value: "Inactive" }, "Inactive", -1), s("option", { value: "Maintenance" }, "Maintenance", -1)]), 544), [[ot, n.status]])])]), s("div", Cs, [t[38] || (t[38] = s("i", { class: "ki-duotone ki-magnifier fs-3 position-absolute ms-3 top-50 translate-middle-y text-gray-500" }, [s("span", { class: "path1" }), s("span", { class: "path2" })], -1)), y(s("input", { "onUpdate:modelValue": t[5] || (t[5] = a => n.search = a), onInput: t[6] || (t[6] = (...a) => It(bt) && It(bt)(...a)), type: "text", class: "form-control form-control-solid form-control-sm ps-10", placeholder: "Search pumps..." }, null, 544), [[K, n.search, void 0, { trim: !0 }]])])]), G.value && !g.value.length ? (r(), u("div", Ts, t[39] || (t[39] = [s("div", { class: "spinner-border spinner-border-lg text-primary", role: "status" }, [s("span", { class: "visually-hidden" }, "Loading pumps...")], -1), s("div", { class: "text-muted fs-6 mt-3" }, "Loading pump data...", -1)]))) : !g.value.length && n.stationId ? (r(), u("div", Rs, [t[41] || (t[41] = O('<div class="symbol symbol-100px mx-auto mb-7" data-v-11451121><div class="symbol-label bg-light-primary" data-v-11451121><i class="ki-duotone ki-gas-station fs-2x text-primary" data-v-11451121><span class="path1" data-v-11451121></span><span class="path2" data-v-11451121></span></i></div></div><h3 class="text-gray-800 fw-semibold mb-3" data-v-11451121>No Pumps Found</h3>', 2)), s("div", As, d(n.search || n.tankId || n.status ? "Try adjusting your filters" : "Add your first pump to get started"), 1), !n.search && !n.tankId && !n.status ? (r(), u("button", { key: 0, class: "btn btn-primary", onClick: t[7] || (t[7] = a => B("pumpForm", null)) }, t[40] || (t[40] = [s("i", { class: "ki-duotone ki-plus fs-2" }, [s("span", { class: "path1" }), s("span", { class: "path2" })], -1), x(" Add First Pump ")]))) : D("", !0)])) : n.stationId ? (r(), u("div", $s, [s("div", Ns, [s("div", Es, [s("div", Us, [y(s("input", { class: "form-check-input", type: "checkbox", "onUpdate:modelValue": t[8] || (t[8] = a => st.value = a), id: "selectAllMobile" }, null, 512), [[X, st.value]]), t[43] || (t[43] = s("label", { class: "form-check-label fw-semibold text-gray-700", for: "selectAllMobile" }, " Select All ", -1))]), s("div", Vs, d(h.value.length) + " of " + d(v.total) + " selected", 1)]), s("div", Bs, [(r(!0), u(W, null, Y(g.value, a => (r(), u("div", { key: a.PumpID, class: "col-12" }, [s("div", { class: _(["card card-custom", { "ring ring-primary": h.value.includes(a.PumpID) }]) }, [s("div", Ls, [s("div", Os, [s("div", js, [y(s("input", { class: "form-check-input", type: "checkbox", value: a.PumpID, "onUpdate:modelValue": t[9] || (t[9] = p => h.value = p), id: `pump_${a.PumpID}` }, null, 8, qs), [[X, h.value]])]), s("div", zs, [s("div", Ws, [s("div", null, [s("h4", Ys, d(a.PumpName), 1), s("div", Gs, " Tank: " + d(dt(a.TankID)) + " • " + d(H(rt(a.TankID))), 1)]), s("span", { class: _(ht(a.Status)), onClick: p => wt(a) }, d(a.Status), 11, Hs)]), t[50] || (t[50] = s("div", { class: "separator separator-dashed my-4" }, null, -1)), s("div", Ks, [s("div", Xs, [s("div", Js, [t[45] || (t[45] = s("i", { class: "ki-duotone ki-speedometer fs-3 text-info me-2" }, [s("span", { class: "path1" }), s("span", { class: "path2" })], -1)), s("div", null, [s("div", Qs, d(j(a.MeterReading)), 1), t[44] || (t[44] = s("div", { class: "text-muted fs-8" }, "Meter Reading", -1))])])]), s("div", Zs, [s("div", te, [t[47] || (t[47] = s("i", { class: "ki-duotone ki-chart-line-up fs-3 text-success me-2" }, [s("span", { class: "path1" }), s("span", { class: "path2" })], -1)), s("div", null, [s("div", se, d(ct()) + "L ", 1), t[46] || (t[46] = s("div", { class: "text-muted fs-8" }, "Daily Flow", -1))])])])]), s("div", ee, [s("button", { class: "btn btn-sm btn-light-primary", onClick: p => B("meterForm", a) }, t[48] || (t[48] = [s("i", { class: "ki-duotone ki-setting-2 fs-4" }, [s("span", { class: "path1" }), s("span", { class: "path2" })], -1), x(" Update Meter ")]), 8, ae), s("button", { class: "btn btn-sm btn-light-info", onClick: p => B("pumpForm", a) }, t[49] || (t[49] = [s("i", { class: "ki-duotone ki-notepad-edit fs-4" }, [s("span", { class: "path1" }), s("span", { class: "path2" })], -1), x(" Edit ")]), 8, oe)])])])])], 2)]))), 128))])]), s("div", ne, [s("table", ie, [s("thead", null, [s("tr", le, [s("th", de, [s("div", re, [y(s("input", { class: "form-check-input", type: "checkbox", "onUpdate:modelValue": t[10] || (t[10] = a => st.value = a) }, null, 512), [[X, st.value]])])]), s("th", { class: "min-w-175px cursor-pointer", onClick: t[11] || (t[11] = a => pt("PumpName")) }, [s("div", ce, [t[51] || (t[51] = x(" Pump Details ")), s("i", { class: _([lt("PumpName"), "ms-1"]) }, null, 2)])]), t[54] || (t[54] = s("th", { class: "min-w-150px" }, "Tank & Product", -1)), s("th", { class: "min-w-125px cursor-pointer", onClick: t[12] || (t[12] = a => pt("MeterReading")) }, [s("div", ue, [t[52] || (t[52] = x(" Meter Reading ")), s("i", { class: _([lt("MeterReading"), "ms-1"]) }, null, 2)])]), t[55] || (t[55] = s("th", { class: "min-w-100px" }, "Performance", -1)), s("th", { class: "min-w-100px cursor-pointer", onClick: t[13] || (t[13] = a => pt("Status")) }, [s("div", me, [t[53] || (t[53] = x(" Status ")), s("i", { class: _([lt("Status"), "ms-1"]) }, null, 2)])]), t[56] || (t[56] = s("th", { class: "text-end min-w-100px" }, "Actions", -1))])]), s("tbody", pe, [(r(!0), u(W, null, Y(g.value, a => (r(), u("tr", { key: a.PumpID, class: _(["hover-elevate-up", { "bg-light-primary": h.value.includes(a.PumpID) }]) }, [s("td", null, [s("div", ve, [y(s("input", { class: "form-check-input", type: "checkbox", value: a.PumpID, "onUpdate:modelValue": t[14] || (t[14] = p => h.value = p) }, null, 8, fe), [[X, h.value]])])]), s("td", null, [s("div", ge, [t[57] || (t[57] = O('<div class="symbol symbol-45px me-3" data-v-11451121><div class="symbol-label bg-light-info" data-v-11451121><i class="ki-duotone ki-gas-station fs-3 text-info" data-v-11451121><span class="path1" data-v-11451121></span><span class="path2" data-v-11451121></span></i></div></div>', 1)), s("div", null, [s("a", { href: "#", onClick: E(p => B("pumpForm", a), ["prevent"]), class: "text-gray-800 fw-bold text-hover-primary fs-6" }, d(a.PumpName), 9, he), s("div", be, "ID: " + d(a.PumpID), 1)])])]), s("td", null, [s("div", ke, [s("div", xe, d(dt(a.TankID)), 1), s("div", ye, d(H(rt(a.TankID))), 1)])]), s("td", null, [s("div", we, [t[58] || (t[58] = s("i", { class: "ki-duotone ki-speedometer fs-3 text-primary me-2" }, [s("span", { class: "path1" }), s("span", { class: "path2" })], -1)), s("div", null, [s("div", _e, d(j(a.MeterReading)), 1), s("button", { class: "btn btn-sm btn-light-info mt-1", onClick: p => B("meterForm", a) }, " Update ", 8, Pe)])])]), s("td", null, [s("div", Ie, [s("div", De, d(ct()) + "L", 1), t[59] || (t[59] = s("div", { class: "text-muted fs-8" }, "Daily Flow", -1)), s("div", Me, [s("div", { class: "progress-bar bg-success", style: Yt({ width: `${Math.min(100, ct() / 5e3 * 100)}%` }) }, null, 4)])])]), s("td", null, [s("span", { class: _(ht(a.Status)), onClick: p => wt(a), role: "button" }, d(a.Status), 11, Se)]), s("td", Ce, [s("div", Te, [t[64] || (t[64] = O('<button class="btn btn-sm btn-icon btn-light btn-active-light-primary" data-bs-toggle="dropdown" aria-expanded="false" data-v-11451121><i class="ki-duotone ki-dots-vertical fs-5" data-v-11451121><span class="path1" data-v-11451121></span><span class="path2" data-v-11451121></span><span class="path3" data-v-11451121></span></i></button>', 1)), s("div", Re, [s("a", { class: "dropdown-item", href: "#", onClick: E(p => B("pumpForm", a), ["prevent"]) }, t[60] || (t[60] = [s("i", { class: "ki-duotone ki-notepad-edit fs-5 me-2" }, [s("span", { class: "path1" }), s("span", { class: "path2" })], -1), x(" Edit Pump ")]), 8, Ae), s("a", { class: "dropdown-item", href: "#", onClick: E(p => B("meterForm", a), ["prevent"]) }, t[61] || (t[61] = [s("i", { class: "ki-duotone ki-setting-2 fs-5 me-2" }, [s("span", { class: "path1" }), s("span", { class: "path2" })], -1), x(" Update Meter ")]), 8, Fe), t[63] || (t[63] = s("div", { class: "dropdown-divider" }, null, -1)), s("a", { class: "dropdown-item text-danger", href: "#", onClick: E(p => Nt(a), ["prevent"]) }, t[62] || (t[62] = [O('<i class="ki-duotone ki-trash fs-5 me-2" data-v-11451121><span class="path1" data-v-11451121></span><span class="path2" data-v-11451121></span><span class="path3" data-v-11451121></span><span class="path4" data-v-11451121></span><span class="path5" data-v-11451121></span></i> Delete Pump ', 2)]), 8, $e)])])])], 2))), 128))])])]), v.pages > 1 ? (r(), u("div", Ne, [s("div", Ee, " Showing " + d((v.page - 1) * n.limit + 1) + " to " + d(Math.min(v.page * n.limit, v.total)) + " of " + d(v.total) + " entries ", 1), s("ul", Ue, [s("li", { class: _(["page-item previous", { disabled: v.page === 1 }]) }, [s("a", { href: "#", class: "page-link", onClick: t[15] || (t[15] = E(a => ut(v.page - 1), ["prevent"])) }, t[65] || (t[65] = [s("i", { class: "previous" }, null, -1)]))], 2), (r(!0), u(W, null, Y(Dt.value, a => (r(), u("li", { key: a, class: _(["page-item", { active: v.page === a }]) }, [s("a", { href: "#", class: "page-link", onClick: E(p => ut(a), ["prevent"]) }, d(a), 9, Ve)], 2))), 128)), s("li", { class: _(["page-item next", { disabled: v.page === v.pages }]) }, [s("a", { href: "#", class: "page-link", onClick: t[16] || (t[16] = E(a => ut(v.page + 1), ["prevent"])) }, t[66] || (t[66] = [s("i", { class: "next" }, null, -1)]))], 2)])])) : D("", !0)])) : (r(), u("div", Fs, t[42] || (t[42] = [O('<div class="symbol symbol-100px mx-auto mb-7" data-v-11451121><div class="symbol-label bg-light-warning" data-v-11451121><i class="ki-duotone ki-map fs-2x text-warning" data-v-11451121><span class="path1" data-v-11451121></span><span class="path2" data-v-11451121></span><span class="path3" data-v-11451121></span></i></div></div><h3 class="text-gray-800 fw-semibold mb-3" data-v-11451121>Select a Station</h3><div class="text-gray-600 fw-semibold fs-6" data-v-11451121> Choose a station from the dropdown above to view its pumps </div>', 3)])))])]), (r(), zt(Wt, { to: "body" }, [k.type === "pumpForm" ? (r(), u("div", Be, [s("div", Le, [s("div", Oe, [s("form", { onSubmit: E(Ft, ["prevent"]), novalidate: "" }, [s("div", je, [s("h2", qe, [t[67] || (t[67] = s("i", { class: "ki-duotone ki-gas-station fs-2 me-2 text-primary" }, [s("span", { class: "path1" }), s("span", { class: "path2" })], -1)), x(" " + d((o = k.data) != null && o.PumpID ? "Edit Pump" : "Add New Pump"), 1)]), s("div", { class: "btn btn-icon btn-sm btn-active-light-primary ms-2", onClick: q }, t[68] || (t[68] = [s("i", { class: "ki-duotone ki-cross fs-1" }, [s("span", { class: "path1" }), s("span", { class: "path2" })], -1)]))]), s("div", ze, [s("div", We, [s("div", Ye, [s("div", Ge, [t[69] || (t[69] = s("label", { class: "required fs-6 fw-semibold mb-2" }, "Pump Name", -1)), y(s("input", { "onUpdate:modelValue": t[17] || (t[17] = a => m.PumpName = a), type: "text", class: _(["form-control form-control-solid", { "is-invalid": P.PumpName }]), placeholder: "Enter pump identifier (e.g., Pump A1)", maxlength: "50", required: "" }, null, 2), [[K, m.PumpName, void 0, { trim: !0 }]]), P.PumpName ? (r(), u("div", He, d(P.PumpName), 1)) : D("", !0)])]), s("div", Ke, [s("div", Xe, [t[71] || (t[71] = s("label", { class: "required fs-6 fw-semibold mb-2" }, "Connected Tank", -1)), y(s("select", { "onUpdate:modelValue": t[18] || (t[18] = a => m.TankID = a), class: _(["form-select form-select-solid", { "is-invalid": P.TankID }]), required: "" }, [t[70] || (t[70] = s("option", { disabled: "", value: "" }, "Select Tank...", -1)), (r(!0), u(W, null, Y(T.value, a => (r(), u("option", { key: a.TankID, value: a.TankID }, d(a.TankName) + " - " + d(H(a.ProductID)) + " (" + d(j(a.CurrentLevel)) + "L / " + d(j(a.Capacity)) + "L) ", 9, Je))), 128))], 2), [[ot, m.TankID]]), P.TankID ? (r(), u("div", Qe, d(P.TankID), 1)) : D("", !0)])]), s("div", Ze, [s("div", ta, [s("label", sa, d(m.PumpID ? "Current Meter Reading" : "Initial Meter Reading"), 1), s("div", ea, [y(s("input", { "onUpdate:modelValue": t[19] || (t[19] = a => m.MeterReading = a), type: "number", min: "0", step: "0.01", class: _(["form-control", { "is-invalid": P.MeterReading }]), disabled: !!m.PumpID, placeholder: "0.00", required: "" }, null, 10, aa), [[K, m.MeterReading, void 0, { number: !0 }]]), t[72] || (t[72] = s("span", { class: "input-group-text" }, "Liters", -1))]), P.MeterReading ? (r(), u("div", oa, d(P.MeterReading), 1)) : D("", !0), m.PumpID ? (r(), u("div", na, ' Cannot be changed here. Use "Update Meter" action instead. ')) : D("", !0)])]), s("div", ia, [s("div", la, [t[76] || (t[76] = s("label", { class: "fs-6 fw-semibold mb-2" }, "Status", -1)), s("div", da, [s("div", ra, [s("div", ca, [y(s("input", { class: "form-check-input", type: "radio", value: "Active", "onUpdate:modelValue": t[20] || (t[20] = a => m.Status = a), id: "statusActive" }, null, 512), [[gt, m.Status]]), t[73] || (t[73] = s("label", { class: "form-check-label", for: "statusActive" }, [s("div", { class: "d-flex align-items-center" }, [s("i", { class: "ki-duotone ki-check-circle fs-2 text-success me-2" }, [s("span", { class: "path1" }), s("span", { class: "path2" })]), x(" Active ")])], -1))])]), s("div", ua, [s("div", ma, [y(s("input", { class: "form-check-input", type: "radio", value: "Inactive", "onUpdate:modelValue": t[21] || (t[21] = a => m.Status = a), id: "statusInactive" }, null, 512), [[gt, m.Status]]), t[74] || (t[74] = s("label", { class: "form-check-label", for: "statusInactive" }, [s("div", { class: "d-flex align-items-center" }, [s("i", { class: "ki-duotone ki-cross-circle fs-2 text-danger me-2" }, [s("span", { class: "path1" }), s("span", { class: "path2" })]), x(" Inactive ")])], -1))])]), s("div", pa, [s("div", va, [y(s("input", { class: "form-check-input", type: "radio", value: "Maintenance", "onUpdate:modelValue": t[22] || (t[22] = a => m.Status = a), id: "statusMaintenance" }, null, 512), [[gt, m.Status]]), t[75] || (t[75] = s("label", { class: "form-check-label", for: "statusMaintenance" }, [s("div", { class: "d-flex align-items-center" }, [s("i", { class: "ki-duotone ki-setting-2 fs-2 text-warning me-2" }, [s("span", { class: "path1" }), s("span", { class: "path2" })]), x(" Maintenance ")])], -1))])])])])])])]), s("div", fa, [s("button", { type: "button", class: "btn btn-light", onClick: q }, "Cancel"), s("button", { type: "submit", class: "btn btn-primary", disabled: Z.value }, [Z.value ? (r(), u("span", ha)) : D("", !0), x(" " + d(m.PumpID ? "Update Pump" : "Create Pump"), 1)], 8, ga)])], 32)])])])) : D("", !0), k.type === "meterForm" ? (r(), u("div", ba, [s("div", ka, [s("div", xa, [s("form", { onSubmit: E($t, ["prevent"]), novalidate: "" }, [s("div", { class: "modal-header" }, [t[78] || (t[78] = s("h2", { class: "modal-title fw-bold" }, [s("i", { class: "ki-duotone ki-speedometer fs-2 me-2 text-info" }, [s("span", { class: "path1" }), s("span", { class: "path2" })]), x(" Update Meter Reading ")], -1)), s("div", { class: "btn btn-icon btn-sm btn-active-light-primary ms-2", onClick: q }, t[77] || (t[77] = [s("i", { class: "ki-duotone ki-cross fs-1" }, [s("span", { class: "path1" }), s("span", { class: "path2" })], -1)]))]), s("div", ya, [s("div", wa, [s("div", _a, [t[79] || (t[79] = s("div", { class: "symbol symbol-45px me-4" }, [s("div", { class: "symbol-label bg-info" }, [s("i", { class: "ki-duotone ki-gas-station fs-3 text-white" }, [s("span", { class: "path1" }), s("span", { class: "path2" })])])], -1)), s("div", null, [s("h4", Pa, d((l = k.data) == null ? void 0 : l.PumpName), 1), s("div", Ia, " Tank: " + d(dt((i = k.data) == null ? void 0 : i.TankID)) + " • " + d(H(rt((c = k.data) == null ? void 0 : c.TankID))), 1)])])]), s("div", Da, [t[81] || (t[81] = s("label", { class: "fs-6 fw-semibold mb-2" }, "Current Meter Reading", -1)), s("div", Ma, [s("input", { disabled: "", class: "form-control form-control-lg", value: j((b = k.data) == null ? void 0 : b.MeterReading) }, null, 8, Sa), t[80] || (t[80] = s("span", { class: "input-group-text" }, "Liters", -1))])]), s("div", Ca, [t[83] || (t[83] = s("label", { class: "required fs-6 fw-semibold mb-2" }, "New Meter Reading", -1)), s("div", Ta, [y(s("input", { "onUpdate:modelValue": t[23] || (t[23] = a => f.newReading = a), min: ((M = k.data) == null ? void 0 : M.MeterReading) || 0, type: "number", step: "0.01", class: _(["form-control form-control-lg", { "is-invalid": I.newReading }]), placeholder: "Enter new reading", required: "" }, null, 10, Ra), [[K, f.newReading, void 0, { number: !0 }]]), t[82] || (t[82] = s("span", { class: "input-group-text" }, "Liters", -1))]), I.newReading ? (r(), u("div", Aa, d(I.newReading), 1)) : D("", !0), f.newReading > (((w = k.data) == null ? void 0 : w.MeterReading) || 0) ? (r(), u("div", Fa, " Difference: +" + d(j(f.newReading - (((R = k.data) == null ? void 0 : R.MeterReading) || 0))) + " L ", 1)) : D("", !0)]), s("div", $a, [s("div", Na, [y(s("input", { "onUpdate:modelValue": t[24] || (t[24] = a => f.reset = a), class: "form-check-input", type: "checkbox", id: "resetOption" }, null, 512), [[X, f.reset]]), t[84] || (t[84] = s("label", { class: "form-check-label fw-semibold text-gray-700", for: "resetOption" }, " This is a calibration/reset (reading decreased) ", -1))])]), f.reset ? (r(), u("div", Ea, [t[85] || (t[85] = s("label", { class: "required fs-6 fw-semibold mb-2" }, "Reason for Reset", -1)), y(s("textarea", { "onUpdate:modelValue": t[25] || (t[25] = a => f.reason = a), class: _(["form-control form-control-solid", { "is-invalid": I.reason }]), placeholder: "Enter detailed reason for calibration/reset", rows: "3", required: "" }, null, 2), [[K, f.reason, void 0, { trim: !0 }]]), I.reason ? (r(), u("div", Ua, d(I.reason), 1)) : D("", !0)])) : D("", !0)]), s("div", Va, [s("button", { type: "button", class: "btn btn-light", onClick: q }, "Cancel"), s("button", { type: "submit", class: "btn btn-primary", disabled: tt.value }, [tt.value ? (r(), u("span", La)) : D("", !0), t[86] || (t[86] = x(" Update Reading "))], 8, Ba)])], 32)])])])) : D("", !0), k.type ? (r(), u("div", Oa)) : D("", !0)]))]) }
  }
}, Ga = jt(ja, [["__scopeId", "data-v-11451121"]]); export { Ga as default };
