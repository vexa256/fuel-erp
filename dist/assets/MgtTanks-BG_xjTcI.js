import { _ as Et, r as f, S as K, c as m, q as At, o as Bt, b as Ut, d as c, e as t, i as U, f as y, t as n, w as k, j as P, g as x, v as H, F as V, k as j, h as g, s as Q, n as Vt, p as u, y as jt } from "./index-Fk_fMhvq.js"; import { a as $t } from "./index-Dq7h7Pqt.js"; const Ot = { class: "d-flex flex-column gap-5" }, qt = { class: "row g-5 g-xl-8" }, Rt = { class: "col-6 col-lg-3" }, Gt = { class: "card bg-light-primary card-xl-stretch mb-xl-8" }, Wt = { class: "card-body p-5" }, Yt = { class: "d-flex align-items-center" }, Kt = { class: "d-flex flex-column" }, Ht = { class: "fs-2hx fw-bold text-dark", "data-kt-countup": "true", "data-kt-countup-value": "14" }, Qt = { class: "col-6 col-lg-3" }, Jt = { class: "card bg-light-success card-xl-stretch mb-xl-8" }, Xt = { class: "card-body p-5" }, Zt = { class: "d-flex align-items-center" }, te = { class: "d-flex flex-column" }, ee = { class: "fs-2hx fw-bold text-dark" }, ae = { class: "col-6 col-lg-3" }, se = { class: "card bg-light-info card-xl-stretch mb-xl-8" }, le = { class: "card-body p-5" }, oe = { class: "d-flex align-items-center" }, ne = { class: "d-flex flex-column" }, ie = { class: "fs-2hx fw-bold text-dark" }, re = { class: "col-6 col-lg-3" }, de = { class: "card bg-light-warning card-xl-stretch mb-xl-8" }, ce = { class: "card-body p-5" }, ue = { class: "d-flex align-items-center" }, ve = { class: "d-flex flex-column" }, pe = { class: "fs-2hx fw-bold text-dark" }, fe = { class: "row g-5 g-xl-8" }, me = { class: "col-xl-8 col-lg-7 col-12" }, be = { class: "card card-flush h-xl-100" }, he = { class: "card-header py-7" }, ge = { class: "card-title align-items-start flex-column" }, ye = { class: "text-gray-400 mt-1 fw-semibold fs-6" }, xe = { class: "card-toolbar" }, we = { class: "card-body pt-3" }, ke = { key: 0, class: "d-flex justify-content-center my-10" }, _e = { class: "col-xl-4 col-lg-5 col-12" }, Ce = { class: "card card-flush h-xl-100" }, Se = { class: "card-body pt-3" }, Ie = { class: "d-flex flex-column mt-8" }, Te = { class: "d-flex align-items-center mb-5" }, De = { class: "badge badge-danger fs-6 fw-bold" }, Le = { class: "d-flex align-items-center mb-5" }, Pe = { class: "badge badge-warning fs-6 fw-bold" }, Fe = { class: "d-flex align-items-center mb-5" }, ze = { class: "badge badge-info fs-6 fw-bold" }, Me = { class: "d-flex align-items-center" }, Ne = { class: "badge badge-success fs-6 fw-bold" }, Ee = { class: "row g-5 g-xl-8" }, Ae = { class: "col-xl-6 col-12" }, Be = { class: "card card-flush h-xl-100" }, Ue = { class: "card-header py-7" }, Ve = { class: "card-title align-items-start flex-column" }, je = { class: "text-gray-400 mt-1 fw-semibold fs-6" }, $e = { class: "card card-flush" }, Oe = { class: "card-header align-items-center py-5 gap-2 gap-md-5 border-0" }, qe = { class: "card-title" }, Re = { class: "d-flex align-items-center position-relative my-1" }, Ge = { class: "card-toolbar flex-row-fluid justify-content-end gap-3" }, We = ["value"], Ye = { class: "card-body pt-0" }, Ke = { class: "row g-5" }, He = { key: 0, class: "col-12" }, Qe = { key: 1, class: "col-12" }, Je = { class: "card-header ribbon ribbon-end" }, Xe = { class: "card-title" }, Ze = { class: "d-flex align-items-center" }, ta = { class: "symbol symbol-40px me-3" }, ea = { class: "d-flex flex-column" }, aa = { class: "fs-4 fw-bold text-dark text-hover-primary" }, sa = { class: "text-muted fw-semibold" }, la = { class: "card-body py-5" }, oa = { class: "d-flex flex-column gap-5" }, na = { class: "d-flex align-items-center" }, ia = { class: "d-flex flex-column flex-grow-1" }, ra = { class: "d-flex align-items-center" }, da = { class: "fw-bold fs-6 text-gray-800" }, ca = { class: "d-flex flex-column min-w-125px" }, ua = { class: "fw-bold fs-6 text-gray-800 text-end" }, va = { class: "d-flex justify-content-between align-items-center mb-2" }, pa = { class: "text-muted fs-7 fw-semibold" }, fa = { class: "h-8px mx-3 w-100 bg-light rounded" }, ma = ["aria-valuenow"], ba = { class: "d-flex justify-content-between" }, ha = { class: "d-flex flex-column" }, ga = { class: "fw-bold fs-6 text-gray-800" }, ya = { class: "d-flex flex-column" }, xa = { class: "fw-bold fs-6 text-gray-800 text-end" }, wa = { class: "card-footer d-flex justify-content-end" }, ka = ["onClick"], _a = ["onClick"], Ca = { key: 0, class: "d-flex flex-stack flex-wrap pt-10" }, Sa = { class: "fs-6 fw-semibold text-gray-700" }, Ia = { class: "pagination" }, Ta = ["onClick"], Da = { class: "modal-dialog modal-dialog-centered mw-650px" }, La = { class: "modal-content" }, Pa = { class: "modal-body scroll-y mx-5 mx-xl-18 pt-0 pb-15" }, Fa = { class: "text-center mb-13" }, za = { class: "mb-3" }, Ma = { class: "text-muted fw-semibold fs-5" }, Na = { class: "d-flex flex-column mb-8" }, Ea = { key: 0, class: "invalid-feedback d-block" }, Aa = { class: "row g-8 mb-8" }, Ba = { class: "col-md-6" }, Ua = ["value"], Va = { key: 0, class: "invalid-feedback d-block" }, ja = { class: "col-md-6" }, $a = ["value"], Oa = { key: 0, class: "invalid-feedback d-block" }, qa = { class: "row g-8 mb-8" }, Ra = { class: "col-md-6" }, Ga = { key: 0, class: "invalid-feedback d-block" }, Wa = { class: "col-md-6" }, Ya = { key: 0, class: "invalid-feedback d-block" }, Ka = { class: "d-flex flex-column mb-8" }, Ha = { key: 0, class: "invalid-feedback d-block" }, Qa = { class: "d-flex flex-center flex-row-fluid pt-5" }, Ja = ["disabled"], Xa = { key: 0, class: "indicator-label" }, Za = { key: 1, class: "indicator-progress" }, ts = { __name: "MgtTanks", setup(es) { const p = f([]), $ = f([]), F = f([]), z = f(!1), M = f(!1), O = f(""), q = f(""), R = f(""), N = f("station"), w = f(1), J = f(9), S = f(!1), E = f(null), _ = f(null), v = f({}), b = f({}), lt = { TankName: "", StationID: "", ProductID: "", Capacity: "", CurrentLevel: "", Status: "Active", LastFilledDate: new Date().toISOString().split("T")[0] }, r = f({ ...lt }), D = $t.create({ baseURL: "https://backend.cloudfuelstationmis.com/api/records/v1", headers: { "Content-Type": "application/json", Authorization: `Bearer ${localStorage.getItem("jwt")}` }, timeout: 1e4 }); D.interceptors.response.use(a => a, a => { var s, i; console.error("API Error:", a); const e = ((i = (s = a.response) == null ? void 0 : s.data) == null ? void 0 : i.message) || a.message || "An unexpected error occurred"; return K.fire({ title: "Error!", text: e, icon: "error", confirmButtonColor: "#f1416c" }), Promise.reject(a) }); const G = m(() => { let a = p.value; if (O.value) { const e = O.value.toLowerCase(); a = a.filter(s => s.TankName.toLowerCase().includes(e) || W(s.StationID).toLowerCase().includes(e) || Y(s.ProductID).toLowerCase().includes(e)) } return q.value && (a = a.filter(e => e.StationID == q.value)), R.value && (a = a.filter(e => e.Status === R.value)), a }), A = m(() => Math.ceil(G.value.length / J.value)), X = m(() => (w.value - 1) * J.value), ot = m(() => X.value + J.value), Z = m(() => G.value.slice(X.value, ot.value)), ut = m(() => { const a = []; if (A.value <= 5) for (let s = 1; s <= A.value; s++)a.push(s); else { let s = Math.max(1, w.value - Math.floor(2.5)), i = Math.min(A.value, s + 5 - 1); i - s + 1 < 5 && (s = Math.max(1, i - 5 + 1)); for (let C = s; C <= i; C++)a.push(C) } return a }), nt = m(() => p.value.length), tt = m(() => p.value.reduce((a, e) => a + (parseInt(e.Capacity) || 0), 0)), it = m(() => p.value.reduce((a, e) => a + (parseInt(e.CurrentLevel) || 0), 0)), vt = m(() => tt.value ? Math.round(it.value / tt.value * 100) : 0), pt = m(() => p.value.filter(a => a.Status === "Active").length), ft = m(() => new Set(p.value.map(e => e.StationID)).size), mt = m(() => { const a = new Set(p.value.map(e => e.StationID)); return $.value.filter(e => a.has(e.StationID)) }), bt = m(() => new Set(p.value.map(e => e.ProductID)).size), ht = m(() => F.value.filter(a => a.ProductType === "Fuel")), B = m(() => { const a = { critical: 0, low: 0, good: 0, full: 0 }; return p.value.forEach(e => { const s = I(e); s < 20 ? a.critical++ : s < 50 ? a.low++ : s < 80 ? a.good++ : a.full++ }), a }), et = a => new Intl.NumberFormat().format(a || 0), rt = a => a >= 1e6 ? `${(a / 1e6).toFixed(1)}M` : a >= 1e3 ? `${(a / 1e3).toFixed(1)}K` : et(a), dt = a => { if (!a) return "N/A"; try { return new Date(a).toLocaleDateString("en-US", { year: "numeric", month: "short", day: "numeric" }) } catch { return "Invalid date" } }, W = a => { var e; return ((e = $.value.find(s => s.StationID == a)) == null ? void 0 : e.StationName) || "Unknown" }, Y = a => { var e; return ((e = F.value.find(s => s.ProductID == a)) == null ? void 0 : e.Name) || "Unknown" }, I = a => a.Capacity ? Math.round(a.CurrentLevel / a.Capacity * 100) : 0, gt = a => { switch (a) { case "Active": return "ribbon-success"; case "Inactive": return "ribbon-danger"; case "Maintenance": return "ribbon-warning"; default: return "ribbon-primary" } }, yt = a => { const e = I(a); return e < 20 ? "bg-danger" : e < 50 ? "bg-warning" : e < 80 ? "bg-info" : "bg-success" }, xt = a => { const e = I(a); return e < 20 ? "text-danger" : e < 50 ? "text-warning" : e < 80 ? "text-info" : "text-success" }, wt = a => { const e = F.value.find(i => i.ProductID == a); if (!e) return "bg-primary"; const s = e.Name.toLowerCase(); return s.includes("petrol") || s.includes("premium") ? "bg-danger" : s.includes("diesel") ? "bg-success" : s.includes("kerosene") ? "bg-info" : s.includes("lpg") || s.includes("gas") ? "bg-warning" : "bg-primary" }, kt = a => { const e = F.value.find(i => i.ProductID == a); if (!e) return "bg-primary"; const s = e.Name.toLowerCase(); return s.includes("petrol") || s.includes("premium") ? "bg-danger" : s.includes("diesel") ? "bg-success" : s.includes("kerosene") ? "bg-info" : s.includes("lpg") || s.includes("gas") ? "bg-warning" : "bg-primary" }, ct = async () => { await Vt(), setTimeout(() => { Ct(), St(), It(), Tt() }, 100) }, T = a => { b.value[a] && (b.value[a].destroy(), delete b.value[a]) }, _t = () => { Object.keys(b.value).forEach(a => { b.value[a] && (b.value[a].destroy(), delete b.value[a]) }) }, Ct = () => { const a = "tank_levels_chart", e = document.getElementById(a); if (!e) return; T(a); let s = [], i = []; if (N.value === "station") { const o = {}; p.value.forEach(l => { const d = W(l.StationID); o[d] || (o[d] = { capacity: 0, current: 0 }), o[d].capacity += parseInt(l.Capacity) || 0, o[d].current += parseInt(l.CurrentLevel) || 0 }), i = Object.keys(o), s = [{ name: "Total Capacity", data: i.map(l => Math.round(o[l].capacity / 1e3)) }, { name: "Current Level", data: i.map(l => Math.round(o[l].current / 1e3)) }] } else if (N.value === "product") { const o = {}; p.value.forEach(l => { const d = Y(l.ProductID); o[d] || (o[d] = { capacity: 0, current: 0 }), o[d].capacity += parseInt(l.Capacity) || 0, o[d].current += parseInt(l.CurrentLevel) || 0 }), i = Object.keys(o), s = [{ name: "Total Capacity", data: i.map(l => Math.round(o[l].capacity / 1e3)) }, { name: "Current Level", data: i.map(l => Math.round(o[l].current / 1e3)) }] } else { const o = { "Critical (0-20%)": { capacity: 0, current: 0 }, "Low (20-50%)": { capacity: 0, current: 0 }, "Good (50-80%)": { capacity: 0, current: 0 }, "Full (80%+)": { capacity: 0, current: 0 } }; p.value.forEach(l => { const d = I(l), h = parseInt(l.Capacity) || 0, L = parseInt(l.CurrentLevel) || 0; d < 20 ? (o["Critical (0-20%)"].capacity += h, o["Critical (0-20%)"].current += L) : d < 50 ? (o["Low (20-50%)"].capacity += h, o["Low (20-50%)"].current += L) : d < 80 ? (o["Good (50-80%)"].capacity += h, o["Good (50-80%)"].current += L) : (o["Full (80%+)"].capacity += h, o["Full (80%+)"].current += L) }), i = Object.keys(o).filter(l => o[l].capacity > 0), s = [{ name: "Total Capacity", data: i.map(l => Math.round(o[l].capacity / 1e3)) }, { name: "Current Level", data: i.map(l => Math.round(o[l].current / 1e3)) }] } const C = { series: s, chart: { type: "bar", height: 350, stacked: !1, toolbar: { show: !0, tools: { download: !0, selection: !1, zoom: !1, zoomin: !1, zoomout: !1, pan: !1, reset: !1 } }, fontFamily: "inherit" }, plotOptions: { bar: { horizontal: !1, columnWidth: "60%", borderRadius: 5 } }, dataLabels: { enabled: !1 }, stroke: { show: !0, width: 2, colors: ["transparent"] }, xaxis: { categories: i, axisBorder: { show: !1 }, axisTicks: { show: !1 }, labels: { style: { colors: "#a1a5b7", fontSize: "12px" }, rotate: -45, rotateAlways: !1 } }, yaxis: { title: { text: "Volume (K Liters)", style: { color: "#a1a5b7", fontSize: "12px" } }, labels: { style: { colors: "#a1a5b7", fontSize: "12px" } } }, fill: { opacity: 1 }, states: { normal: { filter: { type: "none" } }, hover: { filter: { type: "none" } }, active: { allowMultipleDataPointsSelection: !1, filter: { type: "none" } } }, tooltip: { style: { fontSize: "12px" }, y: { formatter: function (o) { return o + " K Liters" } } }, colors: ["#E4E6EF", "#009EF7"], grid: { borderColor: "#EBEDF3", strokeDashArray: 4, yaxis: { lines: { show: !0 } } }, legend: { position: "top", horizontalAlign: "right", offsetY: -30, fontSize: "13px", fontWeight: 500, markers: { width: 10, height: 10, radius: 100 }, itemMargin: { horizontal: 10 } }, responsive: [{ breakpoint: 1024, options: { chart: { height: 300 }, plotOptions: { bar: { columnWidth: "65%" } }, legend: { position: "bottom", horizontalAlign: "center", offsetY: 0 } } }, { breakpoint: 480, options: { chart: { height: 250 }, plotOptions: { bar: { columnWidth: "75%" } }, legend: { position: "bottom", horizontalAlign: "center", offsetY: 0 }, xaxis: { labels: { rotate: -90 } } } }] }; try { b.value[a] = new ApexCharts(e, C), b.value[a].render() } catch (o) { console.error(`Error rendering chart ${a}:`, o), T(a) } }, St = () => { const a = "tank_categories_chart", e = document.getElementById(a); if (!e) return; T(a); const s = B.value, i = [s.critical, s.low, s.good, s.full], C = ["Critical", "Low", "Good", "Full"], o = i.reduce((h, L) => h + L, 0) || 1, d = { series: i.map(h => Math.round(h / o * 100)), chart: { width: "100%", type: "donut", fontFamily: "inherit" }, labels: C, colors: ["#F1416C", "#FFC700", "#7239EA", "#50CD89"], stroke: { width: 0 }, plotOptions: { pie: { donut: { size: "65%", background: "transparent", labels: { show: !0, name: { show: !0, fontSize: "12px", fontWeight: 600, offsetY: -10 }, value: { show: !0, fontSize: "22px", fontWeight: 700, offsetY: 5, formatter: function (h) { return h + "%" } }, total: { show: !0, label: "Total", color: "#9CA3AF", fontSize: "13px", fontWeight: 700, formatter: function () { return nt.value } } } } } }, dataLabels: { enabled: !1 }, responsive: [{ breakpoint: 480, options: { chart: { height: 180 } } }], legend: { show: !1 } }; try { b.value[a] = new ApexCharts(e, d), b.value[a].render() } catch (h) { console.error(`Error rendering chart ${a}:`, h), T(a) } }, It = () => { const a = "product_distribution_chart", e = document.getElementById(a); if (!e) return; T(a); const s = {}; p.value.forEach(l => { const d = Y(l.ProductID); s[d] = (s[d] || 0) + 1 }); const i = Object.keys(s), o = { series: Object.values(s), chart: { width: "100%", type: "pie", fontFamily: "inherit" }, labels: i, colors: ["#009EF7", "#50CD89", "#FFC700", "#F1416C", "#7239EA", "#3F4254"], stroke: { width: 3, colors: ["#FFFFFF"] }, fill: { opacity: 1 }, states: { normal: { filter: { type: "none" } }, hover: { filter: { type: "none" } }, active: { filter: { type: "none" } } }, tooltip: { style: { fontSize: "12px" }, y: { formatter: function (l) { return l + " tanks" } } }, legend: { position: "bottom", fontSize: "13px", fontWeight: 500, offsetY: 10, markers: { width: 10, height: 10, radius: 100 }, itemMargin: { horizontal: 10, vertical: 5 } }, responsive: [{ breakpoint: 480, options: { chart: { height: 250 }, legend: { fontSize: "11px", itemMargin: { horizontal: 5, vertical: 3 } } } }] }; try { b.value[a] = new ApexCharts(e, o), b.value[a].render() } catch (l) { console.error(`Error rendering chart ${a}:`, l), T(a) } }, Tt = () => { const a = "utilization_heatmap_chart", e = document.getElementById(a); if (!e) return; T(a); const s = [], i = {}; p.value.forEach(l => { const d = W(l.StationID); i[d] || (i[d] = []), i[d].push(l) }), Object.entries(i).sort((l, d) => d[1].length - l[1].length).slice(0, 5).map(l => l[0]).forEach(l => { const d = i[l].slice(0, 5).map(h => ({ x: h.TankName, y: I(h) })); s.push({ name: l, data: d }) }); const o = { series: s, chart: { height: 300, type: "heatmap", fontFamily: "inherit", toolbar: { show: !1 } }, dataLabels: { enabled: !0, style: { fontSize: "12px", fontWeight: 500 }, formatter: function (l) { return l + "%" } }, colors: ["#009EF7"], plotOptions: { heatmap: { colorScale: { ranges: [{ from: 0, to: 20, color: "#F1416C", name: "Critical" }, { from: 21, to: 50, color: "#FFC700", name: "Low" }, { from: 51, to: 80, color: "#7239EA", name: "Good" }, { from: 81, to: 100, color: "#50CD89", name: "Full" }] } } }, xaxis: { labels: { style: { colors: "#a1a5b7", fontSize: "12px" }, rotate: -45, rotateAlways: !1, maxHeight: 60 } }, yaxis: { labels: { style: { colors: "#a1a5b7", fontSize: "12px" } } }, grid: { padding: { left: 10, right: 10 }, borderColor: "#EBEDF3", strokeDashArray: 4 }, stroke: { width: 1, colors: ["#FFFFFF"] }, tooltip: { y: { formatter: function (l) { return l + "% filled" } } }, responsive: [{ breakpoint: 480, options: { chart: { height: 250 }, dataLabels: { enabled: !1 } } }] }; try { b.value[a] = new ApexCharts(e, o), b.value[a].render() } catch (l) { console.error(`Error rendering chart ${a}:`, l), T(a) } }, at = async () => { z.value = !0; try { const [a, e, s] = await Promise.all([D.get("/Tanks"), D.get("/Stations"), D.get("/Products")]); p.value = a.data.records || [], $.value = e.data.records || [], F.value = s.data.records || [], await ct() } catch { } finally { z.value = !1 } }, st = () => { S.value = !1, v.value = {}, r.value = { ...lt }, _.value || (_.value = new bootstrap.Modal(E.value)), _.value.show() }, Dt = a => { S.value = !0, v.value = {}, r.value = { ...a }, _.value || (_.value = new bootstrap.Modal(E.value)), _.value.show() }, Lt = () => { var e; const a = {}; return (e = r.value.TankName) != null && e.trim() || (a.TankName = "Tank name is required"), r.value.StationID || (a.StationID = "Please select a station"), r.value.ProductID || (a.ProductID = "Please select a product"), (!r.value.Capacity || r.value.Capacity <= 0) && (a.Capacity = "Capacity must be greater than zero"), (r.value.CurrentLevel === void 0 || r.value.CurrentLevel === null || r.value.CurrentLevel < 0) && (a.CurrentLevel = "Current level must be zero or greater"), r.value.CurrentLevel > r.value.Capacity && (a.CurrentLevel = "Current level cannot exceed capacity"), r.value.Status || (a.Status = "Please select a status"), v.value = a, Object.keys(a).length === 0 }, Pt = async () => { if (Lt()) { M.value = !0; try { S.value ? await D.put(`/Tanks/${r.value.TankID}`, r.value) : await D.post("/Tanks", r.value), await at(), _.value && _.value.hide(), K.fire({ title: S.value ? "Tank Updated!" : "Tank Created!", text: `Tank "${r.value.TankName}" has been ${S.value ? "updated" : "created"} successfully.`, icon: "success", toast: !0, position: "top-end", timer: 3e3, showConfirmButton: !1 }) } catch { } finally { M.value = !1 } } }, Ft = async a => { if ((await K.fire({ title: "Delete Tank?", text: `Are you sure you want to delete "${a.TankName}"? This action cannot be undone.`, icon: "warning", showCancelButton: !0, confirmButtonText: "Yes, delete it!", cancelButtonText: "No, cancel", confirmButtonColor: "#F1416C", cancelButtonColor: "#B5B5C3", reverseButtons: !0 })).isConfirmed) try { await D.delete(`/Tanks/${a.TankID}`), await at(), K.fire({ title: "Deleted!", text: `Tank "${a.TankName}" has been deleted.`, icon: "success", toast: !0, position: "top-end", timer: 3e3, showConfirmButton: !1 }) } catch { } }, zt = a => { w.value = a }, Mt = () => { w.value < A.value && w.value++ }, Nt = () => { w.value > 1 && w.value-- }; return At([p, N], () => { ct() }, { deep: !0 }), Bt(async () => { await at(), E.value && (_.value = new bootstrap.Modal(E.value)) }), Ut(() => { _t() }), (a, e) => (u(), c("div", Ot, [t("div", { class: "card card-flush" }, [t("div", { class: "card-header py-5" }, [e[11] || (e[11] = t("h3", { class: "card-title align-items-start flex-column" }, [t("span", { class: "card-label fw-bold text-dark" }, "Tank Management"), t("span", { class: "text-gray-400 mt-1 fw-semibold fs-6" }, "Monitoring and managing fuel tank inventory")], -1)), t("div", { class: "card-toolbar" }, [t("button", { onClick: st, class: "btn btn-primary d-flex align-items-center" }, e[10] || (e[10] = [t("i", { class: "ki-duotone ki-plus fs-2 me-2" }, [t("span", { class: "path1" }), t("span", { class: "path2" })], -1), U(" Add Tank ")]))])])]), t("div", qt, [t("div", Rt, [t("div", Gt, [t("div", Wt, [t("div", Yt, [e[13] || (e[13] = y('<div class="symbol symbol-50px me-5" data-v-4ab2247c><span class="symbol-label bg-light-primary" data-v-4ab2247c><i class="ki-duotone ki-oil-barrel fs-2x text-primary" data-v-4ab2247c><span class="path1" data-v-4ab2247c></span><span class="path2" data-v-4ab2247c></span></i></span></div>', 1)), t("div", Kt, [t("span", Ht, n(nt.value), 1), e[12] || (e[12] = t("span", { class: "text-gray-600 fw-semibold fs-6" }, "Total Tanks", -1))])])])])]), t("div", Qt, [t("div", Jt, [t("div", Xt, [t("div", Zt, [e[15] || (e[15] = y('<div class="symbol symbol-50px me-5" data-v-4ab2247c><span class="symbol-label bg-light-success" data-v-4ab2247c><i class="ki-duotone ki-water fs-2x text-success" data-v-4ab2247c><span class="path1" data-v-4ab2247c></span><span class="path2" data-v-4ab2247c></span></i></span></div>', 1)), t("div", te, [t("span", ee, n(rt(tt.value)), 1), e[14] || (e[14] = t("span", { class: "text-gray-600 fw-semibold fs-6" }, "Total Capacity", -1))])])])])]), t("div", ae, [t("div", se, [t("div", le, [t("div", oe, [e[17] || (e[17] = y('<div class="symbol symbol-50px me-5" data-v-4ab2247c><span class="symbol-label bg-light-info" data-v-4ab2247c><i class="ki-duotone ki-droplet fs-2x text-info" data-v-4ab2247c><span class="path1" data-v-4ab2247c></span><span class="path2" data-v-4ab2247c></span></i></span></div>', 1)), t("div", ne, [t("span", ie, n(rt(it.value)), 1), e[16] || (e[16] = t("span", { class: "text-gray-600 fw-semibold fs-6" }, "Current Stock", -1))])])])])]), t("div", re, [t("div", de, [t("div", ce, [t("div", ue, [e[19] || (e[19] = y('<div class="symbol symbol-50px me-5" data-v-4ab2247c><span class="symbol-label bg-light-warning" data-v-4ab2247c><i class="ki-duotone ki-percentage fs-2x text-warning" data-v-4ab2247c><span class="path1" data-v-4ab2247c></span><span class="path2" data-v-4ab2247c></span></i></span></div>', 1)), t("div", ve, [t("span", pe, n(vt.value) + "%", 1), e[18] || (e[18] = t("span", { class: "text-gray-600 fw-semibold fs-6" }, "Utilization Rate", -1))])])])])])]), t("div", fe, [t("div", me, [t("div", be, [t("div", he, [t("h3", ge, [e[20] || (e[20] = t("span", { class: "card-label fw-bold text-dark" }, "Station Tank Overview", -1)), t("span", ye, n(ft.value) + " Stations | " + n(pt.value) + " Active Tanks", 1)]), t("div", xe, [k(t("select", { "onUpdate:modelValue": e[0] || (e[0] = s => N.value = s), class: "form-select form-select-solid w-150px", "data-control": "select2", "data-hide-search": "true", "aria-label": "Group chart by" }, e[21] || (e[21] = [t("option", { value: "station" }, "By Station", -1), t("option", { value: "product" }, "By Product", -1), t("option", { value: "utilization" }, "By Utilization", -1)]), 512), [[P, N.value]])])]), t("div", we, [e[23] || (e[23] = t("div", { id: "tank_levels_chart", style: { height: "350px" }, class: "chart-container" }, null, -1)), z.value ? (u(), c("div", ke, e[22] || (e[22] = [t("div", { class: "spinner-border text-primary", role: "status" }, [t("span", { class: "visually-hidden" }, "Loading...")], -1)]))) : x("", !0)])])]), t("div", _e, [t("div", Ce, [e[29] || (e[29] = t("div", { class: "card-header py-7" }, [t("h3", { class: "card-title align-items-start flex-column" }, [t("span", { class: "card-label fw-bold text-dark" }, "Tank Categories"), t("span", { class: "text-gray-400 mt-1 fw-semibold fs-6" }, "By Utilization Level")])], -1)), t("div", Se, [e[28] || (e[28] = t("div", { id: "tank_categories_chart", style: { height: "200px" }, class: "chart-container" }, null, -1)), t("div", Ie, [t("div", Te, [e[24] || (e[24] = y('<div class="d-flex align-items-center me-2" data-v-4ab2247c><span class="bullet bullet-vertical h-40px bg-danger me-3" data-v-4ab2247c></span><div class="flex-grow-1" data-v-4ab2247c><a href="#" class="text-gray-800 text-hover-primary fw-bold fs-6" data-v-4ab2247c>Critical (&lt;20%)</a><span class="text-muted d-block fw-semibold" data-v-4ab2247c>Requires immediate refill</span></div></div>', 1)), t("div", De, n(B.value.critical), 1)]), t("div", Le, [e[25] || (e[25] = y('<div class="d-flex align-items-center me-2" data-v-4ab2247c><span class="bullet bullet-vertical h-40px bg-warning me-3" data-v-4ab2247c></span><div class="flex-grow-1" data-v-4ab2247c><a href="#" class="text-gray-800 text-hover-primary fw-bold fs-6" data-v-4ab2247c>Low (20-50%)</a><span class="text-muted d-block fw-semibold" data-v-4ab2247c>Schedule refill soon</span></div></div>', 1)), t("div", Pe, n(B.value.low), 1)]), t("div", Fe, [e[26] || (e[26] = y('<div class="d-flex align-items-center me-2" data-v-4ab2247c><span class="bullet bullet-vertical h-40px bg-info me-3" data-v-4ab2247c></span><div class="flex-grow-1" data-v-4ab2247c><a href="#" class="text-gray-800 text-hover-primary fw-bold fs-6" data-v-4ab2247c>Good (50-80%)</a><span class="text-muted d-block fw-semibold" data-v-4ab2247c>Adequate supply</span></div></div>', 1)), t("div", ze, n(B.value.good), 1)]), t("div", Me, [e[27] || (e[27] = y('<div class="d-flex align-items-center me-2" data-v-4ab2247c><span class="bullet bullet-vertical h-40px bg-success me-3" data-v-4ab2247c></span><div class="flex-grow-1" data-v-4ab2247c><a href="#" class="text-gray-800 text-hover-primary fw-bold fs-6" data-v-4ab2247c>Full (80%+)</a><span class="text-muted d-block fw-semibold" data-v-4ab2247c>Recently filled</span></div></div>', 1)), t("div", Ne, n(B.value.full), 1)])])])])])]), t("div", Ee, [t("div", Ae, [t("div", Be, [t("div", Ue, [t("h3", Ve, [e[30] || (e[30] = t("span", { class: "card-label fw-bold text-dark" }, "Product Distribution", -1)), t("span", je, n(bt.value) + " Fuel Types", 1)])]), e[31] || (e[31] = t("div", { class: "card-body pt-3" }, [t("div", { id: "product_distribution_chart", style: { height: "300px" }, class: "chart-container" })], -1))])]), e[32] || (e[32] = y('<div class="col-xl-6 col-12" data-v-4ab2247c><div class="card card-flush h-xl-100" data-v-4ab2247c><div class="card-header py-7" data-v-4ab2247c><h3 class="card-title align-items-start flex-column" data-v-4ab2247c><span class="card-label fw-bold text-dark" data-v-4ab2247c>Tank Utilization Map</span><span class="text-gray-400 mt-1 fw-semibold fs-6" data-v-4ab2247c>Real-time Capacity Status</span></h3></div><div class="card-body pt-3" data-v-4ab2247c><div id="utilization_heatmap_chart" style="height:300px;" class="chart-container" data-v-4ab2247c></div></div></div></div>', 1))]), t("div", $e, [e[49] || (e[49] = t("div", { class: "card-header align-items-center pt-8 pb-0" }, [t("h3", { class: "card-title align-items-start flex-column" }, [t("span", { class: "card-label fw-bold text-dark" }, "Tank Inventory"), t("span", { class: "text-gray-400 mt-1 fw-semibold fs-6" }, "Manage and monitor your tanks")])], -1)), t("div", Oe, [t("div", qe, [t("div", Re, [e[33] || (e[33] = t("i", { class: "ki-duotone ki-magnifier fs-3 position-absolute ms-4" }, [t("span", { class: "path1" }), t("span", { class: "path2" })], -1)), k(t("input", { "onUpdate:modelValue": e[1] || (e[1] = s => O.value = s), type: "text", class: "form-control form-control-solid w-250px ps-12", placeholder: "Search tanks...", "aria-label": "Search tanks" }, null, 512), [[H, O.value]])])]), t("div", Ge, [k(t("select", { "onUpdate:modelValue": e[2] || (e[2] = s => q.value = s), class: "form-select form-select-solid w-150px", "data-control": "select2", "data-hide-search": "true", "aria-label": "Filter by station" }, [e[34] || (e[34] = t("option", { value: "" }, "All Stations", -1)), (u(!0), c(V, null, j(mt.value, s => (u(), c("option", { key: s.StationID, value: s.StationID }, n(s.StationName), 9, We))), 128))], 512), [[P, q.value]]), k(t("select", { "onUpdate:modelValue": e[3] || (e[3] = s => R.value = s), class: "form-select form-select-solid w-125px", "data-control": "select2", "data-hide-search": "true", "aria-label": "Filter by status" }, e[35] || (e[35] = [t("option", { value: "" }, "All Status", -1), t("option", { value: "Active" }, "Active", -1), t("option", { value: "Inactive" }, "Inactive", -1), t("option", { value: "Maintenance" }, "Maintenance", -1)]), 512), [[P, R.value]]), t("button", { onClick: st, class: "btn btn-primary" }, e[36] || (e[36] = [t("i", { class: "ki-duotone ki-plus fs-2" }, [t("span", { class: "path1" }), t("span", { class: "path2" })], -1), U(" Add Tank ")]))])]), t("div", Ye, [t("div", Ke, [z.value && !p.value.length ? (u(), c("div", He, e[37] || (e[37] = [t("div", { class: "d-flex justify-content-center my-10" }, [t("div", { class: "spinner-border text-primary", role: "status" }, [t("span", { class: "visually-hidden" }, "Loading...")])], -1)]))) : x("", !0), !z.value && !Z.value.length ? (u(), c("div", Qe, [t("div", { class: "text-center my-10" }, [e[39] || (e[39] = y('<i class="ki-duotone ki-oil-barrel fs-5tx text-gray-300 mb-5" data-v-4ab2247c><span class="path1" data-v-4ab2247c></span><span class="path2" data-v-4ab2247c></span></i><div class="fw-semibold fs-3 text-gray-600" data-v-4ab2247c>No tanks found</div><div class="text-gray-500 mt-3" data-v-4ab2247c>Try adjusting your search or filters</div>', 3)), t("button", { onClick: st, class: "btn btn-primary mt-5" }, e[38] || (e[38] = [t("i", { class: "ki-duotone ki-plus fs-2" }, [t("span", { class: "path1" }), t("span", { class: "path2" })], -1), U(" Add Your First Tank ")]))])])) : x("", !0), (u(!0), c(V, null, j(Z.value, s => (u(), c("div", { key: s.TankID, class: "col-12 col-md-6 col-xl-4" }, [t("div", { class: g(["card h-100", s.Status === "Active" ? "card-bordered border-success" : s.Status === "Maintenance" ? "card-bordered border-warning" : "card-bordered"]) }, [t("div", Je, [t("div", { class: g(["ribbon-label", gt(s.Status)]) }, n(s.Status), 3), t("h3", Xe, [t("div", Ze, [t("div", ta, [t("span", { class: g(["symbol-label", wt(s.ProductID)]) }, e[40] || (e[40] = [t("i", { class: "ki-duotone ki-oil-barrel fs-1 text-white" }, [t("span", { class: "path1" }), t("span", { class: "path2" })], -1)]), 2)]), t("div", ea, [t("span", aa, n(s.TankName), 1), t("span", sa, n(W(s.StationID)), 1)])])])]), t("div", la, [t("div", oa, [t("div", na, [t("div", ia, [e[41] || (e[41] = t("span", { class: "text-muted fw-semibold" }, "Product", -1)), t("div", ra, [t("span", { class: g(["bullet bullet-dot me-2", kt(s.ProductID)]) }, null, 2), t("span", da, n(Y(s.ProductID)), 1)])]), t("div", ca, [e[42] || (e[42] = t("span", { class: "text-muted fw-semibold text-end" }, "Capacity", -1)), t("span", ua, n(et(s.Capacity)) + "L", 1)])]), t("div", null, [t("div", va, [t("span", pa, "Current Level: " + n(et(s.CurrentLevel)) + "L", 1), t("span", { class: g(["fw-bold fs-6", xt(s)]) }, n(I(s)) + "%", 3)]), t("div", fa, [t("div", { class: g(["h-8px rounded", yt(s)]), style: jt({ width: I(s) + "%" }), role: "progressbar", "aria-valuenow": I(s), "aria-valuemin": "0", "aria-valuemax": "100" }, null, 14, ma)])]), t("div", ba, [t("div", ha, [e[43] || (e[43] = t("span", { class: "text-muted fw-semibold" }, "Last Filled", -1)), t("span", ga, n(dt(s.LastFilledDate)), 1)]), t("div", ya, [e[44] || (e[44] = t("span", { class: "text-muted fw-semibold text-end" }, "Created", -1)), t("span", xa, n(dt(s.CreatedAt)), 1)])])])]), t("div", wa, [t("button", { onClick: i => Dt(s), class: "btn btn-light btn-active-light-primary btn-sm me-2" }, e[45] || (e[45] = [t("i", { class: "ki-duotone ki-pencil fs-3" }, [t("span", { class: "path1" }), t("span", { class: "path2" })], -1), U(" Edit ")]), 8, ka), t("button", { onClick: i => Ft(s), class: "btn btn-light btn-active-light-danger btn-sm" }, e[46] || (e[46] = [y('<i class="ki-duotone ki-trash fs-3" data-v-4ab2247c><span class="path1" data-v-4ab2247c></span><span class="path2" data-v-4ab2247c></span><span class="path3" data-v-4ab2247c></span><span class="path4" data-v-4ab2247c></span><span class="path5" data-v-4ab2247c></span></i> Delete ', 2)]), 8, _a)])], 2)]))), 128))]), Z.value.length ? (u(), c("div", Ca, [t("div", Sa, " Showing " + n(X.value + 1) + " to " + n(Math.min(ot.value, G.value.length)) + " of " + n(G.value.length) + " tanks ", 1), t("ul", Ia, [t("li", { class: g(["page-item", w.value === 1 ? "disabled" : ""]) }, [t("a", { onClick: Q(Nt, ["prevent"]), class: "page-link", href: "#", "aria-label": "Previous" }, e[47] || (e[47] = [t("i", { class: "ki-duotone ki-left fs-4" }, [t("span", { class: "path1" }), t("span", { class: "path2" })], -1)]))], 2), (u(!0), c(V, null, j(ut.value, s => (u(), c("li", { key: s, class: g(["page-item", s === w.value ? "active" : ""]) }, [t("a", { onClick: Q(i => zt(s), ["prevent"]), class: "page-link", href: "#" }, n(s), 9, Ta)], 2))), 128)), t("li", { class: g(["page-item", w.value === A.value ? "disabled" : ""]) }, [t("a", { onClick: Q(Mt, ["prevent"]), class: "page-link", href: "#", "aria-label": "Next" }, e[48] || (e[48] = [t("i", { class: "ki-duotone ki-right fs-4" }, [t("span", { class: "path1" }), t("span", { class: "path2" })], -1)]))], 2)])])) : x("", !0)])]), t("div", { class: "modal fade", id: "tankModal", tabindex: "-1", "aria-hidden": "true", ref_key: "tankModalRef", ref: E }, [t("div", Da, [t("div", La, [e[61] || (e[61] = y('<div class="modal-header pb-0 border-0 justify-content-end" data-v-4ab2247c><div class="btn btn-sm btn-icon btn-active-color-primary" data-bs-dismiss="modal" data-v-4ab2247c><i class="ki-duotone ki-cross fs-1" data-v-4ab2247c><span class="path1" data-v-4ab2247c></span><span class="path2" data-v-4ab2247c></span></i></div></div>', 1)), t("div", Pa, [t("div", Fa, [t("h1", za, n(S.value ? "Edit Tank" : "Add New Tank"), 1), t("div", Ma, n(S.value ? "Modify tank details and inventory levels" : "Enter tank details to add to your inventory"), 1)]), t("form", { onSubmit: Q(Pt, ["prevent"]), class: "form", novalidate: "" }, [t("div", Na, [e[50] || (e[50] = t("label", { class: "d-flex align-items-center fs-6 fw-semibold mb-2" }, [t("span", { class: "required" }, "Tank Name"), t("i", { class: "fas fa-exclamation-circle ms-2 fs-7", "data-bs-toggle": "tooltip", title: "Specify a unique tank name" })], -1)), k(t("input", { "onUpdate:modelValue": e[4] || (e[4] = s => r.value.TankName = s), type: "text", class: g(["form-control form-control-solid", { "is-invalid": v.value.TankName }]), placeholder: "Enter tank name", name: "tank-name" }, null, 2), [[H, r.value.TankName]]), v.value.TankName ? (u(), c("div", Ea, n(v.value.TankName), 1)) : x("", !0)]), t("div", Aa, [t("div", Ba, [e[52] || (e[52] = t("label", { class: "d-flex align-items-center fs-6 fw-semibold mb-2" }, [t("span", { class: "required" }, "Station")], -1)), k(t("select", { "onUpdate:modelValue": e[5] || (e[5] = s => r.value.StationID = s), class: g(["form-select form-select-solid", { "is-invalid": v.value.StationID }]), name: "station" }, [e[51] || (e[51] = t("option", { value: "" }, "Select Station", -1)), (u(!0), c(V, null, j($.value, s => (u(), c("option", { key: s.StationID, value: s.StationID }, n(s.StationName), 9, Ua))), 128))], 2), [[P, r.value.StationID]]), v.value.StationID ? (u(), c("div", Va, n(v.value.StationID), 1)) : x("", !0)]), t("div", ja, [e[54] || (e[54] = t("label", { class: "d-flex align-items-center fs-6 fw-semibold mb-2" }, [t("span", { class: "required" }, "Product")], -1)), k(t("select", { "onUpdate:modelValue": e[6] || (e[6] = s => r.value.ProductID = s), class: g(["form-select form-select-solid", { "is-invalid": v.value.ProductID }]), name: "product" }, [e[53] || (e[53] = t("option", { value: "" }, "Select Product", -1)), (u(!0), c(V, null, j(ht.value, s => (u(), c("option", { key: s.ProductID, value: s.ProductID }, n(s.Name), 9, $a))), 128))], 2), [[P, r.value.ProductID]]), v.value.ProductID ? (u(), c("div", Oa, n(v.value.ProductID), 1)) : x("", !0)])]), t("div", qa, [t("div", Ra, [e[55] || (e[55] = t("label", { class: "d-flex align-items-center fs-6 fw-semibold mb-2" }, [t("span", { class: "required" }, "Capacity (L)")], -1)), k(t("input", { "onUpdate:modelValue": e[7] || (e[7] = s => r.value.Capacity = s), type: "number", class: g(["form-control form-control-solid", { "is-invalid": v.value.Capacity }]), placeholder: "Enter capacity in liters", name: "capacity", min: "0" }, null, 2), [[H, r.value.Capacity, void 0, { number: !0 }]]), v.value.Capacity ? (u(), c("div", Ga, n(v.value.Capacity), 1)) : x("", !0)]), t("div", Wa, [e[56] || (e[56] = t("label", { class: "d-flex align-items-center fs-6 fw-semibold mb-2" }, [t("span", { class: "required" }, "Current Level (L)")], -1)), k(t("input", { "onUpdate:modelValue": e[8] || (e[8] = s => r.value.CurrentLevel = s), type: "number", class: g(["form-control form-control-solid", { "is-invalid": v.value.CurrentLevel }]), placeholder: "Enter current level in liters", name: "current-level", min: "0" }, null, 2), [[H, r.value.CurrentLevel, void 0, { number: !0 }]]), v.value.CurrentLevel ? (u(), c("div", Ya, n(v.value.CurrentLevel), 1)) : x("", !0)])]), t("div", Ka, [e[58] || (e[58] = t("label", { class: "d-flex align-items-center fs-6 fw-semibold mb-2" }, [t("span", { class: "required" }, "Status")], -1)), k(t("select", { "onUpdate:modelValue": e[9] || (e[9] = s => r.value.Status = s), class: g(["form-select form-select-solid", { "is-invalid": v.value.Status }]), name: "status" }, e[57] || (e[57] = [t("option", { value: "Active" }, "Active", -1), t("option", { value: "Inactive" }, "Inactive", -1), t("option", { value: "Maintenance" }, "Maintenance", -1)]), 2), [[P, r.value.Status]]), v.value.Status ? (u(), c("div", Ha, n(v.value.Status), 1)) : x("", !0)]), t("div", Qa, [e[60] || (e[60] = t("button", { type: "button", class: "btn btn-light me-3", "data-bs-dismiss": "modal" }, " Cancel ", -1)), t("button", { type: "submit", class: "btn btn-primary", disabled: M.value }, [M.value ? x("", !0) : (u(), c("span", Xa, n(S.value ? "Update Tank" : "Save Tank"), 1)), M.value ? (u(), c("span", Za, e[59] || (e[59] = [U(" Please wait... "), t("span", { class: "spinner-border spinner-border-sm align-middle ms-2" }, null, -1)]))) : x("", !0)], 8, Ja)])], 32)])])])], 512)])) } }, ls = Et(ts, [["__scopeId", "data-v-4ab2247c"]]); export { ls as default };
