import { _ as Tt, r as k, c as V, o as xt, d as g, e as t, g as B, f as q, i as O, w as z, j as Q, F as H, k as M, t as u, n as St, S as y, p, h as $ } from "./index-Fk_fMhvq.js"; import { a as _t } from "./index-Dq7h7Pqt.js"; const $t = { class: "d-flex flex-column gap-5" }, It = { class: "d-flex flex-wrap align-items-center justify-content-between gap-3" }, Dt = { class: "d-flex gap-2" }, Ct = ["disabled"], At = { class: "card card-flush" }, Nt = { class: "card-body py-4" }, Ft = { class: "row g-3 align-items-center" }, Lt = { class: "col-12 col-md-4" }, Ut = { class: "col-12 col-md-4" }, Bt = { class: "col-12 col-md-4" }, Et = ["value"], Rt = { class: "row g-5" }, Ot = { class: "col-12" }, Ht = { class: "row g-3" }, Mt = { class: "col-6 col-md-3" }, Gt = { class: "card card-flush bg-primary" }, jt = { class: "card-body text-center" }, Vt = { class: "text-white fs-2 fw-bold" }, qt = { class: "col-6 col-md-3" }, zt = { class: "card card-flush bg-success" }, Qt = { class: "card-body text-center" }, Xt = { class: "text-white fs-2 fw-bold" }, Jt = { class: "col-6 col-md-3" }, Kt = { class: "card card-flush bg-info" }, Wt = { class: "card-body text-center" }, Yt = { class: "text-white fs-2 fw-bold" }, Zt = { class: "col-6 col-md-3" }, te = { class: "card card-flush bg-warning" }, ee = { class: "card-body text-center" }, se = { class: "text-white fs-2 fw-bold" }, oe = { class: "col-12 col-lg-4" }, ne = { class: "card card-flush" }, ae = { class: "card-body" }, le = { class: "col-12 col-lg-4" }, ie = { class: "card card-flush" }, re = { class: "card-body" }, ce = { class: "col-12 col-lg-4" }, de = { class: "card card-flush" }, ue = { class: "card-body" }, me = { class: "card card-flush d-none d-lg-block" }, ve = { class: "card-body p-0" }, ge = { class: "table-responsive" }, pe = { class: "table table-hover align-middle gs-2" }, fe = { key: 0 }, he = { key: 1 }, be = { class: "ps-4" }, ye = { class: "d-flex align-items-center" }, Pe = { class: "symbol symbol-40px me-3" }, ke = { class: "symbol-label bg-light-primary" }, we = { class: "fw-bold text-gray-900" }, Te = { class: "text-muted fs-7" }, xe = { class: "fw-semibold" }, Se = { class: "text-muted fs-7" }, _e = { class: "fw-semibold" }, $e = { class: "text-muted fs-7" }, Ie = { key: 0 }, De = { key: 1 }, Ce = { key: 2 }, Ae = { class: "fw-semibold" }, Ne = { key: 0, class: "text-muted fs-7" }, Fe = { class: "text-center pe-4" }, Le = { class: "btn-group btn-group-sm" }, Ue = ["onClick"], Be = ["onClick"], Ee = ["onClick"], Re = { class: "d-block d-lg-none" }, Oe = { class: "row g-3" }, He = { key: 0, class: "col-12 text-center py-10" }, Me = { key: 1, class: "col-12 text-center py-10" }, Ge = { class: "card border" }, je = { class: "card-body p-4" }, Ve = { class: "d-flex justify-content-between align-items-start mb-3" }, qe = { class: "fw-bold mb-1" }, ze = { class: "text-muted fs-7" }, Qe = { class: "row g-2 mb-3" }, Xe = { class: "col-6" }, Je = { class: "fs-7 fw-semibold" }, Ke = { class: "col-6" }, We = { class: "row g-2 mb-3" }, Ye = { class: "col-6" }, Ze = { class: "fs-7" }, ts = { class: "col-6" }, es = { class: "d-flex gap-2" }, ss = ["onClick"], os = ["onClick"], ns = { key: 0, class: "card card-flush border-warning" }, as = { class: "card-body" }, ls = { class: "row g-3" }, is = { class: "alert alert-warning d-flex align-items-center" }, rs = { class: "fw-bold" }, cs = { class: "text-muted fs-7" }, ds = {
  __name: "MgtProducts", setup(us) {
    const h = k(!1), T = k([]), _ = k([]), x = k([]), S = k([]), C = k([]), P = k({ stationId: "", productType: "", status: "" }), A = k(null), N = k(null), F = k(null), d = _t.create({ baseURL: "https://backend.cloudfuelstationmis.com/api/records/v1", headers: { Authorization: `Bearer ${localStorage.getItem("jwt")}`, "Content-Type": "application/json" }, timeout: 1e4 }), E = V(() => { const e = T.value.length, s = new Set(x.value.map(n => n.ProductID).filter(n => n)), o = new Set(S.value.map(n => n.ProductID).filter(n => n)), i = new Set([...s, ...o]); return { totalProducts: e, tankedProducts: s.size, nonTankedProducts: o.size, unassignedProducts: e - i.size } }), nt = V(() => { let e = T.value; return P.value.productType && (e = e.filter(s => s.ProductType === P.value.productType)), P.value.status && (e = e.filter(s => s.Status === P.value.status)), e }), I = V(() => nt.value.map(e => { const s = x.value.filter(i => i.ProductID == e.ProductID), o = S.value.filter(i => i.ProductID == e.ProductID); return { ...e, tankAssignments: s, inventoryAssignments: o, totalAssignments: s.length + o.length, assignmentType: s.length > 0 ? "Tanked" : o.length > 0 ? "Non-Tanked" : "Unassigned" } })), G = async () => { try { const e = await d.get("/Products"); T.value = e.data.records || [] } catch (e) { console.error("Failed to load products:", e), w("Failed to load products") } }, at = async () => { try { const e = await d.get("/Stations"); _.value = e.data.records || [] } catch (e) { console.error("Failed to load stations:", e), w("Failed to load stations") } }, X = async () => { try { const e = await d.get("/Tanks"); x.value = e.data.records || [] } catch (e) { console.error("Failed to load tanks:", e), w("Failed to load tanks") } }, J = async () => { try { const e = await d.get("/StationInventory"); S.value = e.data.records || [] } catch (e) { console.error("Failed to load station inventory:", e), w("Failed to load station inventory") } }, j = () => { D(), L() }, K = async () => { h.value = !0; try { await Promise.all([G(), at(), X(), J()]), D(), await St(), W(), U("Data refreshed successfully") } finally { h.value = !1 } }, D = () => { C.value = [], T.value.forEach(e => { if (!(x.value.some(o => o.ProductID == e.ProductID) || S.value.some(o => o.ProductID == e.ProductID)) && e.Status === "Active" && C.value.push({ id: `unassigned-${e.ProductID}`, title: `Unassigned Product - ${e.Name}`, message: "This active product is not assigned to any station" }), e.ReorderLevel) { const o = S.value.filter(i => i.ProductID == e.ProductID).reduce((i, n) => i + parseFloat(n.CurrentStock || 0), 0); o <= parseFloat(e.ReorderLevel) && C.value.push({ id: `lowstock-${e.ProductID}`, title: `Low Stock - ${e.Name}`, message: `Stock level (${o}) is at or below reorder level (${e.ReorderLevel})` }) } }) }, W = () => { if (typeof ApexCharts > "u") { console.warn("ApexCharts not loaded, skipping charts"); return } A.value && (A.value.innerHTML = ""), N.value && (N.value.innerHTML = ""), F.value && (F.value.innerHTML = ""), lt(), it(), rt() }, lt = () => { if (!(!A.value || T.value.length === 0)) try { const e = T.value.reduce((n, a) => (n[a.ProductType] = (n[a.ProductType] || 0) + 1, n), {}), s = Object.values(e).filter(n => !isNaN(n) && n > 0), o = Object.keys(e).filter(n => e[n] > 0); if (s.length === 0) return; const i = { series: s, chart: { type: "donut", height: 250 }, labels: o, colors: ["#009EF7", "#50CD89", "#FFC700", "#F1416C"], legend: { position: "bottom" }, dataLabels: { enabled: !0 } }; new ApexCharts(A.value, i).render() } catch (e) { console.error("Error rendering product distribution chart:", e) } }, it = () => { if (!(!N.value || I.value.length === 0)) try { const e = I.value.reduce((n, a) => (n[a.assignmentType] = (n[a.assignmentType] || 0) + 1, n), {}), s = Object.values(e).filter(n => !isNaN(n) && n > 0), o = Object.keys(e).filter(n => e[n] > 0); if (s.length === 0) return; const i = { series: s, chart: { type: "pie", height: 250 }, labels: o, colors: ["#50CD89", "#009EF7", "#FFC700"], legend: { position: "bottom" }, dataLabels: { enabled: !0 } }; new ApexCharts(N.value, i).render() } catch (e) { console.error("Error rendering assignment status chart:", e) } }, rt = () => { if (!(!F.value || _.value.length === 0)) try { const e = _.value.map(o => { const i = x.value.filter(l => l.StationID == o.StationID).length, n = S.value.filter(l => l.StationID == o.StationID).length, a = i + n; return { x: o.StationName.length > 10 ? o.StationName.substring(0, 10) + "..." : o.StationName, y: isNaN(a) ? 0 : a } }).filter(o => typeof o.y == "number"); if (e.length === 0) return; const s = { series: [{ name: "Products", data: e }], chart: { type: "bar", height: 250, toolbar: { show: !1 } }, colors: ["#009EF7"], xaxis: { type: "category" }, dataLabels: { enabled: !0 } }; new ApexCharts(F.value, s).render() } catch (e) { console.error("Error rendering station coverage chart:", e) } }, L = () => { setTimeout(() => { W() }, 100) }, ct = e => ({ Fuel: "ki-duotone ki-oil-barrel", Lubricant: "ki-duotone ki-drop", Gas: "ki-duotone ki-gas-stove", Other: "ki-duotone ki-package" })[e] || "ki-duotone ki-package", Y = e => ({ Fuel: "badge badge-light-primary", Lubricant: "badge badge-light-success", Gas: "badge badge-light-warning", Other: "badge badge-light-info" })[e] || "badge badge-light-secondary", Z = e => ({ Tanked: "badge badge-success", "Non-Tanked": "badge badge-info", Unassigned: "badge badge-warning" })[e] || "badge badge-secondary", tt = e => e === "Active" ? "badge badge-success" : "badge badge-secondary", et = e => Number(e || 0).toLocaleString(), dt = e => { try { return e.tankAssignments.length > 0 ? e.tankAssignments.reduce((s, o) => s + parseFloat(o.CurrentLevel || 0), 0).toFixed(0) : e.inventoryAssignments.reduce((s, o) => s + parseFloat(o.CurrentStock || 0), 0).toFixed(0) } catch { return "0" } }, ut = e => e === "Fuel" ? "L" : e === "Gas" ? "units" : "L", mt = e => { const s = _.value.find(o => o.StationID == e); return s ? s.StationName : "Unknown Station" }, vt = async () => {
      const { value: e } = await y.fire({
        title: "Create New Product", html: `
      <div class="text-start">
        <div class="mb-3">
          <label class="form-label">Product Name</label>
          <input id="product-name" type="text" class="form-control" placeholder="Enter product name">
        </div>
        <div class="mb-3">
          <label class="form-label">Product Type</label>
          <select id="product-type" class="form-control">
            <option value="Fuel">Fuel</option>
            <option value="Lubricant">Lubricant</option>
            <option value="Gas">Gas</option>
            <option value="Other">Other</option>
          </select>
        </div>
        <div class="mb-3">
          <label class="form-label">Description</label>
          <textarea id="description" class="form-control" rows="3" placeholder="Product description"></textarea>
        </div>
        <div class="mb-3">
          <label class="form-label">Unit Price (UGX)</label>
          <input id="unit-price" type="number" class="form-control" placeholder="Enter unit price">
        </div>
        <div class="mb-3">
          <label class="form-label">Tax Rate (%)</label>
          <input id="tax-rate" type="number" class="form-control" value="18" placeholder="Tax rate">
        </div>
        <div class="mb-3">
          <label class="form-label">Reorder Level</label>
          <input id="reorder-level" type="number" class="form-control" placeholder="Reorder level (optional)">
        </div>
      </div>
    `, width: "600px", focusConfirm: !1, showCancelButton: !0, confirmButtonText: "Create Product", cancelButtonText: "Cancel", preConfirm: () => { const s = document.getElementById("product-name").value, o = document.getElementById("product-type").value, i = document.getElementById("description").value, n = document.getElementById("unit-price").value, a = document.getElementById("tax-rate").value, l = document.getElementById("reorder-level").value; return !s || !n ? (y.showValidationMessage("Please fill in product name and unit price"), !1) : { name: s, productType: o, description: i, unitPrice: Number(n), taxRate: Number(a) || 18, reorderLevel: l ? Number(l) : null } }
      }); e && await gt(e)
    }, gt = async e => { try { h.value = !0, await d.post("/Products", { ProductType: e.productType, Name: e.name, Description: e.description, UnitPrice: e.unitPrice, TaxRate: e.taxRate, ReorderLevel: e.reorderLevel, Status: "Active" }), await G(), D(), L(), U(`Product "${e.name}" created successfully`) } catch (s) { console.error("Failed to create product:", s), w("Failed to create product") } finally { h.value = !1 } }, st = async e => {
      const { value: s } = await y.fire({
        title: `Edit ${e.Name}`, html: `
      <div class="text-start">
        <div class="mb-3">
          <label class="form-label">Product Name</label>
          <input id="product-name" type="text" class="form-control" value="${e.Name}">
        </div>
        <div class="mb-3">
          <label class="form-label">Product Type</label>
          <select id="product-type" class="form-control">
            <option value="Fuel" ${e.ProductType === "Fuel" ? "selected" : ""}>Fuel</option>
            <option value="Lubricant" ${e.ProductType === "Lubricant" ? "selected" : ""}>Lubricant</option>
            <option value="Gas" ${e.ProductType === "Gas" ? "selected" : ""}>Gas</option>
            <option value="Other" ${e.ProductType === "Other" ? "selected" : ""}>Other</option>
          </select>
        </div>
        <div class="mb-3">
          <label class="form-label">Description</label>
          <textarea id="description" class="form-control" rows="3">${e.Description || ""}</textarea>
        </div>
        <div class="mb-3">
          <label class="form-label">Unit Price (UGX)</label>
          <input id="unit-price" type="number" class="form-control" value="${e.UnitPrice}">
        </div>
        <div class="mb-3">
          <label class="form-label">Tax Rate (%)</label>
          <input id="tax-rate" type="number" class="form-control" value="${e.TaxRate}">
        </div>
        <div class="mb-3">
          <label class="form-label">Reorder Level</label>
          <input id="reorder-level" type="number" class="form-control" value="${e.ReorderLevel || ""}">
        </div>
        <div class="mb-3">
          <label class="form-label">Status</label>
          <select id="status" class="form-control">
            <option value="Active" ${e.Status === "Active" ? "selected" : ""}>Active</option>
            <option value="Inactive" ${e.Status === "Inactive" ? "selected" : ""}>Inactive</option>
          </select>
        </div>
      </div>
    `, width: "600px", showCancelButton: !0, confirmButtonText: "Save Changes", cancelButtonText: "Cancel", preConfirm: () => { const o = document.getElementById("product-name").value, i = document.getElementById("product-type").value, n = document.getElementById("description").value, a = document.getElementById("unit-price").value, l = document.getElementById("tax-rate").value, r = document.getElementById("reorder-level").value, f = document.getElementById("status").value; return !o || !a ? (y.showValidationMessage("Please fill in product name and unit price"), !1) : { name: o, productType: i, description: n, unitPrice: Number(a), taxRate: Number(l), reorderLevel: r ? Number(r) : null, status: f } }
      }); s && await pt(e.ProductID, s)
    }, pt = async (e, s) => { var o, i, n, a, l, r, f; try { h.value = !0; const b = { ProductType: s.productType, Name: s.name, Description: s.description, UnitPrice: s.unitPrice, TaxRate: s.taxRate, ReorderLevel: s.reorderLevel, Status: s.status, UpdatedAt: new Date().toISOString() }; let c = !1, v = null; try { console.log("Trying PATCH /Products/" + e), await d.patch(`/Products/${e}`, b), console.log("✅ PATCH method succeeded"), c = !0 } catch (m) { console.log("❌ PATCH failed:", (o = m.response) == null ? void 0 : o.status), v = m } if (!c) try { console.log("Trying POST /Products/" + e), await d.post(`/Products/${e}`, b), console.log("✅ POST method succeeded"), c = !0 } catch (m) { console.log("❌ POST failed:", (i = m.response) == null ? void 0 : i.status), v = m } if (!c) try { console.log("Trying PUT /Products/records/" + e), await d.put(`/Products/records/${e}`, b), console.log("✅ PUT records method succeeded"), c = !0 } catch (m) { console.log("❌ PUT records failed:", (n = m.response) == null ? void 0 : n.status), v = m } if (!c) try { console.log("Trying PUT /Products?id=" + e), await d.put(`/Products?id=${e}`, b), console.log("✅ PUT query method succeeded"), c = !0 } catch (m) { console.log("❌ PUT query failed:", (a = m.response) == null ? void 0 : a.status), v = m } if (!c) try { console.log("Trying original PUT /Products/" + e), await d.put(`/Products/${e}`, b), console.log("✅ Original PUT method succeeded"), c = !0 } catch (m) { console.log("❌ Original PUT failed:", (l = m.response) == null ? void 0 : l.status), v = m } if (!c) throw console.error("All update methods failed. Last error:", v), v; await G(), D(), L(), U("Product updated successfully") } catch (b) { console.error("Failed to update product:", b); const c = ((r = b.response) == null ? void 0 : r.status) === 405 ? "Update method not supported by server. Check console for details." : `Failed to update product (${((f = b.response) == null ? void 0 : f.status) || "Network Error"})`; w(c) } finally { h.value = !1 } }, ot = async e => { ["Fuel"].includes(e.ProductType) ? await ft(e) : await bt(e) }, ft = async e => {
      const s = x.value.filter(a => a.ProductID == e.ProductID).map(a => a.TankID); let i = _.value.map(a => { const l = x.value.filter(r => r.StationID == a.StationID); return { station: a, tanks: l } }).map(a => `
    <div class="mb-4">
      <h6 class="fw-bold text-primary">${a.station.StationName}</h6>
      ${a.tanks.length === 0 ? '<p class="text-muted small">No tanks available</p>' : ""}
      ${a.tanks.map(l => `
        <div class="form-check">
          <input class="form-check-input" type="checkbox" value="${l.TankID}"
                 id="tank-${l.TankID}" ${s.includes(l.TankID) ? "checked" : ""}
                 ${l.ProductID && l.ProductID != e.ProductID ? "disabled" : ""}>
          <label class="form-check-label" for="tank-${l.TankID}">
            ${l.TankName} (${l.Capacity}L capacity)
            ${l.ProductID && l.ProductID != e.ProductID ? ' - <span class="text-danger">Assigned to another product</span>' : ""}
          </label>
        </div>
      `).join("")}
    </div>
  `).join(""); const { value: n } = await y.fire({
        title: `Manage Tank Assignments - ${e.Name}`, html: `
      <div class="text-start">
        <p class="text-muted mb-4">Select tanks to assign this product to:</p>
        ${i}
      </div>
    `, width: "700px", showCancelButton: !0, confirmButtonText: "Save Assignments", cancelButtonText: "Cancel", preConfirm: () => { const a = document.querySelectorAll('input[type="checkbox"]:checked:not(:disabled)'); return Array.from(a).map(l => l.value) }
      }); n !== void 0 && await ht(e.ProductID, n)
    }, ht = async (e, s) => { try { h.value = !0; const i = x.value.filter(r => r.ProductID == e).map(r => r.TankID.toString()), n = s.filter(r => !i.includes(r)), a = i.filter(r => !s.includes(r)); console.log("🔧 Tank assignment changes:", { tanksToAssign: n, tanksToUnassign: a, productId: e }); const l = async (r, f) => { var c; const b = [{ name: "PATCH", fn: () => d.patch(`/Tanks/${r}`, f) }, { name: "POST", fn: () => d.post(`/Tanks/${r}`, f) }, { name: "PUT Records", fn: () => d.put(`/Tanks/records/${r}`, f) }, { name: "PUT Query", fn: () => d.put(`/Tanks?id=${r}`, f) }, { name: "PUT", fn: () => d.put(`/Tanks/${r}`, f) }]; for (const v of b) try { return console.log(`Trying ${v.name} for tank ${r}`), await v.fn(), console.log(`✅ ${v.name} succeeded for tank ${r}`), !0 } catch (m) { console.log(`❌ ${v.name} failed for tank ${r}:`, (c = m.response) == null ? void 0 : c.status); continue } throw new Error(`Failed to update tank ${r} - all methods failed`) }; for (const r of n) try { console.log(`🔗 Assigning product ${e} to tank ${r}`), await l(r, { ProductID: parseInt(e), UpdatedAt: new Date().toISOString() }), console.log(`✅ Tank ${r} assigned to product ${e}`) } catch (f) { console.error(`❌ Failed to assign tank ${r}:`, f.message) } for (const r of a) try { console.log(`🔓 Unassigning tank ${r} from product ${e}`), await l(r, { ProductID: null, UpdatedAt: new Date().toISOString() }), console.log(`✅ Tank ${r} unassigned from product ${e}`) } catch (f) { console.error(`❌ Failed to unassign tank ${r}:`, f.message) } console.log("🔄 Reloading tank data..."), await X(), D(), L(), U("Tank assignments updated successfully") } catch (o) { console.error("💥 Failed to update tank assignments:", o), w("Failed to update tank assignments") } finally { h.value = !1 } }, bt = async e => {
      const s = S.value.filter(n => n.ProductID == e.ProductID), o = _.value.map(n => {
        const a = s.find(l => l.StationID == n.StationID); return `
      <div class="form-check mb-2">
        <input class="form-check-input" type="checkbox" value="${n.StationID}"
               id="station-${n.StationID}" ${a ? "checked" : ""}>
        <label class="form-check-label" for="station-${n.StationID}">
          <strong>${n.StationName}</strong>
          ${a ? ` <span class="text-muted">(Current stock: ${a.CurrentStock})</span>` : ""}
        </label>
      </div>
    `}).join(""), { value: i } = await y.fire({
          title: `Manage Station Assignments - ${e.Name}`, html: `
      <div class="text-start">
        <p class="text-muted mb-4">Select stations to assign this product to:</p>
        ${o}
        <hr class="my-4">
        <div>
          <label class="form-label">Initial Stock Level (for new assignments)</label>
          <input id="initial-stock" type="number" class="form-control" value="0" placeholder="Initial stock level">
        </div>
      </div>
    `, width: "600px", showCancelButton: !0, confirmButtonText: "Save Assignments", cancelButtonText: "Cancel", preConfirm: () => { const n = document.querySelectorAll('input[type="checkbox"]:checked'), a = Array.from(n).map(r => r.value), l = document.getElementById("initial-stock").value; return { selectedStations: a, initialStock: Number(l) || 0 } }
        }); i && await yt(e.ProductID, i.selectedStations, i.initialStock)
    }, yt = async (e, s, o) => { var i, n; try { h.value = !0; const a = S.value.filter(c => c.ProductID == e), l = a.map(c => c.StationID.toString()), r = s.filter(c => !l.includes(c)), f = l.filter(c => !s.includes(c)); console.log("📊 Assignment changes:", { stationsToAdd: r, stationsToRemove: f, productId: e, initialStock: o }); const b = async c => { var m; const v = [{ name: "DELETE", fn: () => d.delete(`/StationInventory/${c}`) }, { name: "POST Delete", fn: () => d.post(`/StationInventory/${c}/delete`) }, { name: "PUT Soft Delete", fn: () => d.put(`/StationInventory/${c}`, { deleted: !0 }) }, { name: "PATCH Soft Delete", fn: () => d.patch(`/StationInventory/${c}`, { deleted: !0 }) }]; for (const R of v) try { return console.log(`Trying ${R.name} for inventory ${c}`), await R.fn(), console.log(`✅ ${R.name} succeeded for inventory ${c}`), !0 } catch (wt) { console.log(`❌ ${R.name} failed for inventory ${c}:`, (m = wt.response) == null ? void 0 : m.status); continue } throw new Error(`Failed to delete station inventory ${c} - all methods failed`) }; for (const c of r) try { console.log(`📝 Creating station inventory for station ${c}`), await d.post("/StationInventory", { StationID: parseInt(c), ProductID: parseInt(e), CurrentStock: o.toString(), LastUpdated: new Date().toISOString() }), console.log(`✅ Station inventory created for station ${c}`) } catch (v) { throw console.error(`❌ Failed to create station inventory for station ${c}:`, ((i = v.response) == null ? void 0 : i.data) || v.message), v } for (const c of f) { const v = a.find(m => m.StationID == c); if (v) try { console.log(`🗑️ Deleting station inventory ${v.InventoryID} for station ${c}`), await b(v.InventoryID), console.log(`✅ Station inventory deleted for station ${c}`) } catch (m) { console.warn(`❌ Failed to delete station inventory for station ${c}:`, m) } } console.log("🔄 Reloading station inventory data..."), await J(), D(), L(), U("Station assignments updated successfully") } catch (a) { console.error("💥 Failed to update station assignments:", a); const l = (n = a.response) != null && n.data ? `Server error: ${JSON.stringify(a.response.data)}` : a.message; w(`Failed to update station assignments: ${l}`) } finally { h.value = !1 } }, Pt = async e => {
      var s; try {
        console.log(`📊 Loading history for product ${e.ProductID}`); const o = [() => d.get(`/InventoryHistory?ProductID=${e.ProductID}&limit=20`), () => d.get(`/InventoryHistory?filter=ProductID=${e.ProductID}&limit=20`), () => d.get(`/InventoryHistory/${e.ProductID}`), () => d.get("/InventoryHistory", { params: { ProductID: e.ProductID, limit: 20 } })]; let i = [], n = !1; for (const l of o) try { console.log("Trying history query method..."); const r = await l(); i = r.data.records || r.data || [], n = !0, console.log(`✅ History loaded: ${i.length} records`); break } catch (r) { console.log("❌ History query failed:", (s = r.response) == null ? void 0 : s.status); continue } if (!n) { console.log("⚠️ Could not load history, showing message"), y.fire({ title: `${e.Name} History`, text: "Unable to load product history at this time", icon: "warning", width: "500px" }); return } if (i.length === 0) { y.fire({ title: `${e.Name} History`, text: "No recent history found", icon: "info", width: "500px" }); return } const a = `
      <div class="table-responsive">
        <table class="table table-sm">
          <thead>
            <tr>
              <th>Date</th>
              <th>Station</th>
              <th>Type</th>
              <th>Change</th>
              <th>Notes</th>
            </tr>
          </thead>
          <tbody>
            ${i.slice(0, 10).map(l => `
              <tr>
                <td>${l.ChangeDate ? new Date(l.ChangeDate).toLocaleDateString() : "N/A"}</td>
                <td>${mt(l.StationID) || "Unknown"}</td>
                <td>${l.ChangeType || "N/A"}</td>
                <td>${l.QuantityChange ? (l.QuantityChange > 0 ? "+" : "") + l.QuantityChange : "N/A"}</td>
                <td>${l.Notes || "-"}</td>
              </tr>
            `).join("")}
          </tbody>
        </table>
      </div>
    `; y.fire({ title: `${e.Name} - Recent History`, html: a, width: "900px", confirmButtonText: "Close" })
      } catch (o) { console.error("💥 Failed to load product history:", o), w("Failed to load product history") }
    }, kt = () => { y.fire({ title: "Bulk Assignment", text: "Bulk assignment functionality will be available in the next update", icon: "info", width: "500px" }) }, U = e => { y.fire({ title: "Success!", text: e, icon: "success", toast: !0, position: "top-end", timer: 3e3, showConfirmButton: !1 }) }, w = e => { y.fire({ title: "Error!", text: e, icon: "error", confirmButtonColor: "#f1416c", width: "500px" }) }; return window.debugAPI = async () => { var i; if (console.log("🔍 Testing API methods..."), T.value.length === 0) { console.log("❌ No products available for testing"); return } const e = T.value[0], s = { Status: e.Status }, o = [{ name: "GET Products", test: () => d.get("/Products") }, { name: "PATCH Product", test: () => d.patch(`/Products/${e.ProductID}`, s) }, { name: "POST Product", test: () => d.post(`/Products/${e.ProductID}`, s) }, { name: "PUT Product", test: () => d.put(`/Products/${e.ProductID}`, s) }, { name: "PUT Records", test: () => d.put(`/Products/records/${e.ProductID}`, s) }, { name: "PUT Query", test: () => d.put(`/Products?id=${e.ProductID}`, s) }]; for (const n of o) try { await n.test(), console.log(`✅ ${n.name}: SUCCESS`) } catch (a) { console.log(`❌ ${n.name}: FAILED (${((i = a.response) == null ? void 0 : i.status) || "Network Error"})`) } console.log("🔍 API testing complete. Check the logs above to see which methods work.") }, xt(async () => { console.log("🚀 Product Management loaded!"), console.log("💡 To debug API methods, run: window.debugAPI()"), console.log("🔍 This will test which HTTP methods your API supports"), await K() }), (e, s) => (p(), g("div", $t, [t("div", It, [s[5] || (s[5] = q('<div class="d-flex align-items-center gap-3" data-v-d6f8eceb><i class="ki-duotone ki-package fs-1 text-primary" data-v-d6f8eceb><span class="path1" data-v-d6f8eceb></span><span class="path2" data-v-d6f8eceb></span><span class="path3" data-v-d6f8eceb></span></i><div data-v-d6f8eceb><h1 class="fs-2 fw-bold text-gray-900 mb-0" data-v-d6f8eceb>Product Management</h1><p class="text-muted fs-6 mb-0" data-v-d6f8eceb>Manage products and their tank/station assignments</p></div></div>', 1)), t("div", Dt, [t("button", { onClick: K, class: "btn btn-sm btn-light", disabled: h.value }, s[3] || (s[3] = [t("i", { class: "ki-duotone ki-arrows-circle fs-4" }, [t("span", { class: "path1" }), t("span", { class: "path2" })], -1), t("span", { class: "d-none d-sm-inline" }, "Refresh", -1)]), 8, Ct), t("button", { onClick: vt, class: "btn btn-sm btn-primary" }, s[4] || (s[4] = [t("i", { class: "ki-duotone ki-plus fs-4" }, [t("span", { class: "path1" }), t("span", { class: "path2" })], -1), O(" Add Product ")]))])]), t("div", At, [t("div", Nt, [t("div", Ft, [t("div", Lt, [s[7] || (s[7] = t("label", { class: "form-label fs-7 fw-semibold" }, "Product Type", -1)), z(t("select", { "onUpdate:modelValue": s[0] || (s[0] = o => P.value.productType = o), onChange: j, class: "form-select form-select-sm" }, s[6] || (s[6] = [q('<option value="" data-v-d6f8eceb>All Product Types</option><option value="Fuel" data-v-d6f8eceb>Fuel</option><option value="Lubricant" data-v-d6f8eceb>Lubricants</option><option value="Gas" data-v-d6f8eceb>Gas</option><option value="Other" data-v-d6f8eceb>Other</option>', 5)]), 544), [[Q, P.value.productType]])]), t("div", Ut, [s[9] || (s[9] = t("label", { class: "form-label fs-7 fw-semibold" }, "Status", -1)), z(t("select", { "onUpdate:modelValue": s[1] || (s[1] = o => P.value.status = o), onChange: j, class: "form-select form-select-sm" }, s[8] || (s[8] = [t("option", { value: "" }, "All Status", -1), t("option", { value: "Active" }, "Active", -1), t("option", { value: "Inactive" }, "Inactive", -1)]), 544), [[Q, P.value.status]])]), t("div", Bt, [s[11] || (s[11] = t("label", { class: "form-label fs-7 fw-semibold" }, "Station", -1)), z(t("select", { "onUpdate:modelValue": s[2] || (s[2] = o => P.value.stationId = o), onChange: j, class: "form-select form-select-sm" }, [s[10] || (s[10] = t("option", { value: "" }, "All Stations", -1)), (p(!0), g(H, null, M(_.value, o => (p(), g("option", { key: o.StationID, value: o.StationID }, u(o.StationName), 9, Et))), 128))], 544), [[Q, P.value.stationId]])])])])]), t("div", Rt, [t("div", Ot, [t("div", Ht, [t("div", Mt, [t("div", Gt, [t("div", jt, [t("div", Vt, u(E.value.totalProducts), 1), s[12] || (s[12] = t("div", { class: "text-white opacity-75 fs-7" }, "Total Products", -1))])])]), t("div", qt, [t("div", zt, [t("div", Qt, [t("div", Xt, u(E.value.tankedProducts), 1), s[13] || (s[13] = t("div", { class: "text-white opacity-75 fs-7" }, "Tanked Products", -1))])])]), t("div", Jt, [t("div", Kt, [t("div", Wt, [t("div", Yt, u(E.value.nonTankedProducts), 1), s[14] || (s[14] = t("div", { class: "text-white opacity-75 fs-7" }, "Non-Tanked Products", -1))])])]), t("div", Zt, [t("div", te, [t("div", ee, [t("div", se, u(E.value.unassignedProducts), 1), s[15] || (s[15] = t("div", { class: "text-white opacity-75 fs-7" }, "Unassigned", -1))])])])])]), t("div", oe, [t("div", ne, [s[16] || (s[16] = t("div", { class: "card-header" }, [t("h3", { class: "card-title fw-bold" }, "Product Distribution")], -1)), t("div", ae, [t("div", { ref_key: "productDistributionChart", ref: A, style: { height: "250px" } }, null, 512)])])]), t("div", le, [t("div", ie, [s[17] || (s[17] = t("div", { class: "card-header" }, [t("h3", { class: "card-title fw-bold" }, "Assignment Status")], -1)), t("div", re, [t("div", { ref_key: "assignmentStatusChart", ref: N, style: { height: "250px" } }, null, 512)])])]), t("div", ce, [t("div", de, [s[18] || (s[18] = t("div", { class: "card-header" }, [t("h3", { class: "card-title fw-bold" }, "Station Coverage")], -1)), t("div", ue, [t("div", { ref_key: "stationCoverageChart", ref: F, style: { height: "250px" } }, null, 512)])])])]), t("div", me, [t("div", { class: "card-header" }, [s[20] || (s[20] = t("h3", { class: "card-title fw-bold" }, "Products & Assignments", -1)), t("div", { class: "card-toolbar" }, [t("button", { onClick: kt, class: "btn btn-sm btn-light me-2" }, s[19] || (s[19] = [t("i", { class: "ki-duotone ki-arrows-loop fs-4" }, [t("span", { class: "path1" }), t("span", { class: "path2" })], -1), O(" Bulk Assignment ")]))])]), t("div", ve, [t("div", ge, [t("table", pe, [s[26] || (s[26] = t("thead", { class: "bg-light" }, [t("tr", { class: "fw-bold text-muted" }, [t("th", { class: "ps-4" }, "Product"), t("th", null, "Type"), t("th", null, "Price"), t("th", null, "Assignment Type"), t("th", null, "Stations Assigned"), t("th", null, "Current Stock"), t("th", null, "Status"), t("th", { class: "text-center pe-4" }, "Actions")])], -1)), t("tbody", null, [h.value ? (p(), g("tr", fe, s[21] || (s[21] = [t("td", { colspan: "8", class: "text-center py-10" }, [t("div", { class: "spinner-border text-primary", role: "status" }), t("div", { class: "text-muted mt-2" }, "Loading products...")], -1)]))) : I.value.length === 0 ? (p(), g("tr", he, s[22] || (s[22] = [t("td", { colspan: "8", class: "text-center py-10" }, [t("div", { class: "text-muted" }, "No products found")], -1)]))) : (p(!0), g(H, { key: 2 }, M(I.value, o => (p(), g("tr", { key: o.ProductID, class: "border-bottom" }, [t("td", be, [t("div", ye, [t("div", Pe, [t("div", ke, [t("i", { class: $([ct(o.ProductType), "fs-2 text-primary"]) }, null, 2)])]), t("div", null, [t("div", we, u(o.Name), 1), t("div", Te, u(o.Description || "No description"), 1)])])]), t("td", null, [t("span", { class: $(Y(o.ProductType)) }, u(o.ProductType), 3)]), t("td", null, [t("div", xe, "UGX " + u(et(o.UnitPrice)), 1), t("div", Se, u(o.TaxRate) + "% tax", 1)]), t("td", null, [t("span", { class: $(Z(o.assignmentType)) }, u(o.assignmentType), 3)]), t("td", null, [t("div", _e, u(o.totalAssignments) + " assignments", 1), t("div", $e, [o.tankAssignments.length ? (p(), g("span", Ie, u(o.tankAssignments.length) + " tanks", 1)) : B("", !0), o.tankAssignments.length && o.inventoryAssignments.length ? (p(), g("span", De, ", ")) : B("", !0), o.inventoryAssignments.length ? (p(), g("span", Ce, u(o.inventoryAssignments.length) + " inventory", 1)) : B("", !0)])]), t("td", null, [t("div", Ae, u(dt(o)) + " " + u(ut(o.ProductType)), 1), o.ReorderLevel ? (p(), g("div", Ne, " Reorder: " + u(o.ReorderLevel), 1)) : B("", !0)]), t("td", null, [t("span", { class: $(tt(o.Status)) }, u(o.Status), 3)]), t("td", Fe, [t("div", Le, [t("button", { onClick: i => st(o), class: "btn btn-icon btn-light", title: "Edit Product" }, s[23] || (s[23] = [t("i", { class: "ki-duotone ki-pencil fs-5" }, [t("span", { class: "path1" }), t("span", { class: "path2" })], -1)]), 8, Ue), t("button", { onClick: i => ot(o), class: "btn btn-icon btn-light", title: "Manage Assignments" }, s[24] || (s[24] = [t("i", { class: "ki-duotone ki-setting-2 fs-5" }, [t("span", { class: "path1" }), t("span", { class: "path2" })], -1)]), 8, Be), t("button", { onClick: i => Pt(o), class: "btn btn-icon btn-light", title: "View History" }, s[25] || (s[25] = [t("i", { class: "ki-duotone ki-time fs-5" }, [t("span", { class: "path1" }), t("span", { class: "path2" })], -1)]), 8, Ee)])])]))), 128))])])])])]), t("div", Re, [t("div", Oe, [h.value ? (p(), g("div", He, s[27] || (s[27] = [t("div", { class: "spinner-border text-primary", role: "status" }, null, -1), t("div", { class: "text-muted mt-2" }, "Loading products...", -1)]))) : I.value.length === 0 ? (p(), g("div", Me, s[28] || (s[28] = [t("div", { class: "text-muted" }, "No products found", -1)]))) : (p(!0), g(H, { key: 2 }, M(I.value, o => (p(), g("div", { key: o.ProductID, class: "col-12" }, [t("div", Ge, [t("div", je, [t("div", Ve, [t("div", null, [t("h5", qe, u(o.Name), 1), t("div", ze, u(o.Description || "No description"), 1)]), t("span", { class: $(Y(o.ProductType)) }, u(o.ProductType), 3)]), t("div", Qe, [t("div", Xe, [s[29] || (s[29] = t("div", { class: "text-muted fs-8" }, "Price", -1)), t("div", Je, "UGX " + u(et(o.UnitPrice)), 1)]), t("div", Ke, [s[30] || (s[30] = t("div", { class: "text-muted fs-8" }, "Assignment Type", -1)), t("span", { class: $(Z(o.assignmentType)) }, u(o.assignmentType), 3)])]), t("div", We, [t("div", Ye, [s[31] || (s[31] = t("div", { class: "text-muted fs-8" }, "Assignments", -1)), t("div", Ze, u(o.totalAssignments) + " stations", 1)]), t("div", ts, [s[32] || (s[32] = t("div", { class: "text-muted fs-8" }, "Status", -1)), t("span", { class: $(tt(o.Status)) }, u(o.Status), 3)])]), t("div", es, [t("button", { onClick: i => st(o), class: "btn btn-sm btn-light flex-fill" }, s[33] || (s[33] = [t("i", { class: "ki-duotone ki-pencil fs-5 me-1" }, [t("span", { class: "path1" }), t("span", { class: "path2" })], -1), O(" Edit ")]), 8, ss), t("button", { onClick: i => ot(o), class: "btn btn-sm btn-primary flex-fill" }, s[34] || (s[34] = [t("i", { class: "ki-duotone ki-setting-2 fs-5 me-1" }, [t("span", { class: "path1" }), t("span", { class: "path2" })], -1), O(" Assignments ")]), 8, os)])])])]))), 128))])]), C.value.length > 0 ? (p(), g("div", ns, [s[36] || (s[36] = q('<div class="card-header bg-warning" data-v-d6f8eceb><h3 class="card-title text-white fw-bold" data-v-d6f8eceb><i class="ki-duotone ki-warning-2 fs-2 me-2" data-v-d6f8eceb><span class="path1" data-v-d6f8eceb></span><span class="path2" data-v-d6f8eceb></span><span class="path3" data-v-d6f8eceb></span></i> Product Alerts </h3></div>', 1)), t("div", as, [t("div", ls, [(p(!0), g(H, null, M(C.value, o => (p(), g("div", { key: o.id, class: "col-12 col-md-6" }, [t("div", is, [s[35] || (s[35] = t("i", { class: "ki-duotone ki-information-5 fs-2 me-3" }, [t("span", { class: "path1" }), t("span", { class: "path2" }), t("span", { class: "path3" })], -1)), t("div", null, [t("div", rs, u(o.title), 1), t("div", cs, u(o.message), 1)])])]))), 128))])])])) : B("", !0)]))
  }
}, gs = Tt(ds, [["__scopeId", "data-v-d6f8eceb"]]); export { gs as default };
