import { _ as dt, r as l, c as U, q as rt, o as ct, d as i, e as t, g as pt, t as d, h as y, i as m, w, v as x, f as b, F as J, k as q, S as R, p as r } from "./index-Fk_fMhvq.js"; const ut = { class: "d-flex flex-column gap-5 p-4" }, mt = { class: "card card-flush", style: { background: "linear-gradient(135deg, #007aff 0%, #005bbb 100%)" } }, gt = { class: "card-body p-6" }, vt = { class: "d-flex align-items-center justify-content-between" }, ft = { class: "d-flex align-items-center gap-4" }, bt = { class: "d-flex align-items-center gap-3 mt-2" }, ht = { class: "badge badge-white badge-lg" }, yt = { class: "text-white text-opacity-75 fs-8" }, wt = { class: "text-white text-opacity-90 fs-6 fw-semibold" }, xt = { class: "d-flex flex-column gap-2" }, Dt = ["disabled"], _t = {
  class: "card card-flush premium-card", style: {
    background: `linear-gradient(
          135deg,
          rgba(0, 122, 255, 0.1) 0%,
          rgba(0, 122, 255, 0.05) 100%
        )`, border: "2px solid rgba(0, 122, 255, 0.2)", "box-shadow": "0 8px 32px rgba(0, 122, 255, 0.1)"
  }
}, kt = { class: "card-body p-5 p-lg-8" }, Rt = { class: "row g-5 g-lg-8 align-items-end" }, St = { class: "col-12 col-lg-5" }, It = { class: "input-group input-group-lg premium-input-group" }, Ct = ["max"], Lt = { class: "col-12 col-lg-7" }, $t = { class: "d-flex flex-column flex-sm-row gap-3 gap-lg-4" }, Tt = { key: 0, class: "d-flex flex-column gap-4" }, Ut = { key: 1, class: "row g-5" }, Ft = { class: "card-header bg-light-gray-100 border-0" }, Nt = { class: "card-title d-flex align-items-center gap-3 w-100" }, Vt = { class: "flex-fill" }, Bt = { class: "fw-bolder fs-5 text-gray-900 mb-1" }, Wt = { class: "text-gray-600 fs-7 fw-semibold mb-2" }, Mt = { class: "d-flex gap-2" }, Pt = { class: "badge badge-light-primary fs-8 fw-bold" }, Ot = { class: "badge badge-light-info fs-8 fw-bold" }, Et = { class: "card-body p-5" }, At = { class: "mb-5" }, jt = { class: "row g-3 mb-4" }, Jt = { class: "col-4" }, qt = { class: "text-center p-3 bg-light-primary rounded" }, Yt = { class: "fs-5 fw-bold text-gray-900" }, zt = { class: "col-4" }, Kt = { class: "text-center p-3 bg-light-primary rounded" }, Gt = { class: "fs-5 fw-bold text-gray-900" }, Ht = { class: "col-4" }, Qt = { class: "text-center p-3 bg-light-success rounded" }, Xt = { class: "fs-5 fw-bold text-success" }, Zt = { class: "mb-5" }, ts = { class: "row g-3 mb-4" }, ss = { class: "col-6" }, es = { class: "input-group" }, as = ["onUpdate:modelValue", "placeholder"], os = { class: "col-6" }, ns = { class: "input-group" }, ls = ["onUpdate:modelValue", "placeholder"], is = { class: "col-6" }, ds = { class: "input-group" }, rs = ["onUpdate:modelValue", "placeholder"], cs = { class: "mb-5" }, ps = { class: "input-group input-group-lg" }, us = ["onUpdate:modelValue", "placeholder"], ms = { class: "d-flex gap-2 mt-4" }, gs = ["onClick", "disabled"], vs = { key: 0, class: "spinner-border spinner-border-sm me-2" }, fs = { key: 1, class: "ki-duotone ki-check-circle fs-2 me-2" }, bs = ["onClick"], hs = { key: 2, class: "card card-flush", style: { background: "linear-gradient(135deg, #1c1c1e 0%, #000000 100%)" } }, ys = { class: "card-body p-6" }, ws = { class: "row align-items-center" }, xs = { class: "col-md-6" }, Ds = { class: "d-flex gap-2 flex-wrap justify-content-md-end" }, _s = ["disabled"], ks = { key: 0, class: "spinner-border spinner-border-sm me-2" }, Rs = { key: 1, class: "ki-duotone ki-verify fs-2 me-2" }, g = "https://backend.cloudfuelstationmis.com/api/records/v1", Ss = {
  __name: "DIPReadings", setup(Is) {
    const Y = localStorage.getItem("jwt") || "", h = l(!1), D = l(!1), _ = l({}), v = l([]), F = l([]), N = l([]), V = l([]), n = l(null), S = l([]), c = l({}), B = l(JSON.parse(localStorage.getItem("user") || "{}")), p = l(new Date().toISOString().split("T")[0]), z = U(() => new Date().toISOString().split("T")[0]), K = U(() => p.value === new Date().toISOString().split("T")[0]), G = U(() => n.value ? n.value.StationName : "Loading Station..."), u = async (e, s = {}) => { try { const a = await fetch(e, { ...s, headers: { Authorization: `Bearer ${Y}`, "Content-Type": "application/json", ...s.headers } }); if (!a.ok) { let j = {}; try { const T = await a.text(); T && (j = JSON.parse(T)) } catch { } throw new Error(j.message || `Request failed with status ${a.status}`) } const o = a.headers.get("content-type"); if (a.status === 204 || !o || !o.includes("application/json")) return {}; const $ = await a.text(); return !$ || $.trim() === "" ? {} : JSON.parse($) } catch (a) { throw console.error("API Error:", a), a } }, W = async () => { try { const e = await u(`${g}/UserStations?UserID=${B.value.id}`); if (S.value = e.records || [], S.value.length === 0) throw new Error("No station assignments found for user"); const s = S.value[0], a = await u(`${g}/Stations/${s.StationID}`); n.value = a } catch (e) { console.error("Failed to load user station:", e), n.value = { StationID: 510, StationName: "Default Station", StationCode: "DEF001" } } }, M = async () => { var e; try { if (!((e = n.value) != null && e.StationID)) return; const s = await u(`${g}/Tanks?StationID=${n.value.StationID}`); F.value = (s.records || []).filter(a => a.Status === "Active" && a.StationID === n.value.StationID) } catch (s) { console.error("Failed to load tanks:", s) } }, P = async () => { var e; try { if (!((e = n.value) != null && e.StationID)) return; const s = await u(`${g}/Pumps?StationID=${n.value.StationID}`); N.value = (s.records || []).filter(a => a.StationID === n.value.StationID) } catch (s) { console.error("Failed to load pumps:", s) } }, O = async () => { try { const e = await u(`${g}/users`); V.value = e.records || [] } catch (e) { console.error("Failed to load users:", e) } }, f = async () => { var e; try { if (!((e = n.value) != null && e.StationID)) throw new Error("No station ID available"); h.value = !0; const s = await u(`${g}/DailyReadings?ReadingDate=${p.value}&StationID=${n.value.StationID}`); v.value = (s.records || []).filter(o => o.StationID === n.value.StationID && o.OpeningReading && o.ClosingReading && o.CalculatedSales); const a = {}; v.value.forEach(o => { a[o.ReadingID] = { dipReading: o.DipReading || "", temperature: o.Temperature || "", waterLevelCM: o.WaterLevelCM || "", waterVolumeL: o.WaterVolumeL || "" } }), c.value = a } catch (s) { await L("Failed to load meter readings", s.message) } finally { h.value = !1 } }, E = async e => { try { _.value[e.ReadingID] = !0; const s = c.value[e.ReadingID], a = { Temperature: s.temperature, WaterLevelCM: s.waterLevelCM, WaterVolumeL: s.waterVolumeL, DipReading: s.dipReading }; await u(`${g}/DailyReadings/${e.ReadingID}`, { method: "PATCH", body: JSON.stringify(a) }), e.Temperature = a.Temperature, e.WaterLevelCM = a.WaterLevelCM, e.WaterVolumeL = a.WaterVolumeL, e.DipReading = a.DipReading, await C("Reading Updated Successfully!", `Reading ID ${e.ReadingID} updated with 4 environmental fields`) } catch (s) { await L("Update Failed", s.message) } finally { _.value[e.ReadingID] = !1 } }, H = async () => { if ((await R.fire({ title: "Confirm Bulk Update", text: `Update all ${v.value.length} readings with environmental data?`, icon: "question", showCancelButton: !0, confirmButtonColor: "#34C759", cancelButtonColor: "#FF3B30", confirmButtonText: "Yes, Update All" })).isConfirmed) try { D.value = !0; let s = 0; for (const a of v.value) try { await E(a), s++ } catch (o) { console.error(`Failed to update reading ${a.ReadingID}:`, o) } await C("Bulk Update Complete!", `Successfully updated ${s} readings`) } catch (s) { await L("Bulk Update Failed", s.message) } finally { D.value = !1 } }, I = e => { const s = parseFloat(e) || 0; return new Intl.NumberFormat("en-US", { minimumFractionDigits: 0, maximumFractionDigits: 3 }).format(s) + "L" }, k = e => { const s = parseFloat(e) || 0; return new Intl.NumberFormat("en-US", { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(s) }, Q = e => new Date(e).toLocaleDateString("en-US", { weekday: "short", month: "short", day: "numeric", hour: "2-digit", minute: "2-digit" }), X = e => new Date(e).toLocaleDateString("en-US", { month: "short", day: "numeric" }), A = e => { const s = F.value.find(a => a.TankID === e); return s ? s.TankName : `Tank ${e}` }, Z = e => { const s = N.value.find(a => a.PumpID === e); return s ? `${s.PumpName} (${s.PumpNumber})` : `Pump ${e}` }, tt = e => { const s = V.value.find(a => a.id === parseInt(e)); return s ? s.email : `User ${e}` }, st = e => e.DipReading ? e.WaterLevelCM && parseFloat(e.WaterLevelCM) > 0 ? "border-danger border-2" : "border-success border-2" : "border-warning border-2", et = e => e.DipReading ? e.WaterLevelCM && parseFloat(e.WaterLevelCM) > 0 ? "bg-danger" : "bg-success" : "bg-warning", at = e => { switch (e) { case "Completed": return "badge-success"; case "Flagged": return "badge-danger"; case "Pending": return "badge-warning"; default: return "badge-secondary" } }, ot = e => {
      R.fire({
        title: `Reading Details - ${A(e.TankID)}`, html: `
      <div class="text-start">
        <h5>Meter Readings</h5>
        <p><strong>Opening:</strong> ${k(e.OpeningReading)}</p>
        <p><strong>Closing:</strong> ${k(e.ClosingReading)}</p>
        <p><strong>Sales:</strong> ${I(e.CalculatedSales)}</p>
        <p><strong>Dip Reading:</strong> ${e.DipReading ? I(e.DipReading) : "PENDING"}</p>

        <h5>Environmental Data</h5>
        <p><strong>Temperature:</strong> ${e.Temperature || "Not recorded"}</p>
        <p><strong>Water Level:</strong> ${e.WaterLevelCM || "Not detected"}</p>
        <p><strong>Water Volume:</strong> ${e.WaterVolumeL || "None"}</p>

        <h5>Audit Information</h5>
        <p><strong>Recorded by:</strong> ${tt(e.RecordedBy)}</p>
        <p><strong>Status:</strong> ${e.Status}</p>
      </div>
    `, icon: "info", confirmButtonColor: "#007AFF", width: 700
      })
    }, nt = () => { p.value = new Date().toISOString().split("T")[0], f() }, lt = () => { const e = new Date; e.setDate(e.getDate() - 1), p.value = e.toISOString().split("T")[0], f() }, it = async () => { await Promise.all([W(), M(), P(), O(), f()]), await C("Refreshed", "All data refreshed successfully") }, C = async (e, s) => R.fire({ title: e, text: s, icon: "success", toast: !0, position: "top-end", timer: 3e3, showConfirmButton: !1, timerProgressBar: !0 }), L = async (e, s) => R.fire({ title: e, text: s, icon: "error", confirmButtonColor: "#FF3B30" }); return rt(p, () => { f() }), ct(async () => { await W(), await Promise.all([M(), P(), O(), f()]) }), (e, s) => (r(), i("div", ut, [t("div", mt, [t("div", gt, [t("div", vt, [t("div", ft, [s[2] || (s[2] = t("div", { class: "symbol symbol-60px bg-white bg-opacity-20" }, [t("i", { class: "ki-duotone ki-abstract-35 fs-2x text-white" }, [t("span", { class: "path1" }), t("span", { class: "path2" })])], -1)), t("div", null, [s[1] || (s[1] = t("h1", { class: "text-white fw-bolder fs-2 mb-2" }, "Tank Dip Readings Update", -1)), t("div", bt, [t("div", ht, d(G.value), 1), t("div", yt, d(B.value.email || "Field Operator"), 1), t("div", wt, d(Q(new Date)), 1)])])]), t("div", xt, [t("button", { onClick: it, class: "btn btn-light btn-lg", disabled: h.value }, [t("i", { class: y(["ki-duotone ki-arrows-circle fs-3", { "rotate-animation": h.value }]) }, s[3] || (s[3] = [t("span", { class: "path1" }, null, -1), t("span", { class: "path2" }, null, -1)]), 2)], 8, Dt)])])])]), t("div", _t, [t("div", kt, [t("div", Rt, [t("div", St, [s[5] || (s[5] = t("label", { class: "form-label fw-bold text-gray-900 fs-5 fs-lg-4 mb-4" }, [t("i", { class: "ki-duotone ki-calendar fs-3 fs-lg-2 me-2 text-primary" }, [t("span", { class: "path1" }), t("span", { class: "path2" })]), m("Reading Date ")], -1)), t("div", It, [s[4] || (s[4] = t("span", { class: "input-group-text bg-primary border-primary premium-input-addon" }, [t("i", { class: "ki-duotone ki-calendar fs-2 fs-lg-1 text-white" }, [t("span", { class: "path1" }), t("span", { class: "path2" })])], -1)), w(t("input", { "onUpdate:modelValue": s[0] || (s[0] = a => p.value = a), type: "date", class: "form-control form-control-lg border-primary fw-bold fs-5 fs-lg-4 premium-input", max: z.value, onChange: f }, null, 40, Ct), [[x, p.value]])])]), t("div", Lt, [s[8] || (s[8] = t("label", { class: "form-label fw-bold text-gray-900 fs-5 fs-lg-4 mb-4" }, "Quick Actions", -1)), t("div", $t, [t("button", { onClick: nt, class: y(["btn btn-primary btn-lg premium-btn flex-fill", { active: K.value }]) }, s[6] || (s[6] = [b('<i class="ki-duotone ki-calendar-today fs-3 fs-lg-2 me-2" data-v-5090d718><span class="path1" data-v-5090d718></span><span class="path2" data-v-5090d718></span></i><span class="d-none d-sm-inline" data-v-5090d718>Today</span><span class="d-sm-none" data-v-5090d718>Today</span>', 3)]), 2), t("button", { onClick: lt, class: "btn btn-light-primary btn-lg premium-btn flex-fill" }, s[7] || (s[7] = [b('<i class="ki-duotone ki-calendar fs-3 fs-lg-2 me-2" data-v-5090d718><span class="path1" data-v-5090d718></span><span class="path2" data-v-5090d718></span></i><span class="d-none d-sm-inline" data-v-5090d718>Yesterday</span><span class="d-sm-none" data-v-5090d718>Yesterday</span>', 3)]))])])])])]), h.value ? (r(), i("div", Tt, [(r(), i(J, null, q(6, a => t("div", { key: a, class: "card animate__animated animate__fadeIn" }, s[9] || (s[9] = [b('<div class="card-body p-5" data-v-5090d718><div class="d-flex align-items-center gap-4" data-v-5090d718><div class="skeleton skeleton-circle w-70px h-70px" data-v-5090d718></div><div class="flex-fill" data-v-5090d718><div class="skeleton skeleton-text mb-3 w-75" data-v-5090d718></div><div class="skeleton skeleton-text mb-2 w-50" data-v-5090d718></div><div class="skeleton skeleton-text w-25" data-v-5090d718></div></div></div></div>', 1)]))), 64))])) : (r(), i("div", Ut, [(r(!0), i(J, null, q(v.value, a => (r(), i("div", { key: a.ReadingID, class: "col-12 col-md-6 col-xl-4" }, [t("div", { class: y(["card card-flush h-100 border-2", st(a)]) }, [t("div", Ft, [t("div", Nt, [t("div", { class: y(["symbol symbol-60px", et(a)]) }, s[10] || (s[10] = [t("div", { class: "symbol-label" }, [t("i", { class: "ki-duotone ki-abstract-35 fs-2x text-white" }, [t("span", { class: "path1" }), t("span", { class: "path2" })])], -1)]), 2), t("div", Vt, [t("h3", Bt, d(A(a.TankID)), 1), t("div", Wt, d(Z(a.PumpID)), 1), t("div", Mt, [t("span", Pt, "Reading #" + d(a.ReadingID), 1), t("span", Ot, d(X(a.ReadingDate)), 1)])]), t("div", null, [t("div", { class: y(["badge fs-8 fw-bold", at(a.Status)]) }, d(a.Status), 3)])])]), t("div", Et, [t("div", At, [s[14] || (s[14] = b('<div class="d-flex align-items-center gap-2 mb-3" data-v-5090d718><i class="ki-duotone ki-abstract-26 fs-5 text-primary" data-v-5090d718><span class="path1" data-v-5090d718></span><span class="path2" data-v-5090d718></span></i><div class="fw-bold fs-6 text-gray-900" data-v-5090d718>Meter Readings (System Recorded)</div><span class="badge badge-light-primary fs-8" data-v-5090d718>LOCKED</span></div>', 1)), t("div", jt, [t("div", Jt, [t("div", qt, [s[11] || (s[11] = t("div", { class: "fs-8 fw-bold text-gray-600 mb-1" }, "Opening", -1)), t("div", Yt, d(k(a.OpeningReading)), 1)])]), t("div", zt, [t("div", Kt, [s[12] || (s[12] = t("div", { class: "fs-8 fw-bold text-gray-600 mb-1" }, "Closing", -1)), t("div", Gt, d(k(a.ClosingReading)), 1)])]), t("div", Ht, [t("div", Qt, [s[13] || (s[13] = t("div", { class: "fs-8 fw-bold text-gray-600 mb-1" }, "Sales", -1)), t("div", Xt, d(I(a.CalculatedSales)), 1)])])])]), t("div", Zt, [s[21] || (s[21] = b('<div class="d-flex align-items-center gap-2 mb-3" data-v-5090d718><i class="ki-duotone ki-abstract-27 fs-5 text-warning" data-v-5090d718><span class="path1" data-v-5090d718></span><span class="path2" data-v-5090d718></span></i><div class="fw-bold fs-6 text-gray-900" data-v-5090d718>Environmental Data</div></div>', 1)), t("div", ts, [t("div", ss, [s[16] || (s[16] = t("label", { class: "form-label fw-bold fs-7 text-gray-900 mb-2" }, [t("i", { class: "ki-duotone ki-abstract-27 fs-5 me-1 text-warning" }, [t("span", { class: "path1" }), t("span", { class: "path2" })]), m("Temperature ")], -1)), t("div", es, [w(t("input", { "onUpdate:modelValue": o => c.value[a.ReadingID].temperature = o, type: "text", class: "form-control text-center fw-bold border-warning", placeholder: a.Temperature || "°C" }, null, 8, as), [[x, c.value[a.ReadingID].temperature]]), s[15] || (s[15] = t("span", { class: "input-group-text bg-light-warning border-warning" }, "°C", -1))])]), t("div", os, [s[18] || (s[18] = t("label", { class: "form-label fw-bold fs-7 text-gray-900 mb-2" }, [t("i", { class: "ki-duotone ki-drop fs-5 me-1 text-info" }, [t("span", { class: "path1" }), t("span", { class: "path2" })]), m("Water Level ")], -1)), t("div", ns, [w(t("input", { "onUpdate:modelValue": o => c.value[a.ReadingID].waterLevelCM = o, type: "text", class: "form-control text-center fw-bold border-info", placeholder: a.WaterLevelCM || "cm" }, null, 8, ls), [[x, c.value[a.ReadingID].waterLevelCM]]), s[17] || (s[17] = t("span", { class: "input-group-text bg-light-info border-info" }, "cm", -1))])]), t("div", is, [s[20] || (s[20] = t("label", { class: "form-label fw-bold fs-7 text-gray-900 mb-2" }, [t("i", { class: "ki-duotone ki-drop fs-5 me-1 text-success" }, [t("span", { class: "path1" }), t("span", { class: "path2" })]), m("Water Volume ")], -1)), t("div", ds, [w(t("input", { "onUpdate:modelValue": o => c.value[a.ReadingID].waterVolumeL = o, type: "text", class: "form-control text-center fw-bold border-success", placeholder: a.WaterVolumeL || "L" }, null, 8, rs), [[x, c.value[a.ReadingID].waterVolumeL]]), s[19] || (s[19] = t("span", { class: "input-group-text bg-light-success border-success" }, "L", -1))])])])]), t("div", cs, [s[24] || (s[24] = t("label", { class: "form-label fw-bold text-gray-900 fs-6 mb-3" }, [t("i", { class: "ki-duotone ki-abstract-35 fs-5 me-2 text-primary" }, [t("span", { class: "path1" }), t("span", { class: "path2" })]), m("Physical Dip Reading (Tank Volume) ")], -1)), t("div", ps, [s[22] || (s[22] = t("span", { class: "input-group-text bg-primary border-primary" }, [t("i", { class: "ki-duotone ki-abstract-35 fs-2 text-white" }, [t("span", { class: "path1" }), t("span", { class: "path2" })])], -1)), w(t("input", { "onUpdate:modelValue": o => c.value[a.ReadingID].dipReading = o, type: "text", class: "form-control form-control-lg text-center fw-bold fs-4 border-primary", placeholder: a.DipReading || "Enter tank volume..." }, null, 8, us), [[x, c.value[a.ReadingID].dipReading]]), s[23] || (s[23] = t("span", { class: "input-group-text bg-light-primary border-primary" }, [t("span", { class: "fw-bold text-primary" }, "L")], -1))])]), t("div", ms, [t("button", { onClick: o => E(a), class: "btn btn-success btn-lg flex-fill", disabled: _.value[a.ReadingID] }, [_.value[a.ReadingID] ? (r(), i("span", vs)) : (r(), i("i", fs, s[25] || (s[25] = [t("span", { class: "path1" }, null, -1), t("span", { class: "path2" }, null, -1)]))), s[26] || (s[26] = m("Update Reading "))], 8, gs), t("button", { onClick: o => ot(a), class: "btn btn-light-primary btn-lg" }, s[27] || (s[27] = [t("i", { class: "ki-duotone ki-eye fs-2" }, [t("span", { class: "path1" }), t("span", { class: "path2" }), t("span", { class: "path3" })], -1)]), 8, bs)])])], 2)]))), 128))])), v.value.length > 0 ? (r(), i("div", hs, [t("div", ys, [t("div", ws, [s[30] || (s[30] = b('<div class="col-md-6" data-v-5090d718><div class="d-flex align-items-center gap-3" data-v-5090d718><div class="symbol symbol-50px bg-white bg-opacity-20" data-v-5090d718><i class="ki-duotone ki-abstract-35 fs-2x text-white" data-v-5090d718><span class="path1" data-v-5090d718></span><span class="path2" data-v-5090d718></span></i></div><div data-v-5090d718><h3 class="text-white fw-bold fs-4 mb-1" data-v-5090d718>Bulk Update</h3><p class="text-white text-opacity-80 fs-7 mb-0" data-v-5090d718> Update all readings with 4 environmental fields </p></div></div></div>', 1)), t("div", xs, [t("div", Ds, [t("button", { onClick: H, class: "btn btn-success btn-lg", disabled: D.value }, [D.value ? (r(), i("span", ks)) : (r(), i("i", Rs, s[28] || (s[28] = [t("span", { class: "path1" }, null, -1), t("span", { class: "path2" }, null, -1)]))), s[29] || (s[29] = m("Update All "))], 8, _s)])])])])])) : pt("", !0)]))
  }
}, Ls = dt(Ss, [["__scopeId", "data-v-5090d718"]]); export { Ls as default };
