import { _ as Ne, r as R, c as I, a as G, o as Be, d as v, e, g as x, t as r, h as A, i as P, f as V, F as le, k as de, w as W, v as ee, n as ce, S as F, p as f } from "./index-Fk_fMhvq.js"; const Me = { class: "d-flex flex-column gap-4" }, Ue = { class: "card border-0 shadow-lg", style: { background: "linear-gradient(135deg, #ff6b6b 0%, #4ecdc4 100%)", "border-radius": "20px" } }, Le = { class: "card-body p-5" }, Ve = { class: "d-flex align-items-center justify-content-between" }, ze = { class: "text-white fw-bold mb-2 fs-2" }, He = { class: "d-flex align-items-center gap-3" }, qe = { class: "badge bg-white text-primary fw-bold fs-6" }, je = { class: "badge bg-warning text-dark fw-bold fs-6" }, Je = { class: "text-end" }, Ge = { class: "text-white opacity-75 fs-7 mb-2" }, Ye = { key: 0, class: "card border-0 shadow-sm", style: { "border-radius": "16px" } }, Ze = { class: "card-body p-5" }, Xe = { class: "flex-grow-1" }, Ke = { class: "fw-semibold text-gray-900 fs-6 mb-1" }, Qe = { class: "text-gray-600 fs-7" }, We = { class: "card border-0 shadow-sm", style: { "border-radius": "16px" } }, et = { class: "card-body p-5" }, tt = { class: "row g-4 mb-5" }, st = { class: "col-6" }, at = { class: "d-flex align-items-center" }, nt = { class: "symbol symbol-50px symbol-circle bg-light-success me-4" }, it = { class: "symbol-label text-success fw-bold fs-4" }, ot = { class: "col-6" }, rt = { class: "d-flex align-items-center" }, lt = { class: "symbol symbol-50px symbol-circle bg-light-warning me-4" }, dt = { class: "symbol-label text-warning fw-bold fs-4" }, ct = { class: "position-relative d-flex justify-content-center", style: { height: "140px" } }, ut = { class: "text-center mt-4" }, gt = { class: "fs-3 fw-bold text-gray-900" }, pt = { key: 1, class: "card border-0 shadow-lg", style: { "border-radius": "16px", border: "3px solid #f1416c" } }, vt = { class: "card-body p-6 text-center" }, ft = { class: "text-gray-700 mb-5 fs-4" }, ht = ["disabled"], mt = { key: 2, class: "card border-0 shadow-sm bg-light-danger", style: { "border-radius": "16px" } }, bt = { class: "card-body p-5" }, yt = { class: "d-flex align-items-center" }, St = { class: "text-gray-700 fs-6" }, xt = { key: 3, class: "row g-4" }, It = ["onClick"], wt = { class: "position-absolute top-0 end-0 m-4" }, Dt = { class: "card-body p-5" }, _t = { class: "d-flex align-items-center mb-4" }, Rt = { class: "flex-grow-1" }, kt = { class: "fw-bold text-gray-900 mb-1 fs-4" }, Pt = { class: "text-gray-600 fs-6" }, Ct = { class: "mb-4" }, At = { class: "fw-bold text-primary fs-3" }, Ft = { key: 0, class: "mb-4" }, Ot = { class: "d-flex justify-content-between align-items-center mb-2" }, Tt = { class: "fw-bold text-success fs-5" }, $t = { key: 1, class: "alert alert-warning p-3 mb-0", style: { "border-radius": "12px" } }, Et = { class: "d-flex align-items-center" }, Nt = { class: "fs-7 fw-semibold" }, Bt = { key: 4, class: "modal fade show d-block", style: { background: "rgba(0, 0, 0, 0.6)" } }, Mt = { class: "modal-dialog modal-dialog-centered modal-lg" }, Ut = { class: "modal-content border-0", style: { "border-radius": "24px" } }, Lt = { class: "modal-header border-0 pb-0 pt-6 px-6" }, Vt = { class: "modal-title fw-bold text-gray-900 fs-2" }, zt = { class: "modal-body px-6 pb-6" }, Ht = { class: "card bg-light-primary mb-6", style: { "border-radius": "16px" } }, qt = { class: "card-body p-5" }, jt = { class: "row g-4" }, Jt = { class: "col-6" }, Gt = { class: "fw-bold text-gray-900 fs-3" }, Yt = { class: "col-6" }, Zt = { class: "fw-bold text-gray-900 fs-5" }, Xt = { class: "row g-5" }, Kt = { class: "col-12" }, Qt = { key: 0, class: "invalid-feedback fs-6" }, Wt = { class: "col-12" }, es = { key: 0, class: "invalid-feedback fs-6" }, ts = { key: 0, class: "card bg-light-success mt-6", style: { "border-radius": "16px" } }, ss = { class: "card-body p-5" }, as = { class: "row g-4 text-center" }, ns = { class: "col-4" }, is = { class: "fw-bold text-gray-900 fs-3" }, os = { class: "col-4" }, rs = { class: "col-4" }, ls = { class: "fw-bold text-gray-900 fs-3" }, ds = { key: 1, class: "alert alert-warning mt-6", style: { "border-radius": "16px" } }, cs = { class: "modal-footer border-0 pt-0 px-6 pb-6" }, us = ["disabled"], gs = { key: 0 }, ps = { key: 1, class: "d-flex align-items-center" }, vs = { key: 5, class: "modal fade show d-block", style: { background: "rgba(0, 0, 0, 0.8)" } }, fs = { class: "modal-dialog modal-dialog-centered modal-lg" }, hs = { class: "modal-content border-0", style: { "border-radius": "24px", border: "3px solid #f1416c" } }, ms = { class: "modal-header border-0 pt-6 px-6", style: { background: "linear-gradient(135deg, #f1416c 0%, #ff6b6b 100%)", "border-radius": "24px 24px 0 0" } }, bs = { class: "w-100" }, ys = { class: "modal-title fw-bold fs-2 text-white text-center" }, Ss = { class: "modal-body px-6 pb-6" }, xs = { class: "alert alert-info mb-6", style: { "border-radius": "16px" } }, Is = { class: "d-flex align-items-center" }, ws = { class: "text-gray-700 fs-6" }, Ds = { class: "mb-6" }, _s = { key: 0, class: "invalid-feedback fs-6" }, Rs = { class: "alert alert-success", style: { "border-radius": "16px" } }, ks = { class: "d-flex align-items-center" }, Ps = { class: "text-gray-700 fs-6 mb-2" }, Cs = { class: "modal-footer border-0 px-6 pb-6" }, As = { class: "w-100 d-flex justify-content-center" }, Fs = ["disabled"], Os = { key: 0 }, Ts = { key: 1, class: "d-flex align-items-center justify-content-center" }, $s = { key: 6, class: "position-fixed top-0 start-0 w-100 h-100 d-flex align-items-center justify-content-center", style: { background: "rgba(0, 0, 0, 0.8)", "z-index": "9999" } }, Es = { class: "card p-8 text-center border-0", style: { "border-radius": "24px" } }, Ns = { class: "fw-bold text-gray-700 fs-4" }, Bs = "https://backend.cloudfuelstationmis.com/api/records/v1", Ms = { __name: "DailyMeterReadings", setup(Us) { const Y = R(JSON.parse(localStorage.getItem("kigrama_user_data") || "{}")), h = I(() => Y.value.user || {}), i = I(() => { const s = Y.value.stations || []; return s.find(t => t.IsPrimary === "1") || s[0] || null }), $ = R(!0), B = R("Initializing meter reading system..."), O = R(!1), w = R(!1), z = R(null), T = R(!1), y = G({ openingBalance: "", errors: {} }), H = R({}), b = R([]), k = G(new Map), p = R(null), l = G({ openingReading: "", closingReading: "" }), S = G({}), q = R([]), Z = R(null), ue = I(() => new Date().toLocaleDateString("en-UG", { weekday: "long", year: "numeric", month: "long", day: "numeric" })), ge = I(() => new Date().toLocaleTimeString("en-UG", { hour: "2-digit", minute: "2-digit" })), D = I(() => { const s = new Date().getHours(); return s >= 6 && s < 14 ? "Morning" : s >= 14 && s < 22 ? "Afternoon" : "Night" }), pe = I(() => w.value ? "Active" : "No Shift"), ve = I(() => w.value ? "bg-success text-white" : "bg-danger text-white"), M = I(() => b.value.filter(s => N(s.PumpID)).length), te = I(() => b.value.length - M.value), fe = I(() => b.value.length === 0 ? 0 : Math.round(M.value / b.value.length * 100)), se = I(() => l.openingReading && l.closingReading && !S.opening && !S.closing), ae = I(() => y.openingBalance && !y.errors.openingBalance), X = I(() => !l.openingReading || !l.closingReading ? !1 : Math.abs(parseFloat(U())) > 20), _ = async (s, t = {}) => { try { const a = await fetch(`${Bs}${s}`, { headers: { "Content-Type": "application/json", ...t.headers }, ...t }); if (!a.ok) { const d = await a.text().then(n => { try { return JSON.parse(n) } catch { return { message: n || `HTTP ${a.status}` } } }); throw new Error(d.message || `HTTP ${a.status}`) } const o = await a.text(); if (!o || o.trim() === "") return {}; try { return JSON.parse(o) } catch { return console.warn("Non-JSON response received:", o), { message: "Success", data: o } } } catch (a) { throw console.error("API Error:", a), a } }, E = async (s, t, a) => { var o, d; try { const n = Math.max(0, Math.min(100, parseFloat(a) || 0)).toString(); let u = "Open"; const g = "medium"; parseFloat(n) >= 70 ? u = "Flagged" : parseFloat(n) >= 40 ? u = "Review" : parseFloat(n) < 40 && (u = "Cleared"); const c = { DetectionRuleID: null, TransactionID: null, StationID: ((o = i.value) == null ? void 0 : o.StationID) || null, UserID: ((d = h.value) == null ? void 0 : d.id) || null, RiskScore: n, Severity: g, FraudType: s.substring(0, 100), Description: t.substring(0, 500), DetectedAt: new Date().toISOString(), Status: u, ResolvedBy: null, ResolvedAt: null, Notes: null, CreatedAt: new Date().toISOString(), UpdatedAt: new Date().toISOString() }; await _("/FraudDetectionLogs", { method: "POST", body: JSON.stringify(c) }), console.log(`✅ FraudDetectionLog created: ${s} - Risk: ${n}`) } catch (n) { console.warn("⚠️ FraudDetectionLog creation failed (non-blocking):", n.message) } }, K = async (s, t) => { try { let a = 0; const o = []; if (s === "meter_reading" && t.variance) { const d = Math.abs(parseFloat(t.variance)); d > 50 ? (o.push(`Extremely high variance: ${d}L`), a = 80) : d > 20 && (o.push(`High variance detected: ${d}L`), a = 60) } return s === "meter_rollback_attempt" && (o.push("Meter tampering attempt detected"), a = 70), s === "negative_sales_attempt" && (o.push("Negative sales attempt detected"), a = 75), a >= 60 && o.length > 0 && await E(s.toUpperCase(), o.join("; "), a), { suspicious: a >= 60, riskScore: a } } catch (a) { return console.warn("⚠️ Suspicious activity detection failed (non-blocking):", a.message), { suspicious: !1, riskScore: 0 } } }, he = async () => { var s; if (!((s = i.value) != null && s.StationID)) throw new Error("No station assigned to user"); try { const t = await _(`/Stations/${i.value.StationID}`); if (H.value = t || {}, H.value.StationID !== i.value.StationID) throw new Error("Station data mismatch - security violation detected"); const o = (await _(`/Pumps?StationID=${i.value.StationID}`)).records || [], d = o.filter(c => c && c.StationID === i.value.StationID); d.length !== o.length && o.length > 0 && (console.error(`🚨 SECURITY VIOLATION: Cross-station pump data detected! Expected: ${d.length}, Received: ${o.length}`), await E("UNAUTHORIZED_DATA_ACCESS", `Attempted access to pumps from other stations. User station: ${i.value.StationID}`, 85)); let n = []; try { n = ((await _(`/Tanks?StationID=${i.value.StationID}`)).records || []).filter(m => m && m.StationID === i.value.StationID) } catch (c) { console.warn("Failed to load tanks:", c.message) } let u = []; try { u = (await _("/Products")).records || [] } catch (c) { console.warn("Failed to load products:", c.message) } if (b.value = d.map(c => { const m = n.find(C => C && C.TankID === c.TankID && C.StationID === i.value.StationID), L = u.find(C => C && C.ProductID === (m == null ? void 0 : m.ProductID)); return { ...c, ProductName: (L == null ? void 0 : L.Name) || "Unknown Product", StationValidated: !0 } }), b.value.filter(c => !c.StationValidated).length > 0) throw new Error("Security validation failed - unauthorized pump access detected"); b.value.forEach(c => { c && c.PumpID && !k.has(c.PumpID) && k.set(c.PumpID, { openingReading: "", closingReading: "", variance: 0, readingId: null, stationId: i.value.StationID }) }), console.log(`✅ Securely loaded ${b.value.length} validated pumps for station ${i.value.StationID}`) } catch (t) { throw console.error("Error loading station data:", t), new Error(`Failed to load station data: ${t.message}`) } }, me = async () => { var s, t; if (!((s = i.value) != null && s.StationID) || !((t = h.value) != null && t.id)) { console.warn("Missing station or user data for shift check"); return } try { const a = new Date().toISOString().split("T")[0], n = ((await _(`/CashDrawers?StationID=${i.value.StationID}&ShiftDate=${a}&ShiftType=${D.value}&Status=Open&AttendantID=${h.value.id}`)).records || []).find(u => u && u.AttendantID === h.value.id && u.StationID === i.value.StationID && u.Status === "Open"); n ? (w.value = !0, z.value = n, j(), console.log(`✅ Found active ${D.value} shift for user ${h.value.id} at station ${i.value.StationID}`)) : (w.value = !1, z.value = null, setTimeout(() => { !w.value && !T.value && (T.value = !0) }, 1e3), console.log(`❌ No active ${D.value} shift found - user must open shift first`)) } catch (a) { console.error("Error checking shift status:", a), w.value = !1, z.value = null, setTimeout(() => { T.value || (T.value = !0) }, 1e3) } }, be = async () => { var s, t; if (!((s = i.value) != null && s.StationID) || !((t = h.value) != null && t.id)) { console.warn("Missing station or user data for loading existing readings"); return } try { const a = new Date().toISOString().split("T")[0], d = (await _(`/DailyReadings?StationID=${i.value.StationID}&ReadingDate=${a}&RecordedBy=${h.value.id}`)).records || []; let n = 0; const u = []; d.forEach(g => { if (g && g.PumpID && g.StationID === i.value.StationID && g.RecordedBy === h.value.id && k.has(g.PumpID)) { const c = b.value.find(m => m.PumpID === g.PumpID); if (c && c.StationID === i.value.StationID) { const m = k.get(g.PumpID); m && (m.openingReading = g.OpeningReading || "", m.closingReading = g.ClosingReading || "", m.variance = parseFloat(g.Variance || 0), m.readingId = g.ReadingID, n++) } else u.push({ readingId: g.ReadingID, pumpId: g.PumpID, stationId: g.StationID }) } else g && g.StationID !== i.value.StationID && u.push({ readingId: g.ReadingID, unauthorizedStation: g.StationID, userStation: i.value.StationID }) }), u.length > 0 && (console.error(`🚨 SECURITY VIOLATIONS: ${u.length} unauthorized reading access attempts`), await E("UNAUTHORIZED_READING_ACCESS", `Attempted access to readings from other stations/users. Violations: ${u.length}`, 90)), console.log(`✅ Securely loaded ${n} validated readings for today`) } catch (a) { console.error("Error loading existing readings:", a) } }, j = () => { const s = [], t = new Date().getHours(); try { if (t >= 6 && t <= 9 && s.push({ id: "morning_rush", type: "Peak Hours", message: "Morning rush hour period - ensure all pumps are operational for maximum efficiency", confidence: 90, priority: "medium" }), w.value && s.push({ id: "shift_active", type: "Shift Status", message: `${D.value} shift is active - all readings are being monitored for accuracy`, confidence: 100, priority: "high" }), b.value && b.value.length > 0) { const a = M.value / b.value.length * 100; a > 0 && a < 100 ? s.push({ id: "completion_status", type: "Progress Update", message: `${a.toFixed(0)}% of pumps completed - ${te.value} pumps remaining`, confidence: 100, priority: "medium" }) : a === 100 && s.push({ id: "all_complete", type: "Achievement", message: "All pump readings completed successfully - ready for shift closure", confidence: 100, priority: "high" }) } q.value = s } catch (a) { console.error("Error generating AI insights:", a), q.value = [] } }, ye = () => { T.value = !0, y.openingBalance = "", y.errors = {} }, Se = () => { const s = {}; if (!y.openingBalance) s.openingBalance = "Opening balance is required"; else { const t = parseFloat(y.openingBalance); isNaN(t) || t < 0 ? s.openingBalance = "Invalid amount" : t > 1e7 && (s.openingBalance = "Amount exceeds maximum limit") } y.errors = s }, xe = async () => { var s, t; if (ae.value) { if (!((s = i.value) != null && s.StationID) || !((t = h.value) != null && t.id)) { F.fire({ title: "Authentication Error", text: "Invalid user or station data. Please login again.", icon: "error", confirmButtonColor: "#f1416c" }); return } O.value = !0; try { const a = new Date().toISOString().split("T")[0]; if (((await _(`/CashDrawers?StationID=${i.value.StationID}&ShiftDate=${a}&ShiftType=${D.value}&Status=Open`)).records || []).filter(g => g.AttendantID !== h.value.id).length > 0) { await E("SHIFT_CONFLICT_ATTEMPT", "Attempted to open shift when another user has active shift on same station/shift type", 70), F.fire({ title: "Shift Conflict", text: "Another user already has an active shift for this time period.", icon: "error", confirmButtonColor: "#f1416c" }); return } const n = { StationID: i.value.StationID, ShiftDate: a, ShiftType: D.value, AttendantID: h.value.id, OpeningBalance: y.openingBalance, ClosingBalance: "0.00", ExpectedCash: y.openingBalance, ActualCash: "0.00", Variance: "0.00", CashSales: "0.00", CashPayouts: "0.00", Status: "Open", OpenedBy: h.value.id, ClosedBy: null, OpenedAt: new Date().toISOString(), ClosedAt: null, Notes: `SECURED: Station ${i.value.StationID} access granted`, CreatedAt: new Date().toISOString() }, u = await _("/CashDrawers", { method: "POST", body: JSON.stringify(n) }); if (u.StationID !== i.value.StationID || u.AttendantID !== h.value.id) throw new Error("Security validation failed - shift ownership mismatch"); w.value = !0, z.value = u, T.value = !1, j(), F.fire({ title: "Shift Secured!", text: `${D.value} shift opened successfully with security validation`, icon: "success", toast: !0, position: "top-end", timer: 4e3, showConfirmButton: !1 }), console.log(`🔐 SECURE SHIFT OPENED: User ${h.value.id} at Station ${i.value.StationID}`) } catch (a) { console.error("Error opening shift:", a), await E("SHIFT_OPENING_FAILURE", `Failed to open shift: ${a.message}`, 60), F.fire({ title: "Error Opening Shift", text: a.message, icon: "error", confirmButtonColor: "#f1416c" }) } finally { O.value = !1 } } }, Ie = async s => { p.value = s; const t = k.get(s.PumpID); l.openingReading = (t == null ? void 0 : t.openingReading) || "", l.closingReading = (t == null ? void 0 : t.closingReading) || "", S.opening = "", S.closing = "" }, Q = async () => { p.value = null, l.openingReading = "", l.closingReading = "", S.opening = "", S.closing = "" }, ne = () => { if (!p.value) return; const s = {}; if (l.openingReading) { const t = parseFloat(l.openingReading), a = parseFloat(p.value.MeterReading || 0); isNaN(t) || t < 0 ? s.opening = "Invalid reading format" : t < a && (s.opening = "Opening reading cannot be less than current reading") } if (l.closingReading && l.openingReading) { const t = parseFloat(l.closingReading), a = parseFloat(l.openingReading); isNaN(t) || t < 0 ? s.closing = "Invalid reading format" : t < a && (s.closing = "Closing reading cannot be less than opening reading") } S.opening = s.opening || "", S.closing = s.closing || "" }, we = async () => { var s; if (se.value) { if (!w.value) { F.fire({ title: "Shift Required", text: "You must have an active shift to save readings", icon: "error", confirmButtonColor: "#f1416c" }); return } if (!p.value || p.value.StationID !== i.value.StationID) { await E("UNAUTHORIZED_PUMP_ACCESS", `Attempted to save reading for unauthorized pump. Pump Station: ${(s = p.value) == null ? void 0 : s.StationID}, User Station: ${i.value.StationID}`, 95), F.fire({ title: "Security Violation", text: "Unauthorized pump access detected", icon: "error", confirmButtonColor: "#f1416c" }); return } O.value = !0; try { const t = new Date().toISOString().split("T")[0], a = parseFloat(J()), o = parseFloat(U()), d = parseFloat(l.openingReading), n = parseFloat(l.closingReading), u = parseFloat(p.value.MeterReading || 0); d < u && await K("meter_rollback_attempt", { pumpId: p.value.PumpID, currentReading: u, attemptedReading: d }), n < d && await K("negative_sales_attempt", { pumpId: p.value.PumpID, openingReading: d, closingReading: n }), Math.abs(o) > 20 && await K("meter_reading", { pumpId: p.value.PumpID, variance: o }); const g = { StationID: i.value.StationID, ReadingDate: t, PumpID: p.value.PumpID, TankID: p.value.TankID, OpeningReading: l.openingReading, ClosingReading: l.closingReading, DipReading: null, CalculatedSales: a.toString(), Variance: o.toString(), RecordedBy: h.value.id.toString(), VerifiedBy: null, Status: "Completed", CreatedAt: new Date().toISOString() }, c = k.get(p.value.PumpID); let m; c != null && c.readingId ? m = await _(`/DailyReadings/${c.readingId}`, { method: "PATCH", body: JSON.stringify(g) }) : m = await _("/DailyReadings", { method: "POST", body: JSON.stringify(g) }); const L = m.ReadingID || m.id || (c == null ? void 0 : c.readingId); p.value.StationID === i.value.StationID && await _(`/Pumps/${p.value.PumpID}`, { method: "PATCH", body: JSON.stringify({ MeterReading: l.closingReading, UpdatedAt: new Date().toISOString() }) }), k.set(p.value.PumpID, { openingReading: l.openingReading, closingReading: l.closingReading, variance: o, readingId: L, stationId: i.value.StationID, savedBy: h.value.id, savedAt: new Date().toISOString() }); const C = b.value.find(Ee => Ee.PumpID === p.value.PumpID); C && C.StationID === i.value.StationID && (C.MeterReading = l.closingReading), j(), Te(), F.fire({ title: "Success!", text: "Reading saved successfully", icon: "success", toast: !0, position: "top-end", timer: 3e3, showConfirmButton: !1 }), Q() } catch (t) { console.error("Error saving reading:", t), F.fire({ title: "Error Saving Reading", text: t.message, icon: "error", confirmButtonColor: "#f1416c" }) } finally { O.value = !1 } } }, N = s => { const t = k.get(s); return t && t.openingReading && t.closingReading }, De = s => { const t = k.get(s); if (!t || !t.openingReading || !t.closingReading) return "0.00"; const a = parseFloat(t.closingReading) - parseFloat(t.openingReading); return a > 0 ? a.toFixed(2) : "0.00" }, ie = s => { const t = k.get(s); if (!t || !t.variance) return null; const a = Math.abs(t.variance); return a > 20 ? `High variance: ${a.toFixed(2)}L` : a > 10 ? `Medium variance: ${a.toFixed(2)}L` : null }, J = () => { if (!l.openingReading || !l.closingReading) return "0.00"; const s = parseFloat(l.closingReading) - parseFloat(l.openingReading); return s > 0 ? s.toFixed(2) : "0.00" }, U = () => !l.openingReading || !l.closingReading ? "0.00" : (parseFloat(J()) * .02).toFixed(2), _e = () => { const s = Math.abs(parseFloat(U())), t = parseFloat(J()); return t === 0 ? "100" : Math.max(0, 100 - s / t * 100).toFixed(0) }, Re = () => { const s = Math.abs(parseFloat(U())); return s > 20 ? "text-danger" : s > 10 ? "text-warning" : "text-success" }, oe = s => { const t = parseFloat(s || 0); return isNaN(t) ? "0.00" : t.toLocaleString("en-UG", { minimumFractionDigits: 2, maximumFractionDigits: 2 }) }, ke = s => !s || s.Status !== "Active" ? "bg-light-secondary" : N(s.PumpID) ? "bg-light-success" : "bg-light-primary", Pe = s => !s || s.Status !== "Active" ? "badge-light-secondary" : N(s.PumpID) ? "badge-light-success" : "badge-light-primary", Ce = s => !s || s.Status !== "Active" ? "Inactive" : N(s.PumpID) ? "Complete" : "Pending", Ae = s => !s || s.Status !== "Active" ? "bg-light-secondary" : N(s.PumpID) ? "bg-light-success" : "bg-light-primary", Fe = s => { if (!s) return "badge-light-info"; switch (s.toLowerCase()) { case "high": return "badge-light-danger"; case "medium": return "badge-light-warning"; default: return "badge-light-info" } }, Oe = () => { if (X.value) return "Save with Monitoring"; if (!p.value) return "Save Reading"; const s = k.get(p.value.PumpID); return s != null && s.readingId ? "Update Reading" : "Save Reading" }, re = () => { if (Z.value) try { const s = Z.value.getContext("2d"); if (!s) return; const t = M.value, a = b.value.length; if (s.clearRect(0, 0, s.canvas.width, s.canvas.height), a === 0) return; const o = s.canvas.width / 2, d = s.canvas.height / 2, n = 50; if (s.beginPath(), s.arc(o, d, n, 0, 2 * Math.PI), s.fillStyle = "#f1f3f4", s.fill(), t > 0) { const u = t / a * 2 * Math.PI; s.beginPath(), s.arc(o, d, n, -Math.PI / 2, -Math.PI / 2 + u), s.arc(o, d, 25, -Math.PI / 2 + u, -Math.PI / 2, !0), s.fillStyle = "#50cd89", s.fill() } s.fillStyle = "#181c32", s.font = "bold 18px Inter", s.textAlign = "center", s.fillText(`${t}`, o, d - 5), s.font = "bold 12px Inter", s.fillText(`of ${a}`, o, d + 10) } catch (s) { console.error("Chart initialization error:", s) } }, Te = () => { ce(() => { try { re() } catch (s) { console.error("Chart update error:", s) } }) }, $e = async () => { $.value = !0, B.value = "Initializing meter reading system..."; try { if (!Y.value.user || !i.value) throw new Error("Authentication required - please login first"); if (!h.value.id) throw new Error("Invalid user data - missing user ID"); if (!i.value.StationID) throw new Error("No station assigned to user"); B.value = "Loading station data...", await he(), B.value = "Checking shift status...", await me(), B.value = "Loading existing readings...", await be(), j(), await ce(), setTimeout(() => { try { re() } catch (s) { console.error("Chart initialization delayed error:", s) } }, 100), console.log(`✅ System initialized successfully for station ${i.value.StationID}`) } catch (s) { console.error("Initialization error:", s), await F.fire({ title: "Initialization Failed", text: s.message || "Failed to initialize the meter reading system", icon: "error", confirmButtonColor: "#f1416c" }) } finally { $.value = !1 } }; return Be(() => { $e() }), (s, t) => { var a, o, d; return f(), v("div", Me, [e("div", Ue, [e("div", Le, [e("div", Ve, [e("div", null, [e("h1", ze, r(H.value.StationName || "Loading..."), 1), e("div", He, [e("span", qe, r(h.value.name || "User"), 1), e("span", je, r(D.value) + " Shift", 1)])]), e("div", Je, [e("div", Ge, r(ue.value), 1), e("span", { class: A(["badge", ve.value]) }, [t[3] || (t[3] = e("i", { class: "ki-duotone ki-status fs-2" }, [e("span", { class: "path1" }), e("span", { class: "path2" })], -1)), P(" " + r(pe.value), 1)], 2)])])])]), q.value.length > 0 ? (f(), v("div", Ye, [t[4] || (t[4] = V('<div class="card-header bg-light-info py-4" style="border-radius:16px 16px 0 0;" data-v-d5990e58><h3 class="card-title fw-bold text-info mb-0 fs-4" data-v-d5990e58><i class="ki-duotone ki-flash fs-1 text-info me-3" data-v-d5990e58><span class="path1" data-v-d5990e58></span><span class="path2" data-v-d5990e58></span></i> AI Station Intelligence </h3></div>', 1)), e("div", Ze, [(f(!0), v(le, null, de(q.value, n => (f(), v("div", { key: n.id, class: "d-flex align-items-start gap-4 mb-4 last:mb-0" }, [e("span", { class: A(["badge fs-7 fw-bold px-3 py-2", Fe(n.priority)]) }, r(n.type), 3), e("div", Xe, [e("div", Ke, r(n.message), 1), e("div", Qe, "Confidence: " + r(n.confidence) + "%", 1)])]))), 128))])])) : x("", !0), e("div", We, [t[8] || (t[8] = V('<div class="card-header bg-light-primary py-4" style="border-radius:16px 16px 0 0;" data-v-d5990e58><h3 class="card-title fw-bold text-primary mb-0 fs-4" data-v-d5990e58><i class="ki-duotone ki-chart-simple fs-1 text-primary me-3" data-v-d5990e58><span class="path1" data-v-d5990e58></span><span class="path2" data-v-d5990e58></span><span class="path3" data-v-d5990e58></span></i> Reading Progress </h3></div>', 1)), e("div", et, [e("div", tt, [e("div", st, [e("div", at, [e("div", nt, [e("span", it, r(M.value), 1)]), t[5] || (t[5] = e("div", null, [e("div", { class: "text-gray-900 fw-bold fs-5" }, "Completed"), e("div", { class: "text-gray-600 fs-6" }, "Pumps Read")], -1))])]), e("div", ot, [e("div", rt, [e("div", lt, [e("span", dt, r(te.value), 1)]), t[6] || (t[6] = e("div", null, [e("div", { class: "text-gray-900 fw-bold fs-5" }, "Pending"), e("div", { class: "text-gray-600 fs-6" }, "Awaiting Read")], -1))])])]), e("div", ct, [e("canvas", { ref_key: "performanceChart", ref: Z, width: "140", height: "140" }, null, 512)]), e("div", ut, [e("div", gt, r(fe.value) + "%", 1), t[7] || (t[7] = e("div", { class: "text-gray-600 fs-6" }, "Reading Progress", -1))])])]), !w.value && !$.value ? (f(), v("div", pt, [e("div", vt, [t[12] || (t[12] = V('<i class="ki-duotone ki-shield-cross mb-4" style="font-size:5rem;color:#f1416c;" data-v-d5990e58><span class="path1" data-v-d5990e58></span><span class="path2" data-v-d5990e58></span><span class="path3" data-v-d5990e58></span></i><h3 class="fw-bold text-danger mb-3 fs-2" data-v-d5990e58>Shift Required</h3>', 2)), e("p", ft, [t[9] || (t[9] = P(" You must open a ")), e("strong", null, r(D.value), 1), t[10] || (t[10] = P(" shift before accessing meter readings. This is required for proper tracking and security. "))]), t[13] || (t[13] = V('<div class="alert alert-warning mb-5" style="border-radius:12px;" data-v-d5990e58><div class="d-flex align-items-center" data-v-d5990e58><i class="ki-duotone ki-information-5 fs-1 text-warning me-4" data-v-d5990e58><span class="path1" data-v-d5990e58></span><span class="path2" data-v-d5990e58></span><span class="path3" data-v-d5990e58></span></i><div data-v-d5990e58><div class="fw-bold text-warning fs-5" data-v-d5990e58>Station Security Active</div><div class="text-gray-700 fs-6" data-v-d5990e58> All station resources are protected. Only authorized users with active shifts can access pump readings. </div></div></div></div>', 1)), e("button", { onClick: ye, disabled: $.value, class: "btn btn-danger btn-lg fw-bold px-8 py-4", style: { "border-radius": "16px", "min-height": "60px" } }, [t[11] || (t[11] = e("i", { class: "ki-duotone ki-shield-tick fs-1 me-3" }, [e("span", { class: "path1" }), e("span", { class: "path2" }), e("span", { class: "path3" })], -1)), P(" Open " + r(D.value) + " Shift Now ", 1)], 8, ht)])])) : x("", !0), !w.value && !$.value ? (f(), v("div", mt, [e("div", bt, [e("div", yt, [t[15] || (t[15] = e("i", { class: "ki-duotone ki-lock fs-1 text-danger me-4" }, [e("span", { class: "path1" }), e("span", { class: "path2" })], -1)), e("div", null, [t[14] || (t[14] = e("div", { class: "fw-bold text-danger fs-5" }, "Pump Readings Locked", -1)), e("div", St, " Station " + r((a = i.value) == null ? void 0 : a.StationID) + " resources are secured. Open your shift to begin operations. ", 1)])])])])) : x("", !0), w.value ? (f(), v("div", xt, [(f(!0), v(le, null, de(b.value, n => (f(), v("div", { key: n.PumpID, class: "col-12 col-md-6" }, [e("div", { class: A(["card h-100 border-0 shadow-sm position-relative cursor-pointer", ke(n)]), style: { "border-radius": "16px", transition: "all 0.3s cubic-bezier(0.4, 0, 0.2, 1)" }, onClick: u => Ie(n) }, [e("div", wt, [e("span", { class: A(["badge fs-6 fw-bold px-3 py-2", Pe(n)]) }, r(Ce(n)), 3)]), e("div", Dt, [e("div", _t, [e("div", { class: A(["symbol symbol-60px symbol-circle me-4", Ae(n)]) }, t[16] || (t[16] = [e("i", { class: "ki-duotone ki-oil fs-1" }, [e("span", { class: "path1" }), e("span", { class: "path2" })], -1)]), 2), e("div", Rt, [e("h4", kt, r(n.PumpName), 1), e("div", Pt, r(n.ProductName || "Fuel Product"), 1)])]), e("div", Ct, [t[17] || (t[17] = e("div", { class: "text-gray-600 fs-7 mb-2" }, "Current Reading", -1)), e("div", At, r(oe(n.MeterReading)) + "L", 1)]), N(n.PumpID) ? (f(), v("div", Ft, [e("div", Ot, [t[18] || (t[18] = e("span", { class: "text-gray-600 fs-7" }, "Sales Today", -1)), e("span", Tt, r(De(n.PumpID)) + "L", 1)]), t[19] || (t[19] = e("div", { class: "progress", style: { height: "8px", "border-radius": "4px" } }, [e("div", { class: "progress-bar bg-success", style: { width: "100%", "border-radius": "4px" } })], -1))])) : x("", !0), ie(n.PumpID) ? (f(), v("div", $t, [e("div", Et, [t[20] || (t[20] = e("i", { class: "ki-duotone ki-warning fs-2 text-warning me-3" }, [e("span", { class: "path1" }), e("span", { class: "path2" })], -1)), e("span", Nt, r(ie(n.PumpID)), 1)])])) : x("", !0)])], 10, It)]))), 128))])) : x("", !0), p.value ? (f(), v("div", Bt, [e("div", Mt, [e("div", Ut, [e("div", Lt, [e("h3", Vt, r(p.value.PumpName), 1), e("button", { onClick: Q, class: "btn btn-icon btn-sm btn-active-light-primary", style: { "border-radius": "8px" } }, t[21] || (t[21] = [e("i", { class: "ki-duotone ki-cross fs-2" }, [e("span", { class: "path1" }), e("span", { class: "path2" })], -1)]))]), e("div", zt, [e("div", Ht, [e("div", qt, [e("div", jt, [e("div", Jt, [t[22] || (t[22] = e("div", { class: "text-primary fs-7 mb-2" }, "Current Reading", -1)), e("div", Gt, r(oe(p.value.MeterReading)) + "L ", 1)]), e("div", Yt, [t[23] || (t[23] = e("div", { class: "text-primary fs-7 mb-2" }, "Product Type", -1)), e("div", Zt, r(p.value.ProductName || "Fuel"), 1)])])])]), e("div", Xt, [e("div", Kt, [t[24] || (t[24] = e("label", { class: "required form-label fw-semibold fs-5" }, "Opening Reading (L)", -1)), W(e("input", { "onUpdate:modelValue": t[0] || (t[0] = n => l.openingReading = n), onInput: ne, type: "number", step: "0.01", class: A(["form-control form-control-lg", { "is-invalid": S.opening }]), placeholder: "Enter opening meter reading", style: { "border-radius": "12px", "border-width": "2px", "min-height": "60px", "font-size": "18px" } }, null, 34), [[ee, l.openingReading]]), S.opening ? (f(), v("div", Qt, r(S.opening), 1)) : x("", !0)]), e("div", Wt, [t[25] || (t[25] = e("label", { class: "required form-label fw-semibold fs-5" }, "Closing Reading (L)", -1)), W(e("input", { "onUpdate:modelValue": t[1] || (t[1] = n => l.closingReading = n), onInput: ne, type: "number", step: "0.01", class: A(["form-control form-control-lg", { "is-invalid": S.closing }]), placeholder: "Enter closing meter reading", style: { "border-radius": "12px", "border-width": "2px", "min-height": "60px", "font-size": "18px" } }, null, 34), [[ee, l.closingReading]]), S.closing ? (f(), v("div", es, r(S.closing), 1)) : x("", !0)])]), l.openingReading && l.closingReading ? (f(), v("div", ts, [e("div", ss, [e("div", as, [e("div", ns, [t[26] || (t[26] = e("div", { class: "text-success fs-7 mb-2" }, "Sales", -1)), e("div", is, r(J()) + "L", 1)]), e("div", os, [t[27] || (t[27] = e("div", { class: "text-success fs-7 mb-2" }, "Variance", -1)), e("div", { class: A(["fw-bold fs-3", Re()]) }, r(U()) + "L ", 3)]), e("div", rs, [t[28] || (t[28] = e("div", { class: "text-success fs-7 mb-2" }, "Accuracy", -1)), e("div", ls, r(_e()) + "%", 1)])])])])) : x("", !0), X.value ? (f(), v("div", ds, t[29] || (t[29] = [V('<div class="d-flex align-items-center" data-v-d5990e58><i class="ki-duotone ki-shield-search fs-1 text-warning me-4" data-v-d5990e58><span class="path1" data-v-d5990e58></span><span class="path2" data-v-d5990e58></span></i><div data-v-d5990e58><div class="fw-bold text-warning fs-5" data-v-d5990e58>High Variance Detected</div><div class="text-gray-700 fs-6" data-v-d5990e58> This reading will be flagged for management review </div></div></div>', 1)]))) : x("", !0)]), e("div", cs, [e("button", { onClick: Q, class: "btn btn-light fw-bold me-3 px-6 py-3", style: { "border-radius": "12px" } }, " Cancel "), e("button", { onClick: we, disabled: !se.value || O.value, class: A(["btn fw-bold px-6 py-3", X.value ? "btn-warning" : "btn-success"]), style: { "border-radius": "12px", "min-width": "140px" } }, [O.value ? (f(), v("span", ps, t[30] || (t[30] = [e("span", { class: "spinner-border spinner-border-sm me-2" }, null, -1), P(" Saving... ")]))) : (f(), v("span", gs, r(Oe()), 1))], 10, us)])])])])) : x("", !0), T.value ? (f(), v("div", vs, [e("div", fs, [e("div", hs, [e("div", ms, [e("div", bs, [e("h3", ys, [t[31] || (t[31] = e("i", { class: "ki-duotone ki-shield-tick fs-1 me-3" }, [e("span", { class: "path1" }), e("span", { class: "path2" }), e("span", { class: "path3" })], -1)), P(" Security: Open " + r(D.value) + " Shift ", 1)]), t[32] || (t[32] = e("p", { class: "text-white opacity-75 text-center mb-0 fs-6" }, " Required for station access and operations tracking ", -1))])]), e("div", Ss, [e("div", xs, [e("div", Is, [t[34] || (t[34] = e("i", { class: "ki-duotone ki-shield-check fs-1 text-info me-4" }, [e("span", { class: "path1" }), e("span", { class: "path2" }), e("span", { class: "path3" })], -1)), e("div", null, [t[33] || (t[33] = e("div", { class: "fw-bold text-info fs-5" }, "Station Security Protocol", -1)), e("div", ws, " Station " + r((o = i.value) == null ? void 0 : o.StationID) + " resources are protected. You must open a shift to access pump readings and ensure proper audit trails. ", 1)])])]), e("div", Ds, [t[35] || (t[35] = e("label", { class: "required form-label fw-semibold fs-5" }, "Opening Cash Balance (UGX)", -1)), W(e("input", { "onUpdate:modelValue": t[2] || (t[2] = n => y.openingBalance = n), onInput: Se, type: "number", class: A(["form-control form-control-lg", { "is-invalid": y.errors.openingBalance }]), placeholder: "Enter opening cash amount", style: { "border-radius": "12px", "border-width": "2px", "min-height": "60px", "font-size": "18px" }, step: "0.01", min: "0" }, null, 34), [[ee, y.openingBalance]]), y.errors.openingBalance ? (f(), v("div", _s, r(y.errors.openingBalance), 1)) : x("", !0)]), e("div", Rs, [e("div", ks, [t[42] || (t[42] = e("i", { class: "ki-duotone ki-check-circle fs-1 text-success me-4" }, [e("span", { class: "path1" }), e("span", { class: "path2" })], -1)), e("div", null, [t[41] || (t[41] = e("div", { class: "fw-bold text-success fs-5" }, "Auto-Detected Information", -1)), e("div", Ps, [t[36] || (t[36] = e("strong", null, "Shift:", -1)), P(" " + r(D.value) + " (" + r(ge.value) + ") ", 1), t[37] || (t[37] = e("br", null, null, -1)), t[38] || (t[38] = e("strong", null, "Station:", -1)), P(" " + r(H.value.StationName || ((d = i.value) == null ? void 0 : d.StationID)) + " ", 1), t[39] || (t[39] = e("br", null, null, -1)), t[40] || (t[40] = e("strong", null, "User:", -1)), P(" " + r(h.value.name || h.value.id), 1)])])])])]), e("div", Cs, [e("div", As, [e("button", { onClick: xe, disabled: !ae.value || O.value, class: "btn btn-danger btn-lg fw-bold px-8 py-4", style: { "border-radius": "12px", "min-width": "200px" } }, [O.value ? (f(), v("span", Ts, t[44] || (t[44] = [e("span", { class: "spinner-border spinner-border-sm me-2" }, null, -1), P(" Securing Access... ")]))) : (f(), v("span", Os, t[43] || (t[43] = [e("i", { class: "ki-duotone ki-shield-tick fs-2 me-3" }, [e("span", { class: "path1" }), e("span", { class: "path2" }), e("span", { class: "path3" })], -1), P(" Open Secure Shift ")])))], 8, Fs)])])])])])) : x("", !0), $.value ? (f(), v("div", $s, [e("div", Es, [t[45] || (t[45] = e("div", { class: "spinner-border text-primary mb-4", style: { width: "60px", height: "60px" } }, null, -1)), e("div", Ns, r(B.value), 1)])])) : x("", !0)]) } } }, Vs = Ne(Ms, [["__scopeId", "data-v-d5990e58"]]); export { Vs as default };
